
Calculator2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000289a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000289a  0000292e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  00002936  2**0
                  ALLOC
  3 .stab         00001f98  00000000  00000000  00002938  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ae8  00000000  00000000  000048d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000053b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000072b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000819c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009b07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 36       	cpi	r26, 0x6F	; 111
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e9       	ldi	r30, 0x9A	; 154
      78:	f8 e2       	ldi	r31, 0x28	; 40
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <main>
      8a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Dio_vidSetPinDir>:
#include"../Lib/Std_types.h"
#include"../Lib/Bit_math.h"
#include"Dio_int.h"
#include<avr/io.h>

void Dio_vidSetPinDir(u8 Pin, u8 Dir){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Dio_vidSetPinDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Dio_vidSetPinDir+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <Dio_vidSetPinDir+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	86 95       	lsr	r24
     b5c:	86 95       	lsr	r24
     b5e:	86 95       	lsr	r24
     b60:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	87 70       	andi	r24, 0x07	; 7
     b66:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3e 83       	std	Y+6, r19	; 0x06
     b70:	2d 83       	std	Y+5, r18	; 0x05
     b72:	8d 81       	ldd	r24, Y+5	; 0x05
     b74:	9e 81       	ldd	r25, Y+6	; 0x06
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <Dio_vidSetPinDir+0x38>
     b7c:	43 c0       	rjmp	.+134    	; 0xc04 <Dio_vidSetPinDir+0xbe>
     b7e:	2d 81       	ldd	r18, Y+5	; 0x05
     b80:	3e 81       	ldd	r19, Y+6	; 0x06
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	2c f4       	brge	.+10     	; 0xb92 <Dio_vidSetPinDir+0x4c>
     b88:	8d 81       	ldd	r24, Y+5	; 0x05
     b8a:	9e 81       	ldd	r25, Y+6	; 0x06
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	71 f0       	breq	.+28     	; 0xbac <Dio_vidSetPinDir+0x66>
     b90:	bc c0       	rjmp	.+376    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
     b92:	2d 81       	ldd	r18, Y+5	; 0x05
     b94:	3e 81       	ldd	r19, Y+6	; 0x06
     b96:	22 30       	cpi	r18, 0x02	; 2
     b98:	31 05       	cpc	r19, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <Dio_vidSetPinDir+0x58>
     b9c:	5f c0       	rjmp	.+190    	; 0xc5c <Dio_vidSetPinDir+0x116>
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <Dio_vidSetPinDir+0x64>
     ba8:	85 c0       	rjmp	.+266    	; 0xcb4 <Dio_vidSetPinDir+0x16e>
     baa:	af c0       	rjmp	.+350    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
	case 0:
		if(Dir==1){
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	a1 f4       	brne	.+40     	; 0xbda <Dio_vidSetPinDir+0x94>
			SET_BIT(DDRA,PinLoc);
     bb2:	aa e3       	ldi	r26, 0x3A	; 58
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ea e3       	ldi	r30, 0x3A	; 58
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <Dio_vidSetPinDir+0x8a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <Dio_vidSetPinDir+0x86>
     bd4:	84 2b       	or	r24, r20
     bd6:	8c 93       	st	X, r24
     bd8:	98 c0       	rjmp	.+304    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRA,PinLoc);
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <Dio_vidSetPinDir+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <Dio_vidSetPinDir+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	83 c0       	rjmp	.+262    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 1:
		if(Dir==1){
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	a1 f4       	brne	.+40     	; 0xc32 <Dio_vidSetPinDir+0xec>
			SET_BIT(DDRB,PinLoc);
     c0a:	a7 e3       	ldi	r26, 0x37	; 55
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e7 e3       	ldi	r30, 0x37	; 55
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <Dio_vidSetPinDir+0xe2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <Dio_vidSetPinDir+0xde>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	6c c0       	rjmp	.+216    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRB,PinLoc);
     c32:	a7 e3       	ldi	r26, 0x37	; 55
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e7 e3       	ldi	r30, 0x37	; 55
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <Dio_vidSetPinDir+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <Dio_vidSetPinDir+0x106>
     c54:	80 95       	com	r24
     c56:	84 23       	and	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	57 c0       	rjmp	.+174    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 2:
		if(Dir==1){
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	a1 f4       	brne	.+40     	; 0xc8a <Dio_vidSetPinDir+0x144>
			SET_BIT(DDRC,PinLoc);
     c62:	a4 e3       	ldi	r26, 0x34	; 52
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e4 e3       	ldi	r30, 0x34	; 52
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <Dio_vidSetPinDir+0x13a>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <Dio_vidSetPinDir+0x136>
     c84:	84 2b       	or	r24, r20
     c86:	8c 93       	st	X, r24
     c88:	40 c0       	rjmp	.+128    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRC,PinLoc);
     c8a:	a4 e3       	ldi	r26, 0x34	; 52
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e4 e3       	ldi	r30, 0x34	; 52
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <Dio_vidSetPinDir+0x162>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <Dio_vidSetPinDir+0x15e>
     cac:	80 95       	com	r24
     cae:	84 23       	and	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	2b c0       	rjmp	.+86     	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 3:
		if(Dir==1){
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	a1 f4       	brne	.+40     	; 0xce2 <Dio_vidSetPinDir+0x19c>
			SET_BIT(DDRD,PinLoc);
     cba:	a1 e3       	ldi	r26, 0x31	; 49
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <Dio_vidSetPinDir+0x192>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <Dio_vidSetPinDir+0x18e>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	14 c0       	rjmp	.+40     	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRD,PinLoc);
     ce2:	a1 e3       	ldi	r26, 0x31	; 49
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e1 e3       	ldi	r30, 0x31	; 49
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <Dio_vidSetPinDir+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <Dio_vidSetPinDir+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
		}
		break;
	}
}
     d0a:	26 96       	adiw	r28, 0x06	; 6
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin, u8 Val){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <Dio_vidSetPinVal+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <Dio_vidSetPinVal+0x8>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <Dio_vidSetPinVal+0xa>
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	8b 83       	std	Y+3, r24	; 0x03
     d2c:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	86 95       	lsr	r24
     d32:	86 95       	lsr	r24
     d34:	86 95       	lsr	r24
     d36:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	87 70       	andi	r24, 0x07	; 7
     d3c:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	3e 83       	std	Y+6, r19	; 0x06
     d46:	2d 83       	std	Y+5, r18	; 0x05
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <Dio_vidSetPinVal+0x38>
     d52:	43 c0       	rjmp	.+134    	; 0xdda <Dio_vidSetPinVal+0xbe>
     d54:	2d 81       	ldd	r18, Y+5	; 0x05
     d56:	3e 81       	ldd	r19, Y+6	; 0x06
     d58:	22 30       	cpi	r18, 0x02	; 2
     d5a:	31 05       	cpc	r19, r1
     d5c:	2c f4       	brge	.+10     	; 0xd68 <Dio_vidSetPinVal+0x4c>
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	71 f0       	breq	.+28     	; 0xd82 <Dio_vidSetPinVal+0x66>
     d66:	bc c0       	rjmp	.+376    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
     d68:	2d 81       	ldd	r18, Y+5	; 0x05
     d6a:	3e 81       	ldd	r19, Y+6	; 0x06
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <Dio_vidSetPinVal+0x58>
     d72:	5f c0       	rjmp	.+190    	; 0xe32 <Dio_vidSetPinVal+0x116>
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <Dio_vidSetPinVal+0x64>
     d7e:	85 c0       	rjmp	.+266    	; 0xe8a <Dio_vidSetPinVal+0x16e>
     d80:	af c0       	rjmp	.+350    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
	case 0:
		if(Val==1){
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	a1 f4       	brne	.+40     	; 0xdb0 <Dio_vidSetPinVal+0x94>
			SET_BIT(PORTA,PinLoc);
     d88:	ab e3       	ldi	r26, 0x3B	; 59
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	eb e3       	ldi	r30, 0x3B	; 59
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <Dio_vidSetPinVal+0x8a>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <Dio_vidSetPinVal+0x86>
     daa:	84 2b       	or	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	98 c0       	rjmp	.+304    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTA,PinLoc);
     db0:	ab e3       	ldi	r26, 0x3B	; 59
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	eb e3       	ldi	r30, 0x3B	; 59
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <Dio_vidSetPinVal+0xb2>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <Dio_vidSetPinVal+0xae>
     dd2:	80 95       	com	r24
     dd4:	84 23       	and	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	83 c0       	rjmp	.+262    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 1:
		if(Val==1){
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	a1 f4       	brne	.+40     	; 0xe08 <Dio_vidSetPinVal+0xec>
			SET_BIT(PORTB,PinLoc);
     de0:	a8 e3       	ldi	r26, 0x38	; 56
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 e3       	ldi	r30, 0x38	; 56
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <Dio_vidSetPinVal+0xe2>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <Dio_vidSetPinVal+0xde>
     e02:	84 2b       	or	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	6c c0       	rjmp	.+216    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTB,PinLoc);
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <Dio_vidSetPinVal+0x10a>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <Dio_vidSetPinVal+0x106>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	57 c0       	rjmp	.+174    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 2:
		if(Val==1){
     e32:	8c 81       	ldd	r24, Y+4	; 0x04
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	a1 f4       	brne	.+40     	; 0xe60 <Dio_vidSetPinVal+0x144>
			SET_BIT(PORTC,PinLoc);
     e38:	a5 e3       	ldi	r26, 0x35	; 53
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e3       	ldi	r30, 0x35	; 53
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <Dio_vidSetPinVal+0x13a>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <Dio_vidSetPinVal+0x136>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	40 c0       	rjmp	.+128    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTC,PinLoc);
     e60:	a5 e3       	ldi	r26, 0x35	; 53
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e3       	ldi	r30, 0x35	; 53
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <Dio_vidSetPinVal+0x162>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <Dio_vidSetPinVal+0x15e>
     e82:	80 95       	com	r24
     e84:	84 23       	and	r24, r20
     e86:	8c 93       	st	X, r24
     e88:	2b c0       	rjmp	.+86     	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 3:
		if(Val==1){
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	a1 f4       	brne	.+40     	; 0xeb8 <Dio_vidSetPinVal+0x19c>
			SET_BIT(PORTD,PinLoc);
     e90:	a2 e3       	ldi	r26, 0x32	; 50
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e2 e3       	ldi	r30, 0x32	; 50
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <Dio_vidSetPinVal+0x192>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <Dio_vidSetPinVal+0x18e>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTD,PinLoc);
     eb8:	a2 e3       	ldi	r26, 0x32	; 50
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e3       	ldi	r30, 0x32	; 50
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <Dio_vidSetPinVal+0x1ba>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <Dio_vidSetPinVal+0x1b6>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
		}
		break;
	}
}
     ee0:	26 96       	adiw	r28, 0x06	; 6
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <Dio_u8GetPinVal>:

u8 Dio_u8GetPinVal(u8 pin){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <Dio_u8GetPinVal+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <Dio_u8GetPinVal+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <Dio_u8GetPinVal+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8c 83       	std	Y+4, r24	; 0x04
	u8 PortID;
	u8 PinLoc;
	u8 PinVal;

	PortID=pin/8;
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	86 95       	lsr	r24
     f06:	86 95       	lsr	r24
     f08:	86 95       	lsr	r24
     f0a:	8b 83       	std	Y+3, r24	; 0x03
	PinLoc=pin%8;
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	87 70       	andi	r24, 0x07	; 7
     f10:	8a 83       	std	Y+2, r24	; 0x02

	switch(PortID){
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3e 83       	std	Y+6, r19	; 0x06
     f1a:	2d 83       	std	Y+5, r18	; 0x05
     f1c:	4d 81       	ldd	r20, Y+5	; 0x05
     f1e:	5e 81       	ldd	r21, Y+6	; 0x06
     f20:	41 30       	cpi	r20, 0x01	; 1
     f22:	51 05       	cpc	r21, r1
     f24:	41 f1       	breq	.+80     	; 0xf76 <Dio_u8GetPinVal+0x84>
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	82 30       	cpi	r24, 0x02	; 2
     f2c:	91 05       	cpc	r25, r1
     f2e:	34 f4       	brge	.+12     	; 0xf3c <Dio_u8GetPinVal+0x4a>
     f30:	2d 81       	ldd	r18, Y+5	; 0x05
     f32:	3e 81       	ldd	r19, Y+6	; 0x06
     f34:	21 15       	cp	r18, r1
     f36:	31 05       	cpc	r19, r1
     f38:	61 f0       	breq	.+24     	; 0xf52 <Dio_u8GetPinVal+0x60>
     f3a:	52 c0       	rjmp	.+164    	; 0xfe0 <Dio_u8GetPinVal+0xee>
     f3c:	4d 81       	ldd	r20, Y+5	; 0x05
     f3e:	5e 81       	ldd	r21, Y+6	; 0x06
     f40:	42 30       	cpi	r20, 0x02	; 2
     f42:	51 05       	cpc	r21, r1
     f44:	51 f1       	breq	.+84     	; 0xf9a <Dio_u8GetPinVal+0xa8>
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	91 05       	cpc	r25, r1
     f4e:	b9 f1       	breq	.+110    	; 0xfbe <Dio_u8GetPinVal+0xcc>
     f50:	47 c0       	rjmp	.+142    	; 0xfe0 <Dio_u8GetPinVal+0xee>

	case 0:
		PinVal=GET_BIT(PINA,PinLoc);
     f52:	e9 e3       	ldi	r30, 0x39	; 57
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a9 01       	movw	r20, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <Dio_u8GetPinVal+0x78>
     f66:	55 95       	asr	r21
     f68:	47 95       	ror	r20
     f6a:	8a 95       	dec	r24
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <Dio_u8GetPinVal+0x74>
     f6e:	ca 01       	movw	r24, r20
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	35 c0       	rjmp	.+106    	; 0xfe0 <Dio_u8GetPinVal+0xee>
		break;

	case 1:
		PinVal=GET_BIT(PINB,PinLoc);
     f76:	e6 e3       	ldi	r30, 0x36	; 54
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	a9 01       	movw	r20, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <Dio_u8GetPinVal+0x9c>
     f8a:	55 95       	asr	r21
     f8c:	47 95       	ror	r20
     f8e:	8a 95       	dec	r24
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <Dio_u8GetPinVal+0x98>
     f92:	ca 01       	movw	r24, r20
     f94:	81 70       	andi	r24, 0x01	; 1
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	23 c0       	rjmp	.+70     	; 0xfe0 <Dio_u8GetPinVal+0xee>
		break;
	case 2:
		PinVal=GET_BIT(PINC,PinLoc);
     f9a:	e3 e3       	ldi	r30, 0x33	; 51
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <Dio_u8GetPinVal+0xc0>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <Dio_u8GetPinVal+0xbc>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	11 c0       	rjmp	.+34     	; 0xfe0 <Dio_u8GetPinVal+0xee>
		break;
	case 3:
		PinVal=GET_BIT(PIND,PinLoc);
     fbe:	e0 e3       	ldi	r30, 0x30	; 48
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <Dio_u8GetPinVal+0xe4>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <Dio_u8GetPinVal+0xe0>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return PinVal;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe2:	26 96       	adiw	r28, 0x06	; 6
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <Keypad_vidInit>:
#undef F_CPU
#define F_CPU 8000000
#include<util/delay.h>
#include<avr/io.h>

void Keypad_vidInit(void){
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
	//Setting upper 4 bits to output and lower 4 to input
	Dio_vidSetPinDir(KEYPAD_u8R1_PIN,DIO_u8OUTPUT);
     ffc:	88 e1       	ldi	r24, 0x18	; 24
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R2_PIN,DIO_u8OUTPUT);
    1004:	89 e1       	ldi	r24, 0x19	; 25
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R3_PIN,DIO_u8OUTPUT);
    100c:	8a e1       	ldi	r24, 0x1A	; 26
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R4_PIN,DIO_u8OUTPUT);
    1014:	8b e1       	ldi	r24, 0x1B	; 27
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	Dio_vidSetPinDir(KEYPAD_u8C1_PIN,DIO_u8INPUT);
    101c:	8c e1       	ldi	r24, 0x1C	; 28
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C2_PIN,DIO_u8INPUT);
    1024:	8d e1       	ldi	r24, 0x1D	; 29
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C3_PIN,DIO_u8INPUT);
    102c:	8e e1       	ldi	r24, 0x1E	; 30
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C4_PIN,DIO_u8INPUT);
    1034:	8f e1       	ldi	r24, 0x1F	; 31
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	//Pulling up resistors for lower 4 bits and passing 5v through upper 4 bits
	//>Indicating that we are not scanning for any button clicks right now
	Dio_vidSetPinVal(KEYPAD_u8R1_PIN,DIO_u8HIGH);
    103c:	88 e1       	ldi	r24, 0x18	; 24
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN,DIO_u8HIGH);
    1044:	89 e1       	ldi	r24, 0x19	; 25
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN,DIO_u8HIGH);
    104c:	8a e1       	ldi	r24, 0x1A	; 26
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN,DIO_u8HIGH);
    1054:	8b e1       	ldi	r24, 0x1B	; 27
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C1_PIN,DIO_u8HIGH);
    105c:	8c e1       	ldi	r24, 0x1C	; 28
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C2_PIN,DIO_u8HIGH);
    1064:	8d e1       	ldi	r24, 0x1D	; 29
    1066:	61 e0       	ldi	r22, 0x01	; 1
    1068:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C3_PIN,DIO_u8HIGH);
    106c:	8e e1       	ldi	r24, 0x1E	; 30
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C4_PIN,DIO_u8HIGH);
    1074:	8f e1       	ldi	r24, 0x1F	; 31
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <Keypad_u8GetKey>:

u8 Keypad_u8GetKey(void){
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	2e 97       	sbiw	r28, 0x0e	; 14
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
	u8 temp,pin_c1,pin_c2,pin_c3,pin_c4;

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN,DIO_u8LOW);
    1096:	88 e1       	ldi	r24, 0x18	; 24
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN,DIO_u8HIGH);
    109e:	89 e1       	ldi	r24, 0x19	; 25
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN,DIO_u8HIGH);
    10a6:	8a e1       	ldi	r24, 0x1A	; 26
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN,DIO_u8HIGH);
    10ae:	8b e1       	ldi	r24, 0x1B	; 27
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	//Masking to get values of input pins solely
	pin_c1= Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    10b6:	8c e1       	ldi	r24, 0x1C	; 28
    10b8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    10bc:	8c 83       	std	Y+4, r24	; 0x04
	pin_c2= Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    10be:	8d e1       	ldi	r24, 0x1D	; 29
    10c0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    10c4:	8b 83       	std	Y+3, r24	; 0x03
	pin_c3= Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    10c6:	8e e1       	ldi	r24, 0x1E	; 30
    10c8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    10cc:	8a 83       	std	Y+2, r24	; 0x02
	pin_c4= Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    10ce:	8f e1       	ldi	r24, 0x1F	; 31
    10d0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    10d4:	89 83       	std	Y+1, r24	; 0x01

	temp=0;
    10d6:	1d 82       	std	Y+5, r1	; 0x05
	temp|=(pin_c1<<4);
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	82 95       	swap	r24
    10e0:	92 95       	swap	r25
    10e2:	90 7f       	andi	r25, 0xF0	; 240
    10e4:	98 27       	eor	r25, r24
    10e6:	80 7f       	andi	r24, 0xF0	; 240
    10e8:	98 27       	eor	r25, r24
    10ea:	98 2f       	mov	r25, r24
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	89 2b       	or	r24, r25
    10f0:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c2<<5);
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	82 95       	swap	r24
    10fe:	92 95       	swap	r25
    1100:	90 7f       	andi	r25, 0xF0	; 240
    1102:	98 27       	eor	r25, r24
    1104:	80 7f       	andi	r24, 0xF0	; 240
    1106:	98 27       	eor	r25, r24
    1108:	98 2f       	mov	r25, r24
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	89 2b       	or	r24, r25
    110e:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c3<<6);
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	00 24       	eor	r0, r0
    1118:	96 95       	lsr	r25
    111a:	87 95       	ror	r24
    111c:	07 94       	ror	r0
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	07 94       	ror	r0
    1124:	98 2f       	mov	r25, r24
    1126:	80 2d       	mov	r24, r0
    1128:	98 2f       	mov	r25, r24
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	89 2b       	or	r24, r25
    112e:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c4<<7);
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	96 95       	lsr	r25
    1138:	98 2f       	mov	r25, r24
    113a:	88 27       	eor	r24, r24
    113c:	97 95       	ror	r25
    113e:	87 95       	ror	r24
    1140:	98 2f       	mov	r25, r24
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	89 2b       	or	r24, r25
    1146:	8d 83       	std	Y+5, r24	; 0x05


	switch(temp){
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3e 87       	std	Y+14, r19	; 0x0e
    1150:	2d 87       	std	Y+13, r18	; 0x0d
    1152:	8d 85       	ldd	r24, Y+13	; 0x0d
    1154:	9e 85       	ldd	r25, Y+14	; 0x0e
    1156:	80 3b       	cpi	r24, 0xB0	; 176
    1158:	91 05       	cpc	r25, r1
    115a:	d9 f0       	breq	.+54     	; 0x1192 <Keypad_u8GetKey+0x110>
    115c:	2d 85       	ldd	r18, Y+13	; 0x0d
    115e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1160:	21 3b       	cpi	r18, 0xB1	; 177
    1162:	31 05       	cpc	r19, r1
    1164:	34 f4       	brge	.+12     	; 0x1172 <Keypad_u8GetKey+0xf0>
    1166:	8d 85       	ldd	r24, Y+13	; 0x0d
    1168:	9e 85       	ldd	r25, Y+14	; 0x0e
    116a:	80 37       	cpi	r24, 0x70	; 112
    116c:	91 05       	cpc	r25, r1
    116e:	a1 f0       	breq	.+40     	; 0x1198 <Keypad_u8GetKey+0x116>
    1170:	16 c0       	rjmp	.+44     	; 0x119e <Keypad_u8GetKey+0x11c>
    1172:	2d 85       	ldd	r18, Y+13	; 0x0d
    1174:	3e 85       	ldd	r19, Y+14	; 0x0e
    1176:	20 3d       	cpi	r18, 0xD0	; 208
    1178:	31 05       	cpc	r19, r1
    117a:	41 f0       	breq	.+16     	; 0x118c <Keypad_u8GetKey+0x10a>
    117c:	8d 85       	ldd	r24, Y+13	; 0x0d
    117e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1180:	80 3e       	cpi	r24, 0xE0	; 224
    1182:	91 05       	cpc	r25, r1
    1184:	61 f4       	brne	.+24     	; 0x119e <Keypad_u8GetKey+0x11c>
	case 0b11100000:
		return KEYPAD_u8R1C1_KEY;
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	9c 87       	std	Y+12, r25	; 0x0c
    118a:	96 c1       	rjmp	.+812    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b11010000:
		return KEYPAD_u8R1C2_KEY;
    118c:	22 e0       	ldi	r18, 0x02	; 2
    118e:	2c 87       	std	Y+12, r18	; 0x0c
    1190:	93 c1       	rjmp	.+806    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b10110000:
		return KEYPAD_u8R1C3_KEY;
    1192:	33 e0       	ldi	r19, 0x03	; 3
    1194:	3c 87       	std	Y+12, r19	; 0x0c
    1196:	90 c1       	rjmp	.+800    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b01110000:
		return KEYPAD_u8R1C4_KEY;
    1198:	8b e2       	ldi	r24, 0x2B	; 43
    119a:	8c 87       	std	Y+12, r24	; 0x0c
    119c:	8d c1       	rjmp	.+794    	; 0x14b8 <Keypad_u8GetKey+0x436>
	}

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN,DIO_u8HIGH);
    119e:	88 e1       	ldi	r24, 0x18	; 24
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN,DIO_u8LOW);
    11a6:	89 e1       	ldi	r24, 0x19	; 25
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN,DIO_u8HIGH);
    11ae:	8a e1       	ldi	r24, 0x1A	; 26
    11b0:	61 e0       	ldi	r22, 0x01	; 1
    11b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN,DIO_u8HIGH);
    11b6:	8b e1       	ldi	r24, 0x1B	; 27
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	//Masking to get values of input pins solely
	pin_c1= Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    11be:	8c e1       	ldi	r24, 0x1C	; 28
    11c0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    11c4:	8c 83       	std	Y+4, r24	; 0x04
	pin_c2= Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    11c6:	8d e1       	ldi	r24, 0x1D	; 29
    11c8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    11cc:	8b 83       	std	Y+3, r24	; 0x03
	pin_c3= Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    11ce:	8e e1       	ldi	r24, 0x1E	; 30
    11d0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    11d4:	8a 83       	std	Y+2, r24	; 0x02
	pin_c4= Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    11d6:	8f e1       	ldi	r24, 0x1F	; 31
    11d8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    11dc:	89 83       	std	Y+1, r24	; 0x01

	temp=0;
    11de:	1d 82       	std	Y+5, r1	; 0x05
	temp|=(pin_c1<<4);
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	82 95       	swap	r24
    11e8:	92 95       	swap	r25
    11ea:	90 7f       	andi	r25, 0xF0	; 240
    11ec:	98 27       	eor	r25, r24
    11ee:	80 7f       	andi	r24, 0xF0	; 240
    11f0:	98 27       	eor	r25, r24
    11f2:	98 2f       	mov	r25, r24
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	89 2b       	or	r24, r25
    11f8:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c2<<5);
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	82 95       	swap	r24
    1206:	92 95       	swap	r25
    1208:	90 7f       	andi	r25, 0xF0	; 240
    120a:	98 27       	eor	r25, r24
    120c:	80 7f       	andi	r24, 0xF0	; 240
    120e:	98 27       	eor	r25, r24
    1210:	98 2f       	mov	r25, r24
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	89 2b       	or	r24, r25
    1216:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c3<<6);
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	00 24       	eor	r0, r0
    1220:	96 95       	lsr	r25
    1222:	87 95       	ror	r24
    1224:	07 94       	ror	r0
    1226:	96 95       	lsr	r25
    1228:	87 95       	ror	r24
    122a:	07 94       	ror	r0
    122c:	98 2f       	mov	r25, r24
    122e:	80 2d       	mov	r24, r0
    1230:	98 2f       	mov	r25, r24
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	89 2b       	or	r24, r25
    1236:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c4<<7);
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	96 95       	lsr	r25
    1240:	98 2f       	mov	r25, r24
    1242:	88 27       	eor	r24, r24
    1244:	97 95       	ror	r25
    1246:	87 95       	ror	r24
    1248:	98 2f       	mov	r25, r24
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	89 2b       	or	r24, r25
    124e:	8d 83       	std	Y+5, r24	; 0x05


	switch(temp){
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3b 87       	std	Y+11, r19	; 0x0b
    1258:	2a 87       	std	Y+10, r18	; 0x0a
    125a:	8a 85       	ldd	r24, Y+10	; 0x0a
    125c:	9b 85       	ldd	r25, Y+11	; 0x0b
    125e:	80 3b       	cpi	r24, 0xB0	; 176
    1260:	91 05       	cpc	r25, r1
    1262:	d9 f0       	breq	.+54     	; 0x129a <Keypad_u8GetKey+0x218>
    1264:	2a 85       	ldd	r18, Y+10	; 0x0a
    1266:	3b 85       	ldd	r19, Y+11	; 0x0b
    1268:	21 3b       	cpi	r18, 0xB1	; 177
    126a:	31 05       	cpc	r19, r1
    126c:	34 f4       	brge	.+12     	; 0x127a <Keypad_u8GetKey+0x1f8>
    126e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1270:	9b 85       	ldd	r25, Y+11	; 0x0b
    1272:	80 37       	cpi	r24, 0x70	; 112
    1274:	91 05       	cpc	r25, r1
    1276:	a1 f0       	breq	.+40     	; 0x12a0 <Keypad_u8GetKey+0x21e>
    1278:	16 c0       	rjmp	.+44     	; 0x12a6 <Keypad_u8GetKey+0x224>
    127a:	2a 85       	ldd	r18, Y+10	; 0x0a
    127c:	3b 85       	ldd	r19, Y+11	; 0x0b
    127e:	20 3d       	cpi	r18, 0xD0	; 208
    1280:	31 05       	cpc	r19, r1
    1282:	41 f0       	breq	.+16     	; 0x1294 <Keypad_u8GetKey+0x212>
    1284:	8a 85       	ldd	r24, Y+10	; 0x0a
    1286:	9b 85       	ldd	r25, Y+11	; 0x0b
    1288:	80 3e       	cpi	r24, 0xE0	; 224
    128a:	91 05       	cpc	r25, r1
    128c:	61 f4       	brne	.+24     	; 0x12a6 <Keypad_u8GetKey+0x224>
	case 0b11100000:
		return KEYPAD_u8R2C1_KEY;
    128e:	94 e0       	ldi	r25, 0x04	; 4
    1290:	9c 87       	std	Y+12, r25	; 0x0c
    1292:	12 c1       	rjmp	.+548    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b11010000:
		return KEYPAD_u8R2C2_KEY;
    1294:	25 e0       	ldi	r18, 0x05	; 5
    1296:	2c 87       	std	Y+12, r18	; 0x0c
    1298:	0f c1       	rjmp	.+542    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b10110000:
		return KEYPAD_u8R2C3_KEY;
    129a:	36 e0       	ldi	r19, 0x06	; 6
    129c:	3c 87       	std	Y+12, r19	; 0x0c
    129e:	0c c1       	rjmp	.+536    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b01110000:
		return KEYPAD_u8R2C4_KEY;
    12a0:	8d e2       	ldi	r24, 0x2D	; 45
    12a2:	8c 87       	std	Y+12, r24	; 0x0c
    12a4:	09 c1       	rjmp	.+530    	; 0x14b8 <Keypad_u8GetKey+0x436>
	}

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN,DIO_u8HIGH);
    12a6:	88 e1       	ldi	r24, 0x18	; 24
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN,DIO_u8HIGH);
    12ae:	89 e1       	ldi	r24, 0x19	; 25
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN,DIO_u8LOW);
    12b6:	8a e1       	ldi	r24, 0x1A	; 26
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN,DIO_u8HIGH);
    12be:	8b e1       	ldi	r24, 0x1B	; 27
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	//Masking to get values of input pins solely
	pin_c1= Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    12c6:	8c e1       	ldi	r24, 0x1C	; 28
    12c8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    12cc:	8c 83       	std	Y+4, r24	; 0x04
	pin_c2= Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    12ce:	8d e1       	ldi	r24, 0x1D	; 29
    12d0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    12d4:	8b 83       	std	Y+3, r24	; 0x03
	pin_c3= Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    12d6:	8e e1       	ldi	r24, 0x1E	; 30
    12d8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    12dc:	8a 83       	std	Y+2, r24	; 0x02
	pin_c4= Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    12de:	8f e1       	ldi	r24, 0x1F	; 31
    12e0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    12e4:	89 83       	std	Y+1, r24	; 0x01

	temp=0;
    12e6:	1d 82       	std	Y+5, r1	; 0x05
	temp|=(pin_c1<<4);
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	82 95       	swap	r24
    12f0:	92 95       	swap	r25
    12f2:	90 7f       	andi	r25, 0xF0	; 240
    12f4:	98 27       	eor	r25, r24
    12f6:	80 7f       	andi	r24, 0xF0	; 240
    12f8:	98 27       	eor	r25, r24
    12fa:	98 2f       	mov	r25, r24
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	89 2b       	or	r24, r25
    1300:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c2<<5);
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	82 95       	swap	r24
    130e:	92 95       	swap	r25
    1310:	90 7f       	andi	r25, 0xF0	; 240
    1312:	98 27       	eor	r25, r24
    1314:	80 7f       	andi	r24, 0xF0	; 240
    1316:	98 27       	eor	r25, r24
    1318:	98 2f       	mov	r25, r24
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	89 2b       	or	r24, r25
    131e:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c3<<6);
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	00 24       	eor	r0, r0
    1328:	96 95       	lsr	r25
    132a:	87 95       	ror	r24
    132c:	07 94       	ror	r0
    132e:	96 95       	lsr	r25
    1330:	87 95       	ror	r24
    1332:	07 94       	ror	r0
    1334:	98 2f       	mov	r25, r24
    1336:	80 2d       	mov	r24, r0
    1338:	98 2f       	mov	r25, r24
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	89 2b       	or	r24, r25
    133e:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c4<<7);
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	96 95       	lsr	r25
    1348:	98 2f       	mov	r25, r24
    134a:	88 27       	eor	r24, r24
    134c:	97 95       	ror	r25
    134e:	87 95       	ror	r24
    1350:	98 2f       	mov	r25, r24
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	89 2b       	or	r24, r25
    1356:	8d 83       	std	Y+5, r24	; 0x05

	switch(temp){
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	39 87       	std	Y+9, r19	; 0x09
    1360:	28 87       	std	Y+8, r18	; 0x08
    1362:	88 85       	ldd	r24, Y+8	; 0x08
    1364:	99 85       	ldd	r25, Y+9	; 0x09
    1366:	80 3b       	cpi	r24, 0xB0	; 176
    1368:	91 05       	cpc	r25, r1
    136a:	d9 f0       	breq	.+54     	; 0x13a2 <Keypad_u8GetKey+0x320>
    136c:	28 85       	ldd	r18, Y+8	; 0x08
    136e:	39 85       	ldd	r19, Y+9	; 0x09
    1370:	21 3b       	cpi	r18, 0xB1	; 177
    1372:	31 05       	cpc	r19, r1
    1374:	34 f4       	brge	.+12     	; 0x1382 <Keypad_u8GetKey+0x300>
    1376:	88 85       	ldd	r24, Y+8	; 0x08
    1378:	99 85       	ldd	r25, Y+9	; 0x09
    137a:	80 37       	cpi	r24, 0x70	; 112
    137c:	91 05       	cpc	r25, r1
    137e:	a1 f0       	breq	.+40     	; 0x13a8 <Keypad_u8GetKey+0x326>
    1380:	16 c0       	rjmp	.+44     	; 0x13ae <Keypad_u8GetKey+0x32c>
    1382:	28 85       	ldd	r18, Y+8	; 0x08
    1384:	39 85       	ldd	r19, Y+9	; 0x09
    1386:	20 3d       	cpi	r18, 0xD0	; 208
    1388:	31 05       	cpc	r19, r1
    138a:	41 f0       	breq	.+16     	; 0x139c <Keypad_u8GetKey+0x31a>
    138c:	88 85       	ldd	r24, Y+8	; 0x08
    138e:	99 85       	ldd	r25, Y+9	; 0x09
    1390:	80 3e       	cpi	r24, 0xE0	; 224
    1392:	91 05       	cpc	r25, r1
    1394:	61 f4       	brne	.+24     	; 0x13ae <Keypad_u8GetKey+0x32c>
	case 0b11100000:
		return KEYPAD_u8R3C1_KEY;
    1396:	97 e0       	ldi	r25, 0x07	; 7
    1398:	9c 87       	std	Y+12, r25	; 0x0c
    139a:	8e c0       	rjmp	.+284    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b11010000:
		return KEYPAD_u8R3C2_KEY;
    139c:	28 e0       	ldi	r18, 0x08	; 8
    139e:	2c 87       	std	Y+12, r18	; 0x0c
    13a0:	8b c0       	rjmp	.+278    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b10110000:
		return KEYPAD_u8R3C3_KEY;
    13a2:	39 e0       	ldi	r19, 0x09	; 9
    13a4:	3c 87       	std	Y+12, r19	; 0x0c
    13a6:	88 c0       	rjmp	.+272    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b01110000:
		return KEYPAD_u8R3C4_KEY;
    13a8:	8a e2       	ldi	r24, 0x2A	; 42
    13aa:	8c 87       	std	Y+12, r24	; 0x0c
    13ac:	85 c0       	rjmp	.+266    	; 0x14b8 <Keypad_u8GetKey+0x436>
	}

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN,DIO_u8HIGH);
    13ae:	88 e1       	ldi	r24, 0x18	; 24
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN,DIO_u8HIGH);
    13b6:	89 e1       	ldi	r24, 0x19	; 25
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN,DIO_u8HIGH);
    13be:	8a e1       	ldi	r24, 0x1A	; 26
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN,DIO_u8LOW);
    13c6:	8b e1       	ldi	r24, 0x1B	; 27
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	//Masking to get values of input pins solely
	pin_c1= Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    13ce:	8c e1       	ldi	r24, 0x1C	; 28
    13d0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    13d4:	8c 83       	std	Y+4, r24	; 0x04
	pin_c2= Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    13d6:	8d e1       	ldi	r24, 0x1D	; 29
    13d8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    13dc:	8b 83       	std	Y+3, r24	; 0x03
	pin_c3= Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    13de:	8e e1       	ldi	r24, 0x1E	; 30
    13e0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    13e4:	8a 83       	std	Y+2, r24	; 0x02
	pin_c4= Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    13e6:	8f e1       	ldi	r24, 0x1F	; 31
    13e8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    13ec:	89 83       	std	Y+1, r24	; 0x01

	temp=0;
    13ee:	1d 82       	std	Y+5, r1	; 0x05
	temp|=(pin_c1<<4);
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	82 95       	swap	r24
    13f8:	92 95       	swap	r25
    13fa:	90 7f       	andi	r25, 0xF0	; 240
    13fc:	98 27       	eor	r25, r24
    13fe:	80 7f       	andi	r24, 0xF0	; 240
    1400:	98 27       	eor	r25, r24
    1402:	98 2f       	mov	r25, r24
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	89 2b       	or	r24, r25
    1408:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c2<<5);
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	82 95       	swap	r24
    1416:	92 95       	swap	r25
    1418:	90 7f       	andi	r25, 0xF0	; 240
    141a:	98 27       	eor	r25, r24
    141c:	80 7f       	andi	r24, 0xF0	; 240
    141e:	98 27       	eor	r25, r24
    1420:	98 2f       	mov	r25, r24
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	89 2b       	or	r24, r25
    1426:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c3<<6);
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	00 24       	eor	r0, r0
    1430:	96 95       	lsr	r25
    1432:	87 95       	ror	r24
    1434:	07 94       	ror	r0
    1436:	96 95       	lsr	r25
    1438:	87 95       	ror	r24
    143a:	07 94       	ror	r0
    143c:	98 2f       	mov	r25, r24
    143e:	80 2d       	mov	r24, r0
    1440:	98 2f       	mov	r25, r24
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	89 2b       	or	r24, r25
    1446:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c4<<7);
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	96 95       	lsr	r25
    1450:	98 2f       	mov	r25, r24
    1452:	88 27       	eor	r24, r24
    1454:	97 95       	ror	r25
    1456:	87 95       	ror	r24
    1458:	98 2f       	mov	r25, r24
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	89 2b       	or	r24, r25
    145e:	8d 83       	std	Y+5, r24	; 0x05

	switch(temp){
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3f 83       	std	Y+7, r19	; 0x07
    1468:	2e 83       	std	Y+6, r18	; 0x06
    146a:	8e 81       	ldd	r24, Y+6	; 0x06
    146c:	9f 81       	ldd	r25, Y+7	; 0x07
    146e:	80 3b       	cpi	r24, 0xB0	; 176
    1470:	91 05       	cpc	r25, r1
    1472:	d1 f0       	breq	.+52     	; 0x14a8 <Keypad_u8GetKey+0x426>
    1474:	2e 81       	ldd	r18, Y+6	; 0x06
    1476:	3f 81       	ldd	r19, Y+7	; 0x07
    1478:	21 3b       	cpi	r18, 0xB1	; 177
    147a:	31 05       	cpc	r19, r1
    147c:	34 f4       	brge	.+12     	; 0x148a <Keypad_u8GetKey+0x408>
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	80 37       	cpi	r24, 0x70	; 112
    1484:	91 05       	cpc	r25, r1
    1486:	99 f0       	breq	.+38     	; 0x14ae <Keypad_u8GetKey+0x42c>
    1488:	15 c0       	rjmp	.+42     	; 0x14b4 <Keypad_u8GetKey+0x432>
    148a:	2e 81       	ldd	r18, Y+6	; 0x06
    148c:	3f 81       	ldd	r19, Y+7	; 0x07
    148e:	20 3d       	cpi	r18, 0xD0	; 208
    1490:	31 05       	cpc	r19, r1
    1492:	41 f0       	breq	.+16     	; 0x14a4 <Keypad_u8GetKey+0x422>
    1494:	8e 81       	ldd	r24, Y+6	; 0x06
    1496:	9f 81       	ldd	r25, Y+7	; 0x07
    1498:	80 3e       	cpi	r24, 0xE0	; 224
    149a:	91 05       	cpc	r25, r1
    149c:	59 f4       	brne	.+22     	; 0x14b4 <Keypad_u8GetKey+0x432>
	case 0b11100000:
		return KEYPAD_u8R4C1_KEY;
    149e:	93 e2       	ldi	r25, 0x23	; 35
    14a0:	9c 87       	std	Y+12, r25	; 0x0c
    14a2:	0a c0       	rjmp	.+20     	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b11010000:
		return KEYPAD_u8R4C2_KEY;
    14a4:	1c 86       	std	Y+12, r1	; 0x0c
    14a6:	08 c0       	rjmp	.+16     	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b10110000:
		return KEYPAD_u8R4C3_KEY;
    14a8:	2d e3       	ldi	r18, 0x3D	; 61
    14aa:	2c 87       	std	Y+12, r18	; 0x0c
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b01110000:
		return KEYPAD_u8R4C4_KEY;
    14ae:	3f e2       	ldi	r19, 0x2F	; 47
    14b0:	3c 87       	std	Y+12, r19	; 0x0c
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <Keypad_u8GetKey+0x436>
	}
	return KEYPAD_u8NO_KEY;
    14b4:	8f ef       	ldi	r24, 0xFF	; 255
    14b6:	8c 87       	std	Y+12, r24	; 0x0c
    14b8:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    14ba:	2e 96       	adiw	r28, 0x0e	; 14
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <Lcd_vidSendCommand>:
#include"Dio_int.h"
#include"Lcd_cfg.h"
#include"Lcd_int.h"


void Lcd_vidSendCommand(u8 Cmd){
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	2f 97       	sbiw	r28, 0x0f	; 15
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	8f 87       	std	Y+15, r24	; 0x0f

	Dio_vidSetPinVal(LCD_u8RS_PIN,DIO_u8LOW);  //RS Pin cleared
    14e2:	88 e0       	ldi	r24, 0x08	; 8
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN,DIO_u8LOW);  //RW Pin cleared because we always wanna write
    14ea:	89 e0       	ldi	r24, 0x09	; 9
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Cmd,0));
    14f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f4:	98 2f       	mov	r25, r24
    14f6:	91 70       	andi	r25, 0x01	; 1
    14f8:	80 e1       	ldi	r24, 0x10	; 16
    14fa:	69 2f       	mov	r22, r25
    14fc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Cmd,1));
    1500:	8f 85       	ldd	r24, Y+15	; 0x0f
    1502:	86 95       	lsr	r24
    1504:	98 2f       	mov	r25, r24
    1506:	91 70       	andi	r25, 0x01	; 1
    1508:	81 e1       	ldi	r24, 0x11	; 17
    150a:	69 2f       	mov	r22, r25
    150c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Cmd,2));
    1510:	8f 85       	ldd	r24, Y+15	; 0x0f
    1512:	86 95       	lsr	r24
    1514:	86 95       	lsr	r24
    1516:	98 2f       	mov	r25, r24
    1518:	91 70       	andi	r25, 0x01	; 1
    151a:	82 e1       	ldi	r24, 0x12	; 18
    151c:	69 2f       	mov	r22, r25
    151e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Cmd,3));
    1522:	8f 85       	ldd	r24, Y+15	; 0x0f
    1524:	86 95       	lsr	r24
    1526:	86 95       	lsr	r24
    1528:	86 95       	lsr	r24
    152a:	98 2f       	mov	r25, r24
    152c:	91 70       	andi	r25, 0x01	; 1
    152e:	83 e1       	ldi	r24, 0x13	; 19
    1530:	69 2f       	mov	r22, r25
    1532:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Cmd,4));
    1536:	8f 85       	ldd	r24, Y+15	; 0x0f
    1538:	82 95       	swap	r24
    153a:	8f 70       	andi	r24, 0x0F	; 15
    153c:	98 2f       	mov	r25, r24
    153e:	91 70       	andi	r25, 0x01	; 1
    1540:	84 e1       	ldi	r24, 0x14	; 20
    1542:	69 2f       	mov	r22, r25
    1544:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Cmd,5));
    1548:	8f 85       	ldd	r24, Y+15	; 0x0f
    154a:	82 95       	swap	r24
    154c:	86 95       	lsr	r24
    154e:	87 70       	andi	r24, 0x07	; 7
    1550:	98 2f       	mov	r25, r24
    1552:	91 70       	andi	r25, 0x01	; 1
    1554:	85 e1       	ldi	r24, 0x15	; 21
    1556:	69 2f       	mov	r22, r25
    1558:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Cmd,6));
    155c:	8f 85       	ldd	r24, Y+15	; 0x0f
    155e:	82 95       	swap	r24
    1560:	86 95       	lsr	r24
    1562:	86 95       	lsr	r24
    1564:	83 70       	andi	r24, 0x03	; 3
    1566:	98 2f       	mov	r25, r24
    1568:	91 70       	andi	r25, 0x01	; 1
    156a:	86 e1       	ldi	r24, 0x16	; 22
    156c:	69 2f       	mov	r22, r25
    156e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Cmd,7));
    1572:	8f 85       	ldd	r24, Y+15	; 0x0f
    1574:	98 2f       	mov	r25, r24
    1576:	99 1f       	adc	r25, r25
    1578:	99 27       	eor	r25, r25
    157a:	99 1f       	adc	r25, r25
    157c:	87 e1       	ldi	r24, 0x17	; 23
    157e:	69 2f       	mov	r22, r25
    1580:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH); //EN
    1584:	8a e0       	ldi	r24, 0x0A	; 10
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	b0 e4       	ldi	r27, 0x40	; 64
    1594:	8b 87       	std	Y+11, r24	; 0x0b
    1596:	9c 87       	std	Y+12, r25	; 0x0c
    1598:	ad 87       	std	Y+13, r26	; 0x0d
    159a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159c:	6b 85       	ldd	r22, Y+11	; 0x0b
    159e:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a ef       	ldi	r20, 0xFA	; 250
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	8f 83       	std	Y+7, r24	; 0x07
    15b6:	98 87       	std	Y+8, r25	; 0x08
    15b8:	a9 87       	std	Y+9, r26	; 0x09
    15ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15bc:	6f 81       	ldd	r22, Y+7	; 0x07
    15be:	78 85       	ldd	r23, Y+8	; 0x08
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f e3       	ldi	r21, 0x3F	; 63
    15cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d0:	88 23       	and	r24, r24
    15d2:	2c f4       	brge	.+10     	; 0x15de <Lcd_vidSendCommand+0x112>
		__ticks = 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	3f c0       	rjmp	.+126    	; 0x165c <Lcd_vidSendCommand+0x190>
	else if (__tmp > 65535)
    15de:	6f 81       	ldd	r22, Y+7	; 0x07
    15e0:	78 85       	ldd	r23, Y+8	; 0x08
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	3f ef       	ldi	r19, 0xFF	; 255
    15ea:	4f e7       	ldi	r20, 0x7F	; 127
    15ec:	57 e4       	ldi	r21, 0x47	; 71
    15ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	4c f5       	brge	.+82     	; 0x1648 <Lcd_vidSendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e2       	ldi	r20, 0x20	; 32
    1604:	51 e4       	ldi	r21, 0x41	; 65
    1606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	0f c0       	rjmp	.+30     	; 0x163e <Lcd_vidSendCommand+0x172>
    1620:	88 ec       	ldi	r24, 0xC8	; 200
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <Lcd_vidSendCommand+0x160>
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	9e 81       	ldd	r25, Y+6	; 0x06
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	69 f7       	brne	.-38     	; 0x1620 <Lcd_vidSendCommand+0x154>
    1646:	14 c0       	rjmp	.+40     	; 0x1670 <Lcd_vidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1648:	6f 81       	ldd	r22, Y+7	; 0x07
    164a:	78 85       	ldd	r23, Y+8	; 0x08
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <Lcd_vidSendCommand+0x19c>
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW); //EN
    1670:	8a e0       	ldi	r24, 0x0A	; 10
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
}
    1678:	2f 96       	adiw	r28, 0x0f	; 15
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <Lcd_vidWriteChar>:

void Lcd_vidWriteChar(u8 Char){
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	2f 97       	sbiw	r28, 0x0f	; 15
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	8f 87       	std	Y+15, r24	; 0x0f
	Dio_vidSetPinVal(LCD_u8RS_PIN,DIO_u8HIGH);  //RS Pin set
    16a0:	88 e0       	ldi	r24, 0x08	; 8
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN,DIO_u8LOW);  //RW Pin cleared because we always wanna write
    16a8:	89 e0       	ldi	r24, 0x09	; 9
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Char,0));
    16b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b2:	98 2f       	mov	r25, r24
    16b4:	91 70       	andi	r25, 0x01	; 1
    16b6:	80 e1       	ldi	r24, 0x10	; 16
    16b8:	69 2f       	mov	r22, r25
    16ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Char,1));
    16be:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c0:	86 95       	lsr	r24
    16c2:	98 2f       	mov	r25, r24
    16c4:	91 70       	andi	r25, 0x01	; 1
    16c6:	81 e1       	ldi	r24, 0x11	; 17
    16c8:	69 2f       	mov	r22, r25
    16ca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Char,2));
    16ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d0:	86 95       	lsr	r24
    16d2:	86 95       	lsr	r24
    16d4:	98 2f       	mov	r25, r24
    16d6:	91 70       	andi	r25, 0x01	; 1
    16d8:	82 e1       	ldi	r24, 0x12	; 18
    16da:	69 2f       	mov	r22, r25
    16dc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Char,3));
    16e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e2:	86 95       	lsr	r24
    16e4:	86 95       	lsr	r24
    16e6:	86 95       	lsr	r24
    16e8:	98 2f       	mov	r25, r24
    16ea:	91 70       	andi	r25, 0x01	; 1
    16ec:	83 e1       	ldi	r24, 0x13	; 19
    16ee:	69 2f       	mov	r22, r25
    16f0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Char,4));
    16f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f6:	82 95       	swap	r24
    16f8:	8f 70       	andi	r24, 0x0F	; 15
    16fa:	98 2f       	mov	r25, r24
    16fc:	91 70       	andi	r25, 0x01	; 1
    16fe:	84 e1       	ldi	r24, 0x14	; 20
    1700:	69 2f       	mov	r22, r25
    1702:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Char,5));
    1706:	8f 85       	ldd	r24, Y+15	; 0x0f
    1708:	82 95       	swap	r24
    170a:	86 95       	lsr	r24
    170c:	87 70       	andi	r24, 0x07	; 7
    170e:	98 2f       	mov	r25, r24
    1710:	91 70       	andi	r25, 0x01	; 1
    1712:	85 e1       	ldi	r24, 0x15	; 21
    1714:	69 2f       	mov	r22, r25
    1716:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Char,6));
    171a:	8f 85       	ldd	r24, Y+15	; 0x0f
    171c:	82 95       	swap	r24
    171e:	86 95       	lsr	r24
    1720:	86 95       	lsr	r24
    1722:	83 70       	andi	r24, 0x03	; 3
    1724:	98 2f       	mov	r25, r24
    1726:	91 70       	andi	r25, 0x01	; 1
    1728:	86 e1       	ldi	r24, 0x16	; 22
    172a:	69 2f       	mov	r22, r25
    172c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Char,7));
    1730:	8f 85       	ldd	r24, Y+15	; 0x0f
    1732:	98 2f       	mov	r25, r24
    1734:	99 1f       	adc	r25, r25
    1736:	99 27       	eor	r25, r25
    1738:	99 1f       	adc	r25, r25
    173a:	87 e1       	ldi	r24, 0x17	; 23
    173c:	69 2f       	mov	r22, r25
    173e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH);   //EN
    1742:	8a e0       	ldi	r24, 0x0A	; 10
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e4       	ldi	r27, 0x40	; 64
    1752:	8b 87       	std	Y+11, r24	; 0x0b
    1754:	9c 87       	std	Y+12, r25	; 0x0c
    1756:	ad 87       	std	Y+13, r26	; 0x0d
    1758:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175a:	6b 85       	ldd	r22, Y+11	; 0x0b
    175c:	7c 85       	ldd	r23, Y+12	; 0x0c
    175e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1760:	9e 85       	ldd	r25, Y+14	; 0x0e
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	4a ef       	ldi	r20, 0xFA	; 250
    1768:	54 e4       	ldi	r21, 0x44	; 68
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	8f 83       	std	Y+7, r24	; 0x07
    1774:	98 87       	std	Y+8, r25	; 0x08
    1776:	a9 87       	std	Y+9, r26	; 0x09
    1778:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    177a:	6f 81       	ldd	r22, Y+7	; 0x07
    177c:	78 85       	ldd	r23, Y+8	; 0x08
    177e:	89 85       	ldd	r24, Y+9	; 0x09
    1780:	9a 85       	ldd	r25, Y+10	; 0x0a
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e8       	ldi	r20, 0x80	; 128
    1788:	5f e3       	ldi	r21, 0x3F	; 63
    178a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178e:	88 23       	and	r24, r24
    1790:	2c f4       	brge	.+10     	; 0x179c <Lcd_vidWriteChar+0x112>
		__ticks = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	3f c0       	rjmp	.+126    	; 0x181a <Lcd_vidWriteChar+0x190>
	else if (__tmp > 65535)
    179c:	6f 81       	ldd	r22, Y+7	; 0x07
    179e:	78 85       	ldd	r23, Y+8	; 0x08
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	3f ef       	ldi	r19, 0xFF	; 255
    17a8:	4f e7       	ldi	r20, 0x7F	; 127
    17aa:	57 e4       	ldi	r21, 0x47	; 71
    17ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	4c f5       	brge	.+82     	; 0x1806 <Lcd_vidWriteChar+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e2       	ldi	r20, 0x20	; 32
    17c2:	51 e4       	ldi	r21, 0x41	; 65
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <Lcd_vidWriteChar+0x172>
    17de:	88 ec       	ldi	r24, 0xC8	; 200
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9c 83       	std	Y+4, r25	; 0x04
    17e4:	8b 83       	std	Y+3, r24	; 0x03
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <Lcd_vidWriteChar+0x160>
    17ee:	9c 83       	std	Y+4, r25	; 0x04
    17f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	9e 81       	ldd	r25, Y+6	; 0x06
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	69 f7       	brne	.-38     	; 0x17de <Lcd_vidWriteChar+0x154>
    1804:	14 c0       	rjmp	.+40     	; 0x182e <Lcd_vidWriteChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <Lcd_vidWriteChar+0x19c>
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW);   //EN
    182e:	8a e0       	ldi	r24, 0x0A	; 10
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
}
    1836:	2f 96       	adiw	r28, 0x0f	; 15
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <Lcd_vidInit>:

void Lcd_vidInit(void){
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	aa 97       	sbiw	r28, 0x2a	; 42
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61

	Dio_vidSetPinDir(LCD_u8RS_PIN,DIO_u8OUTPUT);
    185c:	88 e0       	ldi	r24, 0x08	; 8
    185e:	61 e0       	ldi	r22, 0x01	; 1
    1860:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8RW_PIN,DIO_u8OUTPUT);
    1864:	89 e0       	ldi	r24, 0x09	; 9
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8EN_PIN,DIO_u8OUTPUT);
    186c:	8a e0       	ldi	r24, 0x0A	; 10
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	Dio_vidSetPinDir(LCD_u8D0_PIN,DIO_u8OUTPUT);
    1874:	80 e1       	ldi	r24, 0x10	; 16
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D1_PIN,DIO_u8OUTPUT);
    187c:	81 e1       	ldi	r24, 0x11	; 17
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D2_PIN,DIO_u8OUTPUT);
    1884:	82 e1       	ldi	r24, 0x12	; 18
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D3_PIN,DIO_u8OUTPUT);
    188c:	83 e1       	ldi	r24, 0x13	; 19
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D4_PIN,DIO_u8OUTPUT);
    1894:	84 e1       	ldi	r24, 0x14	; 20
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D5_PIN,DIO_u8OUTPUT);
    189c:	85 e1       	ldi	r24, 0x15	; 21
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D6_PIN,DIO_u8OUTPUT);
    18a4:	86 e1       	ldi	r24, 0x16	; 22
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D7_PIN,DIO_u8OUTPUT);
    18ac:	87 e1       	ldi	r24, 0x17	; 23
    18ae:	61 e0       	ldi	r22, 0x01	; 1
    18b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>




	Lcd_vidSendCommand(LCD_u8_CMD_8_BIT_2x16_5x7); 	 //Function Set 8bit 2 line 5x7
    18b4:	88 e3       	ldi	r24, 0x38	; 56
    18b6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e0       	ldi	r26, 0x00	; 0
    18c0:	b0 e4       	ldi	r27, 0x40	; 64
    18c2:	8f a3       	std	Y+39, r24	; 0x27
    18c4:	98 a7       	std	Y+40, r25	; 0x28
    18c6:	a9 a7       	std	Y+41, r26	; 0x29
    18c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ca:	6f a1       	ldd	r22, Y+39	; 0x27
    18cc:	78 a5       	ldd	r23, Y+40	; 0x28
    18ce:	89 a5       	ldd	r24, Y+41	; 0x29
    18d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	4a ef       	ldi	r20, 0xFA	; 250
    18d8:	54 e4       	ldi	r21, 0x44	; 68
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	8b a3       	std	Y+35, r24	; 0x23
    18e4:	9c a3       	std	Y+36, r25	; 0x24
    18e6:	ad a3       	std	Y+37, r26	; 0x25
    18e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ea:	6b a1       	ldd	r22, Y+35	; 0x23
    18ec:	7c a1       	ldd	r23, Y+36	; 0x24
    18ee:	8d a1       	ldd	r24, Y+37	; 0x25
    18f0:	9e a1       	ldd	r25, Y+38	; 0x26
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	2c f4       	brge	.+10     	; 0x190c <Lcd_vidInit+0xc4>
		__ticks = 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	9a a3       	std	Y+34, r25	; 0x22
    1908:	89 a3       	std	Y+33, r24	; 0x21
    190a:	3f c0       	rjmp	.+126    	; 0x198a <Lcd_vidInit+0x142>
	else if (__tmp > 65535)
    190c:	6b a1       	ldd	r22, Y+35	; 0x23
    190e:	7c a1       	ldd	r23, Y+36	; 0x24
    1910:	8d a1       	ldd	r24, Y+37	; 0x25
    1912:	9e a1       	ldd	r25, Y+38	; 0x26
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	3f ef       	ldi	r19, 0xFF	; 255
    1918:	4f e7       	ldi	r20, 0x7F	; 127
    191a:	57 e4       	ldi	r21, 0x47	; 71
    191c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1920:	18 16       	cp	r1, r24
    1922:	4c f5       	brge	.+82     	; 0x1976 <Lcd_vidInit+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1924:	6f a1       	ldd	r22, Y+39	; 0x27
    1926:	78 a5       	ldd	r23, Y+40	; 0x28
    1928:	89 a5       	ldd	r24, Y+41	; 0x29
    192a:	9a a5       	ldd	r25, Y+42	; 0x2a
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e2       	ldi	r20, 0x20	; 32
    1932:	51 e4       	ldi	r21, 0x41	; 65
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	9a a3       	std	Y+34, r25	; 0x22
    194a:	89 a3       	std	Y+33, r24	; 0x21
    194c:	0f c0       	rjmp	.+30     	; 0x196c <Lcd_vidInit+0x124>
    194e:	88 ec       	ldi	r24, 0xC8	; 200
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	98 a3       	std	Y+32, r25	; 0x20
    1954:	8f 8f       	std	Y+31, r24	; 0x1f
    1956:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1958:	98 a1       	ldd	r25, Y+32	; 0x20
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <Lcd_vidInit+0x112>
    195e:	98 a3       	std	Y+32, r25	; 0x20
    1960:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1962:	89 a1       	ldd	r24, Y+33	; 0x21
    1964:	9a a1       	ldd	r25, Y+34	; 0x22
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	9a a3       	std	Y+34, r25	; 0x22
    196a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196c:	89 a1       	ldd	r24, Y+33	; 0x21
    196e:	9a a1       	ldd	r25, Y+34	; 0x22
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	69 f7       	brne	.-38     	; 0x194e <Lcd_vidInit+0x106>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <Lcd_vidInit+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1976:	6b a1       	ldd	r22, Y+35	; 0x23
    1978:	7c a1       	ldd	r23, Y+36	; 0x24
    197a:	8d a1       	ldd	r24, Y+37	; 0x25
    197c:	9e a1       	ldd	r25, Y+38	; 0x26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9a a3       	std	Y+34, r25	; 0x22
    1988:	89 a3       	std	Y+33, r24	; 0x21
    198a:	89 a1       	ldd	r24, Y+33	; 0x21
    198c:	9a a1       	ldd	r25, Y+34	; 0x22
    198e:	9e 8f       	std	Y+30, r25	; 0x1e
    1990:	8d 8f       	std	Y+29, r24	; 0x1d
    1992:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1994:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <Lcd_vidInit+0x14e>
    199a:	9e 8f       	std	Y+30, r25	; 0x1e
    199c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8_CMD_DISP_ON_CURS_OFF); 	//Display ON Cursor OFF
    199e:	8c e0       	ldi	r24, 0x0C	; 12
    19a0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a0 e0       	ldi	r26, 0x00	; 0
    19aa:	b0 e4       	ldi	r27, 0x40	; 64
    19ac:	89 8f       	std	Y+25, r24	; 0x19
    19ae:	9a 8f       	std	Y+26, r25	; 0x1a
    19b0:	ab 8f       	std	Y+27, r26	; 0x1b
    19b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b4:	69 8d       	ldd	r22, Y+25	; 0x19
    19b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	4a ef       	ldi	r20, 0xFA	; 250
    19c2:	54 e4       	ldi	r21, 0x44	; 68
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	8d 8b       	std	Y+21, r24	; 0x15
    19ce:	9e 8b       	std	Y+22, r25	; 0x16
    19d0:	af 8b       	std	Y+23, r26	; 0x17
    19d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d4:	6d 89       	ldd	r22, Y+21	; 0x15
    19d6:	7e 89       	ldd	r23, Y+22	; 0x16
    19d8:	8f 89       	ldd	r24, Y+23	; 0x17
    19da:	98 8d       	ldd	r25, Y+24	; 0x18
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e8       	ldi	r20, 0x80	; 128
    19e2:	5f e3       	ldi	r21, 0x3F	; 63
    19e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e8:	88 23       	and	r24, r24
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <Lcd_vidInit+0x1ae>
		__ticks = 1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9c 8b       	std	Y+20, r25	; 0x14
    19f2:	8b 8b       	std	Y+19, r24	; 0x13
    19f4:	3f c0       	rjmp	.+126    	; 0x1a74 <Lcd_vidInit+0x22c>
	else if (__tmp > 65535)
    19f6:	6d 89       	ldd	r22, Y+21	; 0x15
    19f8:	7e 89       	ldd	r23, Y+22	; 0x16
    19fa:	8f 89       	ldd	r24, Y+23	; 0x17
    19fc:	98 8d       	ldd	r25, Y+24	; 0x18
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	3f ef       	ldi	r19, 0xFF	; 255
    1a02:	4f e7       	ldi	r20, 0x7F	; 127
    1a04:	57 e4       	ldi	r21, 0x47	; 71
    1a06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a0a:	18 16       	cp	r1, r24
    1a0c:	4c f5       	brge	.+82     	; 0x1a60 <Lcd_vidInit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e2       	ldi	r20, 0x20	; 32
    1a1c:	51 e4       	ldi	r21, 0x41	; 65
    1a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	bc 01       	movw	r22, r24
    1a28:	cd 01       	movw	r24, r26
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9c 8b       	std	Y+20, r25	; 0x14
    1a34:	8b 8b       	std	Y+19, r24	; 0x13
    1a36:	0f c0       	rjmp	.+30     	; 0x1a56 <Lcd_vidInit+0x20e>
    1a38:	88 ec       	ldi	r24, 0xC8	; 200
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9a 8b       	std	Y+18, r25	; 0x12
    1a3e:	89 8b       	std	Y+17, r24	; 0x11
    1a40:	89 89       	ldd	r24, Y+17	; 0x11
    1a42:	9a 89       	ldd	r25, Y+18	; 0x12
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <Lcd_vidInit+0x1fc>
    1a48:	9a 8b       	std	Y+18, r25	; 0x12
    1a4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	9c 8b       	std	Y+20, r25	; 0x14
    1a54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a56:	8b 89       	ldd	r24, Y+19	; 0x13
    1a58:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	69 f7       	brne	.-38     	; 0x1a38 <Lcd_vidInit+0x1f0>
    1a5e:	14 c0       	rjmp	.+40     	; 0x1a88 <Lcd_vidInit+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a60:	6d 89       	ldd	r22, Y+21	; 0x15
    1a62:	7e 89       	ldd	r23, Y+22	; 0x16
    1a64:	8f 89       	ldd	r24, Y+23	; 0x17
    1a66:	98 8d       	ldd	r25, Y+24	; 0x18
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9c 8b       	std	Y+20, r25	; 0x14
    1a72:	8b 8b       	std	Y+19, r24	; 0x13
    1a74:	8b 89       	ldd	r24, Y+19	; 0x13
    1a76:	9c 89       	ldd	r25, Y+20	; 0x14
    1a78:	98 8b       	std	Y+16, r25	; 0x10
    1a7a:	8f 87       	std	Y+15, r24	; 0x0f
    1a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7e:	98 89       	ldd	r25, Y+16	; 0x10
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <Lcd_vidInit+0x238>
    1a84:	98 8b       	std	Y+16, r25	; 0x10
    1a86:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8_CMD_CLR_DISPLAY);	//Clear Display
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 e0       	ldi	r26, 0x00	; 0
    1a94:	b0 e4       	ldi	r27, 0x40	; 64
    1a96:	8b 87       	std	Y+11, r24	; 0x0b
    1a98:	9c 87       	std	Y+12, r25	; 0x0c
    1a9a:	ad 87       	std	Y+13, r26	; 0x0d
    1a9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a ef       	ldi	r20, 0xFA	; 250
    1aac:	54 e4       	ldi	r21, 0x44	; 68
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8f 83       	std	Y+7, r24	; 0x07
    1ab8:	98 87       	std	Y+8, r25	; 0x08
    1aba:	a9 87       	std	Y+9, r26	; 0x09
    1abc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <Lcd_vidInit+0x298>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <Lcd_vidInit+0x316>
	else if (__tmp > 65535)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <Lcd_vidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <Lcd_vidInit+0x2f8>
    1b22:	88 ec       	ldi	r24, 0xC8	; 200
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <Lcd_vidInit+0x2e6>
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <Lcd_vidInit+0x2da>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <Lcd_vidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <Lcd_vidInit+0x322>
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1b72:	aa 96       	adiw	r28, 0x2a	; 42
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <Lcd_MoveCursor>:

void Lcd_MoveCursor(u8 Pos){
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <Lcd_MoveCursor+0x6>
    1b8a:	0f 92       	push	r0
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0; i<Pos; i++){
    1b92:	1a 82       	std	Y+2, r1	; 0x02
    1b94:	19 82       	std	Y+1, r1	; 0x01
    1b96:	08 c0       	rjmp	.+16     	; 0x1ba8 <Lcd_MoveCursor+0x24>
		Lcd_vidSendCommand(16);
    1b98:	80 e1       	ldi	r24, 0x10	; 16
    1b9a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
	Lcd_vidSendCommand(LCD_u8_CMD_CLR_DISPLAY);	//Clear Display
	_delay_ms(2);
}

void Lcd_MoveCursor(u8 Pos){
	for(int i=0; i<Pos; i++){
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	82 17       	cp	r24, r18
    1bb4:	93 07       	cpc	r25, r19
    1bb6:	84 f3       	brlt	.-32     	; 0x1b98 <Lcd_MoveCursor+0x14>
		Lcd_vidSendCommand(16);
	}
}
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <main>:
#define F_CPU 8000000
#include<util/delay.h>
//u8 arr[10]={0b1000000,0b1111001,0b0100100,0b0110000,0b0011001,0b0010010,0b0000010,0b1011000,0b0000000,0b0010000};

u8 key,key1,key2,operand1,operand2,operator,result;
int main(void){
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	c6 56       	subi	r28, 0x66	; 102
    1bd2:	d0 40       	sbci	r29, 0x00	; 0
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
	operator=0x81;
    1bde:	81 e8       	ldi	r24, 0x81	; 129
    1be0:	80 93 6e 00 	sts	0x006E, r24
	Lcd_vidInit();
    1be4:	0e 94 24 0c 	call	0x1848	; 0x1848 <Lcd_vidInit>
	Keypad_vidInit();
    1be8:	0e 94 fa 07 	call	0xff4	; 0xff4 <Keypad_vidInit>
	while(1){
	key=Keypad_u8GetKey();
    1bec:	0e 94 41 08 	call	0x1082	; 0x1082 <Keypad_u8GetKey>
    1bf0:	80 93 6a 00 	sts	0x006A, r24
	if(key!=0xFF){
    1bf4:	80 91 6a 00 	lds	r24, 0x006A
    1bf8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <main+0x3a>
    1bfc:	9b c1       	rjmp	.+822    	; 0x1f34 <main+0x370>
	switch(key){
    1bfe:	80 91 6a 00 	lds	r24, 0x006A
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	a7 96       	adiw	r28, 0x27	; 39
    1c08:	3f af       	std	Y+63, r19	; 0x3f
    1c0a:	2e af       	std	Y+62, r18	; 0x3e
    1c0c:	a7 97       	sbiw	r28, 0x27	; 39
    1c0e:	a7 96       	adiw	r28, 0x27	; 39
    1c10:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c12:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c14:	a7 97       	sbiw	r28, 0x27	; 39
    1c16:	84 30       	cpi	r24, 0x04	; 4
    1c18:	91 05       	cpc	r25, r1
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <main+0x5a>
    1c1c:	8f c0       	rjmp	.+286    	; 0x1d3c <main+0x178>
    1c1e:	a7 96       	adiw	r28, 0x27	; 39
    1c20:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c22:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c24:	a7 97       	sbiw	r28, 0x27	; 39
    1c26:	e5 30       	cpi	r30, 0x05	; 5
    1c28:	f1 05       	cpc	r31, r1
    1c2a:	44 f5       	brge	.+80     	; 0x1c7c <main+0xb8>
    1c2c:	a7 96       	adiw	r28, 0x27	; 39
    1c2e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c30:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c32:	a7 97       	sbiw	r28, 0x27	; 39
    1c34:	21 30       	cpi	r18, 0x01	; 1
    1c36:	31 05       	cpc	r19, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <main+0x78>
    1c3a:	5c c0       	rjmp	.+184    	; 0x1cf4 <main+0x130>
    1c3c:	a7 96       	adiw	r28, 0x27	; 39
    1c3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c40:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c42:	a7 97       	sbiw	r28, 0x27	; 39
    1c44:	82 30       	cpi	r24, 0x02	; 2
    1c46:	91 05       	cpc	r25, r1
    1c48:	44 f4       	brge	.+16     	; 0x1c5a <main+0x96>
    1c4a:	a7 96       	adiw	r28, 0x27	; 39
    1c4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c50:	a7 97       	sbiw	r28, 0x27	; 39
    1c52:	30 97       	sbiw	r30, 0x00	; 0
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <main+0x94>
    1c56:	43 c0       	rjmp	.+134    	; 0x1cde <main+0x11a>
    1c58:	b8 c0       	rjmp	.+368    	; 0x1dca <main+0x206>
    1c5a:	a7 96       	adiw	r28, 0x27	; 39
    1c5c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c5e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c60:	a7 97       	sbiw	r28, 0x27	; 39
    1c62:	22 30       	cpi	r18, 0x02	; 2
    1c64:	31 05       	cpc	r19, r1
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <main+0xa6>
    1c68:	51 c0       	rjmp	.+162    	; 0x1d0c <main+0x148>
    1c6a:	a7 96       	adiw	r28, 0x27	; 39
    1c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c70:	a7 97       	sbiw	r28, 0x27	; 39
    1c72:	83 30       	cpi	r24, 0x03	; 3
    1c74:	91 05       	cpc	r25, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <main+0xb6>
    1c78:	55 c0       	rjmp	.+170    	; 0x1d24 <main+0x160>
    1c7a:	a7 c0       	rjmp	.+334    	; 0x1dca <main+0x206>
    1c7c:	a7 96       	adiw	r28, 0x27	; 39
    1c7e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c80:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c82:	a7 97       	sbiw	r28, 0x27	; 39
    1c84:	e7 30       	cpi	r30, 0x07	; 7
    1c86:	f1 05       	cpc	r31, r1
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <main+0xc8>
    1c8a:	7c c0       	rjmp	.+248    	; 0x1d84 <main+0x1c0>
    1c8c:	a7 96       	adiw	r28, 0x27	; 39
    1c8e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c90:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c92:	a7 97       	sbiw	r28, 0x27	; 39
    1c94:	28 30       	cpi	r18, 0x08	; 8
    1c96:	31 05       	cpc	r19, r1
    1c98:	8c f4       	brge	.+34     	; 0x1cbc <main+0xf8>
    1c9a:	a7 96       	adiw	r28, 0x27	; 39
    1c9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ca0:	a7 97       	sbiw	r28, 0x27	; 39
    1ca2:	85 30       	cpi	r24, 0x05	; 5
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <main+0xe6>
    1ca8:	55 c0       	rjmp	.+170    	; 0x1d54 <main+0x190>
    1caa:	a7 96       	adiw	r28, 0x27	; 39
    1cac:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cae:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cb0:	a7 97       	sbiw	r28, 0x27	; 39
    1cb2:	e6 30       	cpi	r30, 0x06	; 6
    1cb4:	f1 05       	cpc	r31, r1
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <main+0xf6>
    1cb8:	59 c0       	rjmp	.+178    	; 0x1d6c <main+0x1a8>
    1cba:	87 c0       	rjmp	.+270    	; 0x1dca <main+0x206>
    1cbc:	a7 96       	adiw	r28, 0x27	; 39
    1cbe:	2e ad       	ldd	r18, Y+62	; 0x3e
    1cc0:	3f ad       	ldd	r19, Y+63	; 0x3f
    1cc2:	a7 97       	sbiw	r28, 0x27	; 39
    1cc4:	28 30       	cpi	r18, 0x08	; 8
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <main+0x108>
    1cca:	68 c0       	rjmp	.+208    	; 0x1d9c <main+0x1d8>
    1ccc:	a7 96       	adiw	r28, 0x27	; 39
    1cce:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cd2:	a7 97       	sbiw	r28, 0x27	; 39
    1cd4:	89 30       	cpi	r24, 0x09	; 9
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <main+0x118>
    1cda:	6c c0       	rjmp	.+216    	; 0x1db4 <main+0x1f0>
    1cdc:	76 c0       	rjmp	.+236    	; 0x1dca <main+0x206>
	case 0:
		Lcd_vidSendCommand(0x80);
    1cde:	80 e8       	ldi	r24, 0x80	; 128
    1ce0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('0');
    1ce4:	80 e3       	ldi	r24, 0x30	; 48
    1ce6:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand1=0;
    1cea:	10 92 6b 00 	sts	0x006B, r1
		key=0;
    1cee:	10 92 6a 00 	sts	0x006A, r1
    1cf2:	6b c0       	rjmp	.+214    	; 0x1dca <main+0x206>
		break;
	case 1:
		Lcd_vidSendCommand(0x80);
    1cf4:	80 e8       	ldi	r24, 0x80	; 128
    1cf6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('1');
    1cfa:	81 e3       	ldi	r24, 0x31	; 49
    1cfc:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand1=1;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    1d06:	10 92 6a 00 	sts	0x006A, r1
    1d0a:	5f c0       	rjmp	.+190    	; 0x1dca <main+0x206>
		break;
	case 2:
		Lcd_vidSendCommand(0x80);
    1d0c:	80 e8       	ldi	r24, 0x80	; 128
    1d0e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('2');
    1d12:	82 e3       	ldi	r24, 0x32	; 50
    1d14:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand1=2;
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    1d1e:	10 92 6a 00 	sts	0x006A, r1
    1d22:	53 c0       	rjmp	.+166    	; 0x1dca <main+0x206>
		break;
	case 3:
		Lcd_vidSendCommand(0x80);
    1d24:	80 e8       	ldi	r24, 0x80	; 128
    1d26:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('3');
    1d2a:	83 e3       	ldi	r24, 0x33	; 51
    1d2c:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand1=3;
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    1d36:	10 92 6a 00 	sts	0x006A, r1
    1d3a:	47 c0       	rjmp	.+142    	; 0x1dca <main+0x206>
		break;
	case 4:
		Lcd_vidSendCommand(0x80);
    1d3c:	80 e8       	ldi	r24, 0x80	; 128
    1d3e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('4');
    1d42:	84 e3       	ldi	r24, 0x34	; 52
    1d44:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand1=4;
    1d48:	84 e0       	ldi	r24, 0x04	; 4
    1d4a:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    1d4e:	10 92 6a 00 	sts	0x006A, r1
    1d52:	3b c0       	rjmp	.+118    	; 0x1dca <main+0x206>
		break;
	case 5:
		Lcd_vidSendCommand(0x80);
    1d54:	80 e8       	ldi	r24, 0x80	; 128
    1d56:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('5');
    1d5a:	85 e3       	ldi	r24, 0x35	; 53
    1d5c:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand1=5;
    1d60:	85 e0       	ldi	r24, 0x05	; 5
    1d62:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    1d66:	10 92 6a 00 	sts	0x006A, r1
    1d6a:	2f c0       	rjmp	.+94     	; 0x1dca <main+0x206>
		break;
	case 6:
		Lcd_vidSendCommand(0x80);
    1d6c:	80 e8       	ldi	r24, 0x80	; 128
    1d6e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('6');
    1d72:	86 e3       	ldi	r24, 0x36	; 54
    1d74:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand1=6;
    1d78:	86 e0       	ldi	r24, 0x06	; 6
    1d7a:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    1d7e:	10 92 6a 00 	sts	0x006A, r1
    1d82:	23 c0       	rjmp	.+70     	; 0x1dca <main+0x206>
		break;
	case 7:
		Lcd_vidSendCommand(0x80);
    1d84:	80 e8       	ldi	r24, 0x80	; 128
    1d86:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('7');
    1d8a:	87 e3       	ldi	r24, 0x37	; 55
    1d8c:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand1=7;
    1d90:	87 e0       	ldi	r24, 0x07	; 7
    1d92:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    1d96:	10 92 6a 00 	sts	0x006A, r1
    1d9a:	17 c0       	rjmp	.+46     	; 0x1dca <main+0x206>
		break;
	case 8:
		Lcd_vidSendCommand(0x80);
    1d9c:	80 e8       	ldi	r24, 0x80	; 128
    1d9e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('8');
    1da2:	88 e3       	ldi	r24, 0x38	; 56
    1da4:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand1=8;
    1da8:	88 e0       	ldi	r24, 0x08	; 8
    1daa:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    1dae:	10 92 6a 00 	sts	0x006A, r1
    1db2:	0b c0       	rjmp	.+22     	; 0x1dca <main+0x206>
		break;
	case 9:
		Lcd_vidSendCommand(0x80);
    1db4:	80 e8       	ldi	r24, 0x80	; 128
    1db6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('9');
    1dba:	89 e3       	ldi	r24, 0x39	; 57
    1dbc:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand1=9;
    1dc0:	89 e0       	ldi	r24, 0x09	; 9
    1dc2:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    1dc6:	10 92 6a 00 	sts	0x006A, r1
    1dca:	fe 01       	movw	r30, r28
    1dcc:	e1 5a       	subi	r30, 0xA1	; 161
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	aa ef       	ldi	r26, 0xFA	; 250
    1dd6:	b4 e4       	ldi	r27, 0x44	; 68
    1dd8:	80 83       	st	Z, r24
    1dda:	91 83       	std	Z+1, r25	; 0x01
    1ddc:	a2 83       	std	Z+2, r26	; 0x02
    1dde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	8e 01       	movw	r16, r28
    1de2:	05 5a       	subi	r16, 0xA5	; 165
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	fe 01       	movw	r30, r28
    1de8:	e1 5a       	subi	r30, 0xA1	; 161
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	4a ef       	ldi	r20, 0xFA	; 250
    1dfa:	54 e4       	ldi	r21, 0x44	; 68
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	f8 01       	movw	r30, r16
    1e06:	80 83       	st	Z, r24
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	a2 83       	std	Z+2, r26	; 0x02
    1e0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e5 5a       	subi	r30, 0xA5	; 165
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	60 81       	ld	r22, Z
    1e16:	71 81       	ldd	r23, Z+1	; 0x01
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e8       	ldi	r20, 0x80	; 128
    1e22:	5f e3       	ldi	r21, 0x3F	; 63
    1e24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e28:	88 23       	and	r24, r24
    1e2a:	44 f4       	brge	.+16     	; 0x1e3c <main+0x278>
		__ticks = 1;
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e7 5a       	subi	r30, 0xA7	; 167
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
    1e3a:	64 c0       	rjmp	.+200    	; 0x1f04 <main+0x340>
	else if (__tmp > 65535)
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e5 5a       	subi	r30, 0xA5	; 165
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	4f e7       	ldi	r20, 0x7F	; 127
    1e50:	57 e4       	ldi	r21, 0x47	; 71
    1e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	0c f0       	brlt	.+2      	; 0x1e5c <main+0x298>
    1e5a:	43 c0       	rjmp	.+134    	; 0x1ee2 <main+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e1 5a       	subi	r30, 0xA1	; 161
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	07 5a       	subi	r16, 0xA7	; 167
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	bc 01       	movw	r22, r24
    1e82:	cd 01       	movw	r24, r26
    1e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	91 83       	std	Z+1, r25	; 0x01
    1e90:	80 83       	st	Z, r24
    1e92:	1f c0       	rjmp	.+62     	; 0x1ed2 <main+0x30e>
    1e94:	fe 01       	movw	r30, r28
    1e96:	e9 5a       	subi	r30, 0xA9	; 169
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	88 ec       	ldi	r24, 0xC8	; 200
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e9 5a       	subi	r30, 0xA9	; 169
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <main+0x2e8>
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e9 5a       	subi	r30, 0xA9	; 169
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eba:	de 01       	movw	r26, r28
    1ebc:	a7 5a       	subi	r26, 0xA7	; 167
    1ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e7 5a       	subi	r30, 0xA7	; 167
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	11 96       	adiw	r26, 0x01	; 1
    1ece:	9c 93       	st	X, r25
    1ed0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e7 5a       	subi	r30, 0xA7	; 167
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 81       	ld	r24, Z
    1eda:	91 81       	ldd	r25, Z+1	; 0x01
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	d1 f6       	brne	.-76     	; 0x1e94 <main+0x2d0>
    1ee0:	31 c0       	rjmp	.+98     	; 0x1f44 <main+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee2:	8e 01       	movw	r16, r28
    1ee4:	07 5a       	subi	r16, 0xA7	; 167
    1ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e5 5a       	subi	r30, 0xA5	; 165
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	f8 01       	movw	r30, r16
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	80 83       	st	Z, r24
    1f04:	de 01       	movw	r26, r28
    1f06:	ab 5a       	subi	r26, 0xAB	; 171
    1f08:	bf 4f       	sbci	r27, 0xFF	; 255
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e7 5a       	subi	r30, 0xA7	; 167
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	9c 93       	st	X, r25
    1f18:	8e 93       	st	-X, r24
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	eb 5a       	subi	r30, 0xAB	; 171
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <main+0x360>
    1f28:	fe 01       	movw	r30, r28
    1f2a:	eb 5a       	subi	r30, 0xAB	; 171
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
    1f32:	08 c0       	rjmp	.+16     	; 0x1f44 <main+0x380>
		break;
	}
	_delay_ms(2000);
	}
	else if(key==0xFF){
    1f34:	80 91 6a 00 	lds	r24, 0x006A
    1f38:	8f 3f       	cpi	r24, 0xFF	; 255
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <main+0x380>
		PORTD=0xFF;
    1f3c:	e2 e3       	ldi	r30, 0x32	; 50
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	8f ef       	ldi	r24, 0xFF	; 255
    1f42:	80 83       	st	Z, r24
	}
	operator=Keypad_u8GetKey();
    1f44:	0e 94 41 08 	call	0x1082	; 0x1082 <Keypad_u8GetKey>
    1f48:	80 93 6e 00 	sts	0x006E, r24
	if(operator=='+'){
    1f4c:	80 91 6e 00 	lds	r24, 0x006E
    1f50:	8b 32       	cpi	r24, 0x2B	; 43
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <main+0x392>
    1f54:	c3 c0       	rjmp	.+390    	; 0x20dc <main+0x518>
		Lcd_vidSendCommand(0x81);
    1f56:	81 e8       	ldi	r24, 0x81	; 129
    1f58:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar(operator);
    1f5c:	80 91 6e 00 	lds	r24, 0x006E
    1f60:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		result=operand1+operand2;
    1f64:	90 91 6b 00 	lds	r25, 0x006B
    1f68:	80 91 68 00 	lds	r24, 0x0068
    1f6c:	89 0f       	add	r24, r25
    1f6e:	80 93 6c 00 	sts	0x006C, r24
    1f72:	fe 01       	movw	r30, r28
    1f74:	ef 5a       	subi	r30, 0xAF	; 175
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f7e:	b0 e4       	ldi	r27, 0x40	; 64
    1f80:	80 83       	st	Z, r24
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	a2 83       	std	Z+2, r26	; 0x02
    1f86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	8e 01       	movw	r16, r28
    1f8a:	03 5b       	subi	r16, 0xB3	; 179
    1f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ef 5a       	subi	r30, 0xAF	; 175
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	60 81       	ld	r22, Z
    1f96:	71 81       	ldd	r23, Z+1	; 0x01
    1f98:	82 81       	ldd	r24, Z+2	; 0x02
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4a ef       	ldi	r20, 0xFA	; 250
    1fa2:	54 e4       	ldi	r21, 0x44	; 68
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	f8 01       	movw	r30, r16
    1fae:	80 83       	st	Z, r24
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	a2 83       	std	Z+2, r26	; 0x02
    1fb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e3 5b       	subi	r30, 0xB3	; 179
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	44 f4       	brge	.+16     	; 0x1fe4 <main+0x420>
		__ticks = 1;
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e5 5b       	subi	r30, 0xB5	; 181
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24
    1fe2:	64 c0       	rjmp	.+200    	; 0x20ac <main+0x4e8>
	else if (__tmp > 65535)
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e3 5b       	subi	r30, 0xB3	; 179
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	3f ef       	ldi	r19, 0xFF	; 255
    1ff6:	4f e7       	ldi	r20, 0x7F	; 127
    1ff8:	57 e4       	ldi	r21, 0x47	; 71
    1ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffe:	18 16       	cp	r1, r24
    2000:	0c f0       	brlt	.+2      	; 0x2004 <main+0x440>
    2002:	43 c0       	rjmp	.+134    	; 0x208a <main+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2004:	fe 01       	movw	r30, r28
    2006:	ef 5a       	subi	r30, 0xAF	; 175
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	60 81       	ld	r22, Z
    200c:	71 81       	ldd	r23, Z+1	; 0x01
    200e:	82 81       	ldd	r24, Z+2	; 0x02
    2010:	93 81       	ldd	r25, Z+3	; 0x03
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	8e 01       	movw	r16, r28
    2024:	05 5b       	subi	r16, 0xB5	; 181
    2026:	1f 4f       	sbci	r17, 0xFF	; 255
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	f8 01       	movw	r30, r16
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24
    203a:	1f c0       	rjmp	.+62     	; 0x207a <main+0x4b6>
    203c:	fe 01       	movw	r30, r28
    203e:	e7 5b       	subi	r30, 0xB7	; 183
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
    204a:	fe 01       	movw	r30, r28
    204c:	e7 5b       	subi	r30, 0xB7	; 183
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <main+0x490>
    2058:	fe 01       	movw	r30, r28
    205a:	e7 5b       	subi	r30, 0xB7	; 183
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	de 01       	movw	r26, r28
    2064:	a5 5b       	subi	r26, 0xB5	; 181
    2066:	bf 4f       	sbci	r27, 0xFF	; 255
    2068:	fe 01       	movw	r30, r28
    206a:	e5 5b       	subi	r30, 0xB5	; 181
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	11 96       	adiw	r26, 0x01	; 1
    2076:	9c 93       	st	X, r25
    2078:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	fe 01       	movw	r30, r28
    207c:	e5 5b       	subi	r30, 0xB5	; 181
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	91 81       	ldd	r25, Z+1	; 0x01
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	d1 f6       	brne	.-76     	; 0x203c <main+0x478>
    2088:	d3 c1       	rjmp	.+934    	; 0x2430 <main+0x86c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	8e 01       	movw	r16, r28
    208c:	05 5b       	subi	r16, 0xB5	; 181
    208e:	1f 4f       	sbci	r17, 0xFF	; 255
    2090:	fe 01       	movw	r30, r28
    2092:	e3 5b       	subi	r30, 0xB3	; 179
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	60 81       	ld	r22, Z
    2098:	71 81       	ldd	r23, Z+1	; 0x01
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	93 81       	ldd	r25, Z+3	; 0x03
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	f8 01       	movw	r30, r16
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	80 83       	st	Z, r24
    20ac:	de 01       	movw	r26, r28
    20ae:	a9 5b       	subi	r26, 0xB9	; 185
    20b0:	bf 4f       	sbci	r27, 0xFF	; 255
    20b2:	fe 01       	movw	r30, r28
    20b4:	e5 5b       	subi	r30, 0xB5	; 181
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	11 96       	adiw	r26, 0x01	; 1
    20be:	9c 93       	st	X, r25
    20c0:	8e 93       	st	-X, r24
    20c2:	fe 01       	movw	r30, r28
    20c4:	e9 5b       	subi	r30, 0xB9	; 185
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <main+0x508>
    20d0:	fe 01       	movw	r30, r28
    20d2:	e9 5b       	subi	r30, 0xB9	; 185
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	91 83       	std	Z+1, r25	; 0x01
    20d8:	80 83       	st	Z, r24
    20da:	aa c1       	rjmp	.+852    	; 0x2430 <main+0x86c>
		_delay_ms(5);
	}
	else if(operator=='-'){
    20dc:	80 91 6e 00 	lds	r24, 0x006E
    20e0:	8d 32       	cpi	r24, 0x2D	; 45
    20e2:	09 f0       	breq	.+2      	; 0x20e6 <main+0x522>
    20e4:	96 c0       	rjmp	.+300    	; 0x2212 <main+0x64e>
		Lcd_vidSendCommand(0x81);
    20e6:	81 e8       	ldi	r24, 0x81	; 129
    20e8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar(operator);
    20ec:	80 91 6e 00 	lds	r24, 0x006E
    20f0:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		result=operand1-operand2;
    20f4:	90 91 6b 00 	lds	r25, 0x006B
    20f8:	80 91 68 00 	lds	r24, 0x0068
    20fc:	f9 2f       	mov	r31, r25
    20fe:	f8 1b       	sub	r31, r24
    2100:	8f 2f       	mov	r24, r31
    2102:	80 93 6c 00 	sts	0x006C, r24
    2106:	fe 01       	movw	r30, r28
    2108:	ed 5b       	subi	r30, 0xBD	; 189
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	a0 ea       	ldi	r26, 0xA0	; 160
    2112:	b0 e4       	ldi	r27, 0x40	; 64
    2114:	80 83       	st	Z, r24
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	a2 83       	std	Z+2, r26	; 0x02
    211a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211c:	8e 01       	movw	r16, r28
    211e:	01 5c       	subi	r16, 0xC1	; 193
    2120:	1f 4f       	sbci	r17, 0xFF	; 255
    2122:	fe 01       	movw	r30, r28
    2124:	ed 5b       	subi	r30, 0xBD	; 189
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a ef       	ldi	r20, 0xFA	; 250
    2136:	54 e4       	ldi	r21, 0x44	; 68
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	f8 01       	movw	r30, r16
    2142:	80 83       	st	Z, r24
    2144:	91 83       	std	Z+1, r25	; 0x01
    2146:	a2 83       	std	Z+2, r26	; 0x02
    2148:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    214a:	fe 01       	movw	r30, r28
    214c:	ff 96       	adiw	r30, 0x3f	; 63
    214e:	60 81       	ld	r22, Z
    2150:	71 81       	ldd	r23, Z+1	; 0x01
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	93 81       	ldd	r25, Z+3	; 0x03
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e8       	ldi	r20, 0x80	; 128
    215c:	5f e3       	ldi	r21, 0x3F	; 63
    215e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2162:	88 23       	and	r24, r24
    2164:	2c f4       	brge	.+10     	; 0x2170 <main+0x5ac>
		__ticks = 1;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9e af       	std	Y+62, r25	; 0x3e
    216c:	8d af       	std	Y+61, r24	; 0x3d
    216e:	46 c0       	rjmp	.+140    	; 0x21fc <main+0x638>
	else if (__tmp > 65535)
    2170:	fe 01       	movw	r30, r28
    2172:	ff 96       	adiw	r30, 0x3f	; 63
    2174:	60 81       	ld	r22, Z
    2176:	71 81       	ldd	r23, Z+1	; 0x01
    2178:	82 81       	ldd	r24, Z+2	; 0x02
    217a:	93 81       	ldd	r25, Z+3	; 0x03
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	64 f5       	brge	.+88     	; 0x21e4 <main+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	fe 01       	movw	r30, r28
    218e:	ed 5b       	subi	r30, 0xBD	; 189
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	60 81       	ld	r22, Z
    2194:	71 81       	ldd	r23, Z+1	; 0x01
    2196:	82 81       	ldd	r24, Z+2	; 0x02
    2198:	93 81       	ldd	r25, Z+3	; 0x03
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9e af       	std	Y+62, r25	; 0x3e
    21b8:	8d af       	std	Y+61, r24	; 0x3d
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <main+0x616>
    21bc:	88 ec       	ldi	r24, 0xC8	; 200
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9c af       	std	Y+60, r25	; 0x3c
    21c2:	8b af       	std	Y+59, r24	; 0x3b
    21c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    21c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <main+0x604>
    21cc:	9c af       	std	Y+60, r25	; 0x3c
    21ce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    21d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9e af       	std	Y+62, r25	; 0x3e
    21d8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	8d ad       	ldd	r24, Y+61	; 0x3d
    21dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <main+0x5f8>
    21e2:	26 c1       	rjmp	.+588    	; 0x2430 <main+0x86c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	fe 01       	movw	r30, r28
    21e6:	ff 96       	adiw	r30, 0x3f	; 63
    21e8:	60 81       	ld	r22, Z
    21ea:	71 81       	ldd	r23, Z+1	; 0x01
    21ec:	82 81       	ldd	r24, Z+2	; 0x02
    21ee:	93 81       	ldd	r25, Z+3	; 0x03
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9e af       	std	Y+62, r25	; 0x3e
    21fa:	8d af       	std	Y+61, r24	; 0x3d
    21fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    21fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2200:	9a af       	std	Y+58, r25	; 0x3a
    2202:	89 af       	std	Y+57, r24	; 0x39
    2204:	89 ad       	ldd	r24, Y+57	; 0x39
    2206:	9a ad       	ldd	r25, Y+58	; 0x3a
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <main+0x644>
    220c:	9a af       	std	Y+58, r25	; 0x3a
    220e:	89 af       	std	Y+57, r24	; 0x39
    2210:	0f c1       	rjmp	.+542    	; 0x2430 <main+0x86c>
		_delay_ms(5);
	}
	else if(operator=='*'){
    2212:	80 91 6e 00 	lds	r24, 0x006E
    2216:	8a 32       	cpi	r24, 0x2A	; 42
    2218:	09 f0       	breq	.+2      	; 0x221c <main+0x658>
    221a:	83 c0       	rjmp	.+262    	; 0x2322 <main+0x75e>
		Lcd_vidSendCommand(0x81);
    221c:	81 e8       	ldi	r24, 0x81	; 129
    221e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar(operator);
    2222:	80 91 6e 00 	lds	r24, 0x006E
    2226:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		result=operand1*operand2;
    222a:	90 91 6b 00 	lds	r25, 0x006B
    222e:	80 91 68 00 	lds	r24, 0x0068
    2232:	98 9f       	mul	r25, r24
    2234:	80 2d       	mov	r24, r0
    2236:	11 24       	eor	r1, r1
    2238:	80 93 6c 00 	sts	0x006C, r24
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a0 ea       	ldi	r26, 0xA0	; 160
    2242:	b0 e4       	ldi	r27, 0x40	; 64
    2244:	8d ab       	std	Y+53, r24	; 0x35
    2246:	9e ab       	std	Y+54, r25	; 0x36
    2248:	af ab       	std	Y+55, r26	; 0x37
    224a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224c:	6d a9       	ldd	r22, Y+53	; 0x35
    224e:	7e a9       	ldd	r23, Y+54	; 0x36
    2250:	8f a9       	ldd	r24, Y+55	; 0x37
    2252:	98 ad       	ldd	r25, Y+56	; 0x38
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	4a ef       	ldi	r20, 0xFA	; 250
    225a:	54 e4       	ldi	r21, 0x44	; 68
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	89 ab       	std	Y+49, r24	; 0x31
    2266:	9a ab       	std	Y+50, r25	; 0x32
    2268:	ab ab       	std	Y+51, r26	; 0x33
    226a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    226c:	69 a9       	ldd	r22, Y+49	; 0x31
    226e:	7a a9       	ldd	r23, Y+50	; 0x32
    2270:	8b a9       	ldd	r24, Y+51	; 0x33
    2272:	9c a9       	ldd	r25, Y+52	; 0x34
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e8       	ldi	r20, 0x80	; 128
    227a:	5f e3       	ldi	r21, 0x3F	; 63
    227c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2280:	88 23       	and	r24, r24
    2282:	2c f4       	brge	.+10     	; 0x228e <main+0x6ca>
		__ticks = 1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	98 ab       	std	Y+48, r25	; 0x30
    228a:	8f a7       	std	Y+47, r24	; 0x2f
    228c:	3f c0       	rjmp	.+126    	; 0x230c <main+0x748>
	else if (__tmp > 65535)
    228e:	69 a9       	ldd	r22, Y+49	; 0x31
    2290:	7a a9       	ldd	r23, Y+50	; 0x32
    2292:	8b a9       	ldd	r24, Y+51	; 0x33
    2294:	9c a9       	ldd	r25, Y+52	; 0x34
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	3f ef       	ldi	r19, 0xFF	; 255
    229a:	4f e7       	ldi	r20, 0x7F	; 127
    229c:	57 e4       	ldi	r21, 0x47	; 71
    229e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a2:	18 16       	cp	r1, r24
    22a4:	4c f5       	brge	.+82     	; 0x22f8 <main+0x734>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a6:	6d a9       	ldd	r22, Y+53	; 0x35
    22a8:	7e a9       	ldd	r23, Y+54	; 0x36
    22aa:	8f a9       	ldd	r24, Y+55	; 0x37
    22ac:	98 ad       	ldd	r25, Y+56	; 0x38
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	51 e4       	ldi	r21, 0x41	; 65
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	98 ab       	std	Y+48, r25	; 0x30
    22cc:	8f a7       	std	Y+47, r24	; 0x2f
    22ce:	0f c0       	rjmp	.+30     	; 0x22ee <main+0x72a>
    22d0:	88 ec       	ldi	r24, 0xC8	; 200
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9e a7       	std	Y+46, r25	; 0x2e
    22d6:	8d a7       	std	Y+45, r24	; 0x2d
    22d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22da:	9e a5       	ldd	r25, Y+46	; 0x2e
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <main+0x718>
    22e0:	9e a7       	std	Y+46, r25	; 0x2e
    22e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e6:	98 a9       	ldd	r25, Y+48	; 0x30
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	98 ab       	std	Y+48, r25	; 0x30
    22ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f0:	98 a9       	ldd	r25, Y+48	; 0x30
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	69 f7       	brne	.-38     	; 0x22d0 <main+0x70c>
    22f6:	9c c0       	rjmp	.+312    	; 0x2430 <main+0x86c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f8:	69 a9       	ldd	r22, Y+49	; 0x31
    22fa:	7a a9       	ldd	r23, Y+50	; 0x32
    22fc:	8b a9       	ldd	r24, Y+51	; 0x33
    22fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	98 ab       	std	Y+48, r25	; 0x30
    230a:	8f a7       	std	Y+47, r24	; 0x2f
    230c:	8f a5       	ldd	r24, Y+47	; 0x2f
    230e:	98 a9       	ldd	r25, Y+48	; 0x30
    2310:	9c a7       	std	Y+44, r25	; 0x2c
    2312:	8b a7       	std	Y+43, r24	; 0x2b
    2314:	8b a5       	ldd	r24, Y+43	; 0x2b
    2316:	9c a5       	ldd	r25, Y+44	; 0x2c
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <main+0x754>
    231c:	9c a7       	std	Y+44, r25	; 0x2c
    231e:	8b a7       	std	Y+43, r24	; 0x2b
    2320:	87 c0       	rjmp	.+270    	; 0x2430 <main+0x86c>
		_delay_ms(5);
	}
	else if(operator=='/'){
    2322:	80 91 6e 00 	lds	r24, 0x006E
    2326:	8f 32       	cpi	r24, 0x2F	; 47
    2328:	09 f0       	breq	.+2      	; 0x232c <main+0x768>
    232a:	82 c0       	rjmp	.+260    	; 0x2430 <main+0x86c>
		Lcd_vidSendCommand(0x81);
    232c:	81 e8       	ldi	r24, 0x81	; 129
    232e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar(operator);
    2332:	80 91 6e 00 	lds	r24, 0x006E
    2336:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		result=operand1/operand2;
    233a:	80 91 6b 00 	lds	r24, 0x006B
    233e:	90 91 68 00 	lds	r25, 0x0068
    2342:	69 2f       	mov	r22, r25
    2344:	0e 94 08 14 	call	0x2810	; 0x2810 <__udivmodqi4>
    2348:	80 93 6c 00 	sts	0x006C, r24
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 ea       	ldi	r26, 0xA0	; 160
    2352:	b0 e4       	ldi	r27, 0x40	; 64
    2354:	8f a3       	std	Y+39, r24	; 0x27
    2356:	98 a7       	std	Y+40, r25	; 0x28
    2358:	a9 a7       	std	Y+41, r26	; 0x29
    235a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	6f a1       	ldd	r22, Y+39	; 0x27
    235e:	78 a5       	ldd	r23, Y+40	; 0x28
    2360:	89 a5       	ldd	r24, Y+41	; 0x29
    2362:	9a a5       	ldd	r25, Y+42	; 0x2a
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4a ef       	ldi	r20, 0xFA	; 250
    236a:	54 e4       	ldi	r21, 0x44	; 68
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	8b a3       	std	Y+35, r24	; 0x23
    2376:	9c a3       	std	Y+36, r25	; 0x24
    2378:	ad a3       	std	Y+37, r26	; 0x25
    237a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    237c:	6b a1       	ldd	r22, Y+35	; 0x23
    237e:	7c a1       	ldd	r23, Y+36	; 0x24
    2380:	8d a1       	ldd	r24, Y+37	; 0x25
    2382:	9e a1       	ldd	r25, Y+38	; 0x26
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2390:	88 23       	and	r24, r24
    2392:	2c f4       	brge	.+10     	; 0x239e <main+0x7da>
		__ticks = 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9a a3       	std	Y+34, r25	; 0x22
    239a:	89 a3       	std	Y+33, r24	; 0x21
    239c:	3f c0       	rjmp	.+126    	; 0x241c <main+0x858>
	else if (__tmp > 65535)
    239e:	6b a1       	ldd	r22, Y+35	; 0x23
    23a0:	7c a1       	ldd	r23, Y+36	; 0x24
    23a2:	8d a1       	ldd	r24, Y+37	; 0x25
    23a4:	9e a1       	ldd	r25, Y+38	; 0x26
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	4c f5       	brge	.+82     	; 0x2408 <main+0x844>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b6:	6f a1       	ldd	r22, Y+39	; 0x27
    23b8:	78 a5       	ldd	r23, Y+40	; 0x28
    23ba:	89 a5       	ldd	r24, Y+41	; 0x29
    23bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9a a3       	std	Y+34, r25	; 0x22
    23dc:	89 a3       	std	Y+33, r24	; 0x21
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <main+0x83a>
    23e0:	88 ec       	ldi	r24, 0xC8	; 200
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	98 a3       	std	Y+32, r25	; 0x20
    23e6:	8f 8f       	std	Y+31, r24	; 0x1f
    23e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ea:	98 a1       	ldd	r25, Y+32	; 0x20
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <main+0x828>
    23f0:	98 a3       	std	Y+32, r25	; 0x20
    23f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f4:	89 a1       	ldd	r24, Y+33	; 0x21
    23f6:	9a a1       	ldd	r25, Y+34	; 0x22
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	9a a3       	std	Y+34, r25	; 0x22
    23fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2400:	9a a1       	ldd	r25, Y+34	; 0x22
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	69 f7       	brne	.-38     	; 0x23e0 <main+0x81c>
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <main+0x86c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2408:	6b a1       	ldd	r22, Y+35	; 0x23
    240a:	7c a1       	ldd	r23, Y+36	; 0x24
    240c:	8d a1       	ldd	r24, Y+37	; 0x25
    240e:	9e a1       	ldd	r25, Y+38	; 0x26
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9a a3       	std	Y+34, r25	; 0x22
    241a:	89 a3       	std	Y+33, r24	; 0x21
    241c:	89 a1       	ldd	r24, Y+33	; 0x21
    241e:	9a a1       	ldd	r25, Y+34	; 0x22
    2420:	9e 8f       	std	Y+30, r25	; 0x1e
    2422:	8d 8f       	std	Y+29, r24	; 0x1d
    2424:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2426:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <main+0x864>
    242c:	9e 8f       	std	Y+30, r25	; 0x1e
    242e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
	}
	key1=Keypad_u8GetKey();
    2430:	0e 94 41 08 	call	0x1082	; 0x1082 <Keypad_u8GetKey>
    2434:	80 93 69 00 	sts	0x0069, r24
	if(key1!=0xFF){
    2438:	80 91 69 00 	lds	r24, 0x0069
    243c:	8f 3f       	cpi	r24, 0xFF	; 255
    243e:	09 f4       	brne	.+2      	; 0x2442 <main+0x87e>
    2440:	e6 c0       	rjmp	.+460    	; 0x260e <main+0xa4a>
	switch(key1){
    2442:	80 91 69 00 	lds	r24, 0x0069
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	a5 96       	adiw	r28, 0x25	; 37
    244c:	3f af       	std	Y+63, r19	; 0x3f
    244e:	2e af       	std	Y+62, r18	; 0x3e
    2450:	a5 97       	sbiw	r28, 0x25	; 37
    2452:	a5 96       	adiw	r28, 0x25	; 37
    2454:	8e ad       	ldd	r24, Y+62	; 0x3e
    2456:	9f ad       	ldd	r25, Y+63	; 0x3f
    2458:	a5 97       	sbiw	r28, 0x25	; 37
    245a:	84 30       	cpi	r24, 0x04	; 4
    245c:	91 05       	cpc	r25, r1
    245e:	09 f4       	brne	.+2      	; 0x2462 <main+0x89e>
    2460:	8f c0       	rjmp	.+286    	; 0x2580 <main+0x9bc>
    2462:	a5 96       	adiw	r28, 0x25	; 37
    2464:	ee ad       	ldd	r30, Y+62	; 0x3e
    2466:	ff ad       	ldd	r31, Y+63	; 0x3f
    2468:	a5 97       	sbiw	r28, 0x25	; 37
    246a:	e5 30       	cpi	r30, 0x05	; 5
    246c:	f1 05       	cpc	r31, r1
    246e:	44 f5       	brge	.+80     	; 0x24c0 <main+0x8fc>
    2470:	a5 96       	adiw	r28, 0x25	; 37
    2472:	2e ad       	ldd	r18, Y+62	; 0x3e
    2474:	3f ad       	ldd	r19, Y+63	; 0x3f
    2476:	a5 97       	sbiw	r28, 0x25	; 37
    2478:	21 30       	cpi	r18, 0x01	; 1
    247a:	31 05       	cpc	r19, r1
    247c:	09 f4       	brne	.+2      	; 0x2480 <main+0x8bc>
    247e:	5c c0       	rjmp	.+184    	; 0x2538 <main+0x974>
    2480:	a5 96       	adiw	r28, 0x25	; 37
    2482:	8e ad       	ldd	r24, Y+62	; 0x3e
    2484:	9f ad       	ldd	r25, Y+63	; 0x3f
    2486:	a5 97       	sbiw	r28, 0x25	; 37
    2488:	82 30       	cpi	r24, 0x02	; 2
    248a:	91 05       	cpc	r25, r1
    248c:	44 f4       	brge	.+16     	; 0x249e <main+0x8da>
    248e:	a5 96       	adiw	r28, 0x25	; 37
    2490:	ee ad       	ldd	r30, Y+62	; 0x3e
    2492:	ff ad       	ldd	r31, Y+63	; 0x3f
    2494:	a5 97       	sbiw	r28, 0x25	; 37
    2496:	30 97       	sbiw	r30, 0x00	; 0
    2498:	09 f4       	brne	.+2      	; 0x249c <main+0x8d8>
    249a:	43 c0       	rjmp	.+134    	; 0x2522 <main+0x95e>
    249c:	b8 c0       	rjmp	.+368    	; 0x260e <main+0xa4a>
    249e:	a5 96       	adiw	r28, 0x25	; 37
    24a0:	2e ad       	ldd	r18, Y+62	; 0x3e
    24a2:	3f ad       	ldd	r19, Y+63	; 0x3f
    24a4:	a5 97       	sbiw	r28, 0x25	; 37
    24a6:	22 30       	cpi	r18, 0x02	; 2
    24a8:	31 05       	cpc	r19, r1
    24aa:	09 f4       	brne	.+2      	; 0x24ae <main+0x8ea>
    24ac:	51 c0       	rjmp	.+162    	; 0x2550 <main+0x98c>
    24ae:	a5 96       	adiw	r28, 0x25	; 37
    24b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    24b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    24b4:	a5 97       	sbiw	r28, 0x25	; 37
    24b6:	83 30       	cpi	r24, 0x03	; 3
    24b8:	91 05       	cpc	r25, r1
    24ba:	09 f4       	brne	.+2      	; 0x24be <main+0x8fa>
    24bc:	55 c0       	rjmp	.+170    	; 0x2568 <main+0x9a4>
    24be:	a7 c0       	rjmp	.+334    	; 0x260e <main+0xa4a>
    24c0:	a5 96       	adiw	r28, 0x25	; 37
    24c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    24c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    24c6:	a5 97       	sbiw	r28, 0x25	; 37
    24c8:	e7 30       	cpi	r30, 0x07	; 7
    24ca:	f1 05       	cpc	r31, r1
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <main+0x90c>
    24ce:	7c c0       	rjmp	.+248    	; 0x25c8 <main+0xa04>
    24d0:	a5 96       	adiw	r28, 0x25	; 37
    24d2:	2e ad       	ldd	r18, Y+62	; 0x3e
    24d4:	3f ad       	ldd	r19, Y+63	; 0x3f
    24d6:	a5 97       	sbiw	r28, 0x25	; 37
    24d8:	28 30       	cpi	r18, 0x08	; 8
    24da:	31 05       	cpc	r19, r1
    24dc:	8c f4       	brge	.+34     	; 0x2500 <main+0x93c>
    24de:	a5 96       	adiw	r28, 0x25	; 37
    24e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    24e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    24e4:	a5 97       	sbiw	r28, 0x25	; 37
    24e6:	85 30       	cpi	r24, 0x05	; 5
    24e8:	91 05       	cpc	r25, r1
    24ea:	09 f4       	brne	.+2      	; 0x24ee <main+0x92a>
    24ec:	55 c0       	rjmp	.+170    	; 0x2598 <main+0x9d4>
    24ee:	a5 96       	adiw	r28, 0x25	; 37
    24f0:	ee ad       	ldd	r30, Y+62	; 0x3e
    24f2:	ff ad       	ldd	r31, Y+63	; 0x3f
    24f4:	a5 97       	sbiw	r28, 0x25	; 37
    24f6:	e6 30       	cpi	r30, 0x06	; 6
    24f8:	f1 05       	cpc	r31, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <main+0x93a>
    24fc:	59 c0       	rjmp	.+178    	; 0x25b0 <main+0x9ec>
    24fe:	87 c0       	rjmp	.+270    	; 0x260e <main+0xa4a>
    2500:	a5 96       	adiw	r28, 0x25	; 37
    2502:	2e ad       	ldd	r18, Y+62	; 0x3e
    2504:	3f ad       	ldd	r19, Y+63	; 0x3f
    2506:	a5 97       	sbiw	r28, 0x25	; 37
    2508:	28 30       	cpi	r18, 0x08	; 8
    250a:	31 05       	cpc	r19, r1
    250c:	09 f4       	brne	.+2      	; 0x2510 <main+0x94c>
    250e:	68 c0       	rjmp	.+208    	; 0x25e0 <main+0xa1c>
    2510:	a5 96       	adiw	r28, 0x25	; 37
    2512:	8e ad       	ldd	r24, Y+62	; 0x3e
    2514:	9f ad       	ldd	r25, Y+63	; 0x3f
    2516:	a5 97       	sbiw	r28, 0x25	; 37
    2518:	89 30       	cpi	r24, 0x09	; 9
    251a:	91 05       	cpc	r25, r1
    251c:	09 f4       	brne	.+2      	; 0x2520 <main+0x95c>
    251e:	6c c0       	rjmp	.+216    	; 0x25f8 <main+0xa34>
    2520:	76 c0       	rjmp	.+236    	; 0x260e <main+0xa4a>
	case 0:
		Lcd_vidSendCommand(0x82);
    2522:	82 e8       	ldi	r24, 0x82	; 130
    2524:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('0');
    2528:	80 e3       	ldi	r24, 0x30	; 48
    252a:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand2=0;
    252e:	10 92 68 00 	sts	0x0068, r1
		key1=0;
    2532:	10 92 69 00 	sts	0x0069, r1
    2536:	6b c0       	rjmp	.+214    	; 0x260e <main+0xa4a>
		break;
	case 1:
		Lcd_vidSendCommand(0x82);
    2538:	82 e8       	ldi	r24, 0x82	; 130
    253a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('1');
    253e:	81 e3       	ldi	r24, 0x31	; 49
    2540:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand2=1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    254a:	10 92 69 00 	sts	0x0069, r1
    254e:	5f c0       	rjmp	.+190    	; 0x260e <main+0xa4a>
		break;
	case 2:
		Lcd_vidSendCommand(0x82);
    2550:	82 e8       	ldi	r24, 0x82	; 130
    2552:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('2');
    2556:	82 e3       	ldi	r24, 0x32	; 50
    2558:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand2=2;
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    2562:	10 92 69 00 	sts	0x0069, r1
    2566:	53 c0       	rjmp	.+166    	; 0x260e <main+0xa4a>
		break;
	case 3:
		Lcd_vidSendCommand(0x82);
    2568:	82 e8       	ldi	r24, 0x82	; 130
    256a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('3');
    256e:	83 e3       	ldi	r24, 0x33	; 51
    2570:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand2=3;
    2574:	83 e0       	ldi	r24, 0x03	; 3
    2576:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    257a:	10 92 69 00 	sts	0x0069, r1
    257e:	47 c0       	rjmp	.+142    	; 0x260e <main+0xa4a>
		break;
	case 4:
		Lcd_vidSendCommand(0x82);
    2580:	82 e8       	ldi	r24, 0x82	; 130
    2582:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('4');
    2586:	84 e3       	ldi	r24, 0x34	; 52
    2588:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand2=4;
    258c:	84 e0       	ldi	r24, 0x04	; 4
    258e:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    2592:	10 92 69 00 	sts	0x0069, r1
    2596:	3b c0       	rjmp	.+118    	; 0x260e <main+0xa4a>
		break;
	case 5:
		Lcd_vidSendCommand(0x82);
    2598:	82 e8       	ldi	r24, 0x82	; 130
    259a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('5');
    259e:	85 e3       	ldi	r24, 0x35	; 53
    25a0:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand2=5;
    25a4:	85 e0       	ldi	r24, 0x05	; 5
    25a6:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    25aa:	10 92 69 00 	sts	0x0069, r1
    25ae:	2f c0       	rjmp	.+94     	; 0x260e <main+0xa4a>
		break;
	case 6:
		Lcd_vidSendCommand(0x82);
    25b0:	82 e8       	ldi	r24, 0x82	; 130
    25b2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('6');
    25b6:	86 e3       	ldi	r24, 0x36	; 54
    25b8:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand2=6;
    25bc:	86 e0       	ldi	r24, 0x06	; 6
    25be:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    25c2:	10 92 69 00 	sts	0x0069, r1
    25c6:	23 c0       	rjmp	.+70     	; 0x260e <main+0xa4a>
		break;
	case 7:
		Lcd_vidSendCommand(0x82);
    25c8:	82 e8       	ldi	r24, 0x82	; 130
    25ca:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('7');
    25ce:	87 e3       	ldi	r24, 0x37	; 55
    25d0:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand2=7;
    25d4:	87 e0       	ldi	r24, 0x07	; 7
    25d6:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    25da:	10 92 69 00 	sts	0x0069, r1
    25de:	17 c0       	rjmp	.+46     	; 0x260e <main+0xa4a>
		break;
	case 8:
		Lcd_vidSendCommand(0x82);
    25e0:	82 e8       	ldi	r24, 0x82	; 130
    25e2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('8');
    25e6:	88 e3       	ldi	r24, 0x38	; 56
    25e8:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand2=8;
    25ec:	88 e0       	ldi	r24, 0x08	; 8
    25ee:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    25f2:	10 92 69 00 	sts	0x0069, r1
    25f6:	0b c0       	rjmp	.+22     	; 0x260e <main+0xa4a>
		break;
	case 9:
		Lcd_vidSendCommand(0x82);
    25f8:	82 e8       	ldi	r24, 0x82	; 130
    25fa:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('9');
    25fe:	89 e3       	ldi	r24, 0x39	; 57
    2600:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		operand2=9;
    2604:	89 e0       	ldi	r24, 0x09	; 9
    2606:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    260a:	10 92 69 00 	sts	0x0069, r1
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a0 ea       	ldi	r26, 0xA0	; 160
    2614:	b0 e4       	ldi	r27, 0x40	; 64
    2616:	89 8f       	std	Y+25, r24	; 0x19
    2618:	9a 8f       	std	Y+26, r25	; 0x1a
    261a:	ab 8f       	std	Y+27, r26	; 0x1b
    261c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261e:	69 8d       	ldd	r22, Y+25	; 0x19
    2620:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2622:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2624:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4a ef       	ldi	r20, 0xFA	; 250
    262c:	54 e4       	ldi	r21, 0x44	; 68
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	8d 8b       	std	Y+21, r24	; 0x15
    2638:	9e 8b       	std	Y+22, r25	; 0x16
    263a:	af 8b       	std	Y+23, r26	; 0x17
    263c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    263e:	6d 89       	ldd	r22, Y+21	; 0x15
    2640:	7e 89       	ldd	r23, Y+22	; 0x16
    2642:	8f 89       	ldd	r24, Y+23	; 0x17
    2644:	98 8d       	ldd	r25, Y+24	; 0x18
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e8       	ldi	r20, 0x80	; 128
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2652:	88 23       	and	r24, r24
    2654:	2c f4       	brge	.+10     	; 0x2660 <main+0xa9c>
		__ticks = 1;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9c 8b       	std	Y+20, r25	; 0x14
    265c:	8b 8b       	std	Y+19, r24	; 0x13
    265e:	3f c0       	rjmp	.+126    	; 0x26de <main+0xb1a>
	else if (__tmp > 65535)
    2660:	6d 89       	ldd	r22, Y+21	; 0x15
    2662:	7e 89       	ldd	r23, Y+22	; 0x16
    2664:	8f 89       	ldd	r24, Y+23	; 0x17
    2666:	98 8d       	ldd	r25, Y+24	; 0x18
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	3f ef       	ldi	r19, 0xFF	; 255
    266c:	4f e7       	ldi	r20, 0x7F	; 127
    266e:	57 e4       	ldi	r21, 0x47	; 71
    2670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2674:	18 16       	cp	r1, r24
    2676:	4c f5       	brge	.+82     	; 0x26ca <main+0xb06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2678:	69 8d       	ldd	r22, Y+25	; 0x19
    267a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    267c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    267e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e2       	ldi	r20, 0x20	; 32
    2686:	51 e4       	ldi	r21, 0x41	; 65
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9c 8b       	std	Y+20, r25	; 0x14
    269e:	8b 8b       	std	Y+19, r24	; 0x13
    26a0:	0f c0       	rjmp	.+30     	; 0x26c0 <main+0xafc>
    26a2:	88 ec       	ldi	r24, 0xC8	; 200
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	9a 8b       	std	Y+18, r25	; 0x12
    26a8:	89 8b       	std	Y+17, r24	; 0x11
    26aa:	89 89       	ldd	r24, Y+17	; 0x11
    26ac:	9a 89       	ldd	r25, Y+18	; 0x12
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <main+0xaea>
    26b2:	9a 8b       	std	Y+18, r25	; 0x12
    26b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	9c 8b       	std	Y+20, r25	; 0x14
    26be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c0:	8b 89       	ldd	r24, Y+19	; 0x13
    26c2:	9c 89       	ldd	r25, Y+20	; 0x14
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	69 f7       	brne	.-38     	; 0x26a2 <main+0xade>
    26c8:	14 c0       	rjmp	.+40     	; 0x26f2 <main+0xb2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ca:	6d 89       	ldd	r22, Y+21	; 0x15
    26cc:	7e 89       	ldd	r23, Y+22	; 0x16
    26ce:	8f 89       	ldd	r24, Y+23	; 0x17
    26d0:	98 8d       	ldd	r25, Y+24	; 0x18
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	9c 8b       	std	Y+20, r25	; 0x14
    26dc:	8b 8b       	std	Y+19, r24	; 0x13
    26de:	8b 89       	ldd	r24, Y+19	; 0x13
    26e0:	9c 89       	ldd	r25, Y+20	; 0x14
    26e2:	98 8b       	std	Y+16, r25	; 0x10
    26e4:	8f 87       	std	Y+15, r24	; 0x0f
    26e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e8:	98 89       	ldd	r25, Y+16	; 0x10
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <main+0xb26>
    26ee:	98 8b       	std	Y+16, r25	; 0x10
    26f0:	8f 87       	std	Y+15, r24	; 0x0f
		break;
	}
	}
	_delay_ms(5);
	key2=Keypad_u8GetKey();
    26f2:	0e 94 41 08 	call	0x1082	; 0x1082 <Keypad_u8GetKey>
    26f6:	80 93 6d 00 	sts	0x006D, r24
	if(key2=='='){
    26fa:	80 91 6d 00 	lds	r24, 0x006D
    26fe:	8d 33       	cpi	r24, 0x3D	; 61
    2700:	09 f0       	breq	.+2      	; 0x2704 <main+0xb40>
    2702:	81 c0       	rjmp	.+258    	; 0x2806 <main+0xc42>
			result=key*key1;
		}
		else if(operator=='/'){
			result=key/key1;
		}*/
		Lcd_vidSendCommand(0x83);
    2704:	83 e8       	ldi	r24, 0x83	; 131
    2706:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('=');
    270a:	8d e3       	ldi	r24, 0x3D	; 61
    270c:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	a8 e4       	ldi	r26, 0x48	; 72
    2716:	b3 e4       	ldi	r27, 0x43	; 67
    2718:	8b 87       	std	Y+11, r24	; 0x0b
    271a:	9c 87       	std	Y+12, r25	; 0x0c
    271c:	ad 87       	std	Y+13, r26	; 0x0d
    271e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	6b 85       	ldd	r22, Y+11	; 0x0b
    2722:	7c 85       	ldd	r23, Y+12	; 0x0c
    2724:	8d 85       	ldd	r24, Y+13	; 0x0d
    2726:	9e 85       	ldd	r25, Y+14	; 0x0e
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8f 83       	std	Y+7, r24	; 0x07
    273a:	98 87       	std	Y+8, r25	; 0x08
    273c:	a9 87       	std	Y+9, r26	; 0x09
    273e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <main+0xb9e>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <main+0xc1c>
	else if (__tmp > 65535)
    2762:	6f 81       	ldd	r22, Y+7	; 0x07
    2764:	78 85       	ldd	r23, Y+8	; 0x08
    2766:	89 85       	ldd	r24, Y+9	; 0x09
    2768:	9a 85       	ldd	r25, Y+10	; 0x0a
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <main+0xc08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	6b 85       	ldd	r22, Y+11	; 0x0b
    277c:	7c 85       	ldd	r23, Y+12	; 0x0c
    277e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2780:	9e 85       	ldd	r25, Y+14	; 0x0e
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <main+0xbfe>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9c 83       	std	Y+4, r25	; 0x04
    27aa:	8b 83       	std	Y+3, r24	; 0x03
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <main+0xbec>
    27b4:	9c 83       	std	Y+4, r25	; 0x04
    27b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <main+0xbe0>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <main+0xc30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6f 81       	ldd	r22, Y+7	; 0x07
    27ce:	78 85       	ldd	r23, Y+8	; 0x08
    27d0:	89 85       	ldd	r24, Y+9	; 0x09
    27d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	9a 81       	ldd	r25, Y+2	; 0x02
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <main+0xc28>
    27f0:	9a 83       	std	Y+2, r25	; 0x02
    27f2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		Lcd_vidSendCommand(0x84);
    27f4:	84 e8       	ldi	r24, 0x84	; 132
    27f6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar(result+'0');
    27fa:	80 91 6c 00 	lds	r24, 0x006C
    27fe:	80 5d       	subi	r24, 0xD0	; 208
    2800:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    2804:	f3 c9       	rjmp	.-3098   	; 0x1bec <main+0x28>
	}

	else PORTD=0xFF;
    2806:	e2 e3       	ldi	r30, 0x32	; 50
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	8f ef       	ldi	r24, 0xFF	; 255
    280c:	80 83       	st	Z, r24
    280e:	ee c9       	rjmp	.-3108   	; 0x1bec <main+0x28>

00002810 <__udivmodqi4>:
    2810:	99 1b       	sub	r25, r25
    2812:	79 e0       	ldi	r23, 0x09	; 9
    2814:	04 c0       	rjmp	.+8      	; 0x281e <__udivmodqi4_ep>

00002816 <__udivmodqi4_loop>:
    2816:	99 1f       	adc	r25, r25
    2818:	96 17       	cp	r25, r22
    281a:	08 f0       	brcs	.+2      	; 0x281e <__udivmodqi4_ep>
    281c:	96 1b       	sub	r25, r22

0000281e <__udivmodqi4_ep>:
    281e:	88 1f       	adc	r24, r24
    2820:	7a 95       	dec	r23
    2822:	c9 f7       	brne	.-14     	; 0x2816 <__udivmodqi4_loop>
    2824:	80 95       	com	r24
    2826:	08 95       	ret

00002828 <__prologue_saves__>:
    2828:	2f 92       	push	r2
    282a:	3f 92       	push	r3
    282c:	4f 92       	push	r4
    282e:	5f 92       	push	r5
    2830:	6f 92       	push	r6
    2832:	7f 92       	push	r7
    2834:	8f 92       	push	r8
    2836:	9f 92       	push	r9
    2838:	af 92       	push	r10
    283a:	bf 92       	push	r11
    283c:	cf 92       	push	r12
    283e:	df 92       	push	r13
    2840:	ef 92       	push	r14
    2842:	ff 92       	push	r15
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	ca 1b       	sub	r28, r26
    2852:	db 0b       	sbc	r29, r27
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	09 94       	ijmp

00002860 <__epilogue_restores__>:
    2860:	2a 88       	ldd	r2, Y+18	; 0x12
    2862:	39 88       	ldd	r3, Y+17	; 0x11
    2864:	48 88       	ldd	r4, Y+16	; 0x10
    2866:	5f 84       	ldd	r5, Y+15	; 0x0f
    2868:	6e 84       	ldd	r6, Y+14	; 0x0e
    286a:	7d 84       	ldd	r7, Y+13	; 0x0d
    286c:	8c 84       	ldd	r8, Y+12	; 0x0c
    286e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2870:	aa 84       	ldd	r10, Y+10	; 0x0a
    2872:	b9 84       	ldd	r11, Y+9	; 0x09
    2874:	c8 84       	ldd	r12, Y+8	; 0x08
    2876:	df 80       	ldd	r13, Y+7	; 0x07
    2878:	ee 80       	ldd	r14, Y+6	; 0x06
    287a:	fd 80       	ldd	r15, Y+5	; 0x05
    287c:	0c 81       	ldd	r16, Y+4	; 0x04
    287e:	1b 81       	ldd	r17, Y+3	; 0x03
    2880:	aa 81       	ldd	r26, Y+2	; 0x02
    2882:	b9 81       	ldd	r27, Y+1	; 0x01
    2884:	ce 0f       	add	r28, r30
    2886:	d1 1d       	adc	r29, r1
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	ed 01       	movw	r28, r26
    2894:	08 95       	ret

00002896 <_exit>:
    2896:	f8 94       	cli

00002898 <__stop_program>:
    2898:	ff cf       	rjmp	.-2      	; 0x2898 <__stop_program>
