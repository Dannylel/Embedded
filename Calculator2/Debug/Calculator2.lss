
Calculator2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000046e8  0000477c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  00004784  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  00004784  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ae8  00000000  00000000  00007634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000811c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000825c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000083cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a015  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000af00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bcb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000be10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c86b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 36       	cpi	r26, 0x6F	; 111
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 ee       	ldi	r30, 0xE8	; 232
      78:	f6 e4       	ldi	r31, 0x46	; 70
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <main>
      8a:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 23 	jmp	0x468e	; 0x468e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 23 	jmp	0x468e	; 0x468e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 47 23 	jmp	0x468e	; 0x468e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 47 23 	jmp	0x468e	; 0x468e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 47 23 	jmp	0x468e	; 0x468e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Dio_vidSetPinDir>:
#include"../Lib/Std_types.h"
#include"../Lib/Bit_math.h"
#include"Dio_int.h"
#include<avr/io.h>

void Dio_vidSetPinDir(u8 Pin, u8 Dir){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Dio_vidSetPinDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Dio_vidSetPinDir+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <Dio_vidSetPinDir+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	86 95       	lsr	r24
     b5c:	86 95       	lsr	r24
     b5e:	86 95       	lsr	r24
     b60:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	87 70       	andi	r24, 0x07	; 7
     b66:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3e 83       	std	Y+6, r19	; 0x06
     b70:	2d 83       	std	Y+5, r18	; 0x05
     b72:	8d 81       	ldd	r24, Y+5	; 0x05
     b74:	9e 81       	ldd	r25, Y+6	; 0x06
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <Dio_vidSetPinDir+0x38>
     b7c:	43 c0       	rjmp	.+134    	; 0xc04 <Dio_vidSetPinDir+0xbe>
     b7e:	2d 81       	ldd	r18, Y+5	; 0x05
     b80:	3e 81       	ldd	r19, Y+6	; 0x06
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	2c f4       	brge	.+10     	; 0xb92 <Dio_vidSetPinDir+0x4c>
     b88:	8d 81       	ldd	r24, Y+5	; 0x05
     b8a:	9e 81       	ldd	r25, Y+6	; 0x06
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	71 f0       	breq	.+28     	; 0xbac <Dio_vidSetPinDir+0x66>
     b90:	bc c0       	rjmp	.+376    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
     b92:	2d 81       	ldd	r18, Y+5	; 0x05
     b94:	3e 81       	ldd	r19, Y+6	; 0x06
     b96:	22 30       	cpi	r18, 0x02	; 2
     b98:	31 05       	cpc	r19, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <Dio_vidSetPinDir+0x58>
     b9c:	5f c0       	rjmp	.+190    	; 0xc5c <Dio_vidSetPinDir+0x116>
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <Dio_vidSetPinDir+0x64>
     ba8:	85 c0       	rjmp	.+266    	; 0xcb4 <Dio_vidSetPinDir+0x16e>
     baa:	af c0       	rjmp	.+350    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
	case 0:
		if(Dir==1){
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	a1 f4       	brne	.+40     	; 0xbda <Dio_vidSetPinDir+0x94>
			SET_BIT(DDRA,PinLoc);
     bb2:	aa e3       	ldi	r26, 0x3A	; 58
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ea e3       	ldi	r30, 0x3A	; 58
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <Dio_vidSetPinDir+0x8a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <Dio_vidSetPinDir+0x86>
     bd4:	84 2b       	or	r24, r20
     bd6:	8c 93       	st	X, r24
     bd8:	98 c0       	rjmp	.+304    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRA,PinLoc);
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <Dio_vidSetPinDir+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <Dio_vidSetPinDir+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	83 c0       	rjmp	.+262    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 1:
		if(Dir==1){
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	a1 f4       	brne	.+40     	; 0xc32 <Dio_vidSetPinDir+0xec>
			SET_BIT(DDRB,PinLoc);
     c0a:	a7 e3       	ldi	r26, 0x37	; 55
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e7 e3       	ldi	r30, 0x37	; 55
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <Dio_vidSetPinDir+0xe2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <Dio_vidSetPinDir+0xde>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	6c c0       	rjmp	.+216    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRB,PinLoc);
     c32:	a7 e3       	ldi	r26, 0x37	; 55
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e7 e3       	ldi	r30, 0x37	; 55
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <Dio_vidSetPinDir+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <Dio_vidSetPinDir+0x106>
     c54:	80 95       	com	r24
     c56:	84 23       	and	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	57 c0       	rjmp	.+174    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 2:
		if(Dir==1){
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	a1 f4       	brne	.+40     	; 0xc8a <Dio_vidSetPinDir+0x144>
			SET_BIT(DDRC,PinLoc);
     c62:	a4 e3       	ldi	r26, 0x34	; 52
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e4 e3       	ldi	r30, 0x34	; 52
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <Dio_vidSetPinDir+0x13a>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <Dio_vidSetPinDir+0x136>
     c84:	84 2b       	or	r24, r20
     c86:	8c 93       	st	X, r24
     c88:	40 c0       	rjmp	.+128    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRC,PinLoc);
     c8a:	a4 e3       	ldi	r26, 0x34	; 52
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e4 e3       	ldi	r30, 0x34	; 52
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <Dio_vidSetPinDir+0x162>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <Dio_vidSetPinDir+0x15e>
     cac:	80 95       	com	r24
     cae:	84 23       	and	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	2b c0       	rjmp	.+86     	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 3:
		if(Dir==1){
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	a1 f4       	brne	.+40     	; 0xce2 <Dio_vidSetPinDir+0x19c>
			SET_BIT(DDRD,PinLoc);
     cba:	a1 e3       	ldi	r26, 0x31	; 49
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <Dio_vidSetPinDir+0x192>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <Dio_vidSetPinDir+0x18e>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	14 c0       	rjmp	.+40     	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRD,PinLoc);
     ce2:	a1 e3       	ldi	r26, 0x31	; 49
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e1 e3       	ldi	r30, 0x31	; 49
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <Dio_vidSetPinDir+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <Dio_vidSetPinDir+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
		}
		break;
	}
}
     d0a:	26 96       	adiw	r28, 0x06	; 6
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin, u8 Val){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <Dio_vidSetPinVal+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <Dio_vidSetPinVal+0x8>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <Dio_vidSetPinVal+0xa>
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	8b 83       	std	Y+3, r24	; 0x03
     d2c:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	86 95       	lsr	r24
     d32:	86 95       	lsr	r24
     d34:	86 95       	lsr	r24
     d36:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	87 70       	andi	r24, 0x07	; 7
     d3c:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	3e 83       	std	Y+6, r19	; 0x06
     d46:	2d 83       	std	Y+5, r18	; 0x05
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <Dio_vidSetPinVal+0x38>
     d52:	43 c0       	rjmp	.+134    	; 0xdda <Dio_vidSetPinVal+0xbe>
     d54:	2d 81       	ldd	r18, Y+5	; 0x05
     d56:	3e 81       	ldd	r19, Y+6	; 0x06
     d58:	22 30       	cpi	r18, 0x02	; 2
     d5a:	31 05       	cpc	r19, r1
     d5c:	2c f4       	brge	.+10     	; 0xd68 <Dio_vidSetPinVal+0x4c>
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	71 f0       	breq	.+28     	; 0xd82 <Dio_vidSetPinVal+0x66>
     d66:	bc c0       	rjmp	.+376    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
     d68:	2d 81       	ldd	r18, Y+5	; 0x05
     d6a:	3e 81       	ldd	r19, Y+6	; 0x06
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <Dio_vidSetPinVal+0x58>
     d72:	5f c0       	rjmp	.+190    	; 0xe32 <Dio_vidSetPinVal+0x116>
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <Dio_vidSetPinVal+0x64>
     d7e:	85 c0       	rjmp	.+266    	; 0xe8a <Dio_vidSetPinVal+0x16e>
     d80:	af c0       	rjmp	.+350    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
	case 0:
		if(Val==1){
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	a1 f4       	brne	.+40     	; 0xdb0 <Dio_vidSetPinVal+0x94>
			SET_BIT(PORTA,PinLoc);
     d88:	ab e3       	ldi	r26, 0x3B	; 59
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	eb e3       	ldi	r30, 0x3B	; 59
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <Dio_vidSetPinVal+0x8a>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <Dio_vidSetPinVal+0x86>
     daa:	84 2b       	or	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	98 c0       	rjmp	.+304    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTA,PinLoc);
     db0:	ab e3       	ldi	r26, 0x3B	; 59
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	eb e3       	ldi	r30, 0x3B	; 59
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <Dio_vidSetPinVal+0xb2>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <Dio_vidSetPinVal+0xae>
     dd2:	80 95       	com	r24
     dd4:	84 23       	and	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	83 c0       	rjmp	.+262    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 1:
		if(Val==1){
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	a1 f4       	brne	.+40     	; 0xe08 <Dio_vidSetPinVal+0xec>
			SET_BIT(PORTB,PinLoc);
     de0:	a8 e3       	ldi	r26, 0x38	; 56
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 e3       	ldi	r30, 0x38	; 56
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <Dio_vidSetPinVal+0xe2>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <Dio_vidSetPinVal+0xde>
     e02:	84 2b       	or	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	6c c0       	rjmp	.+216    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTB,PinLoc);
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <Dio_vidSetPinVal+0x10a>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <Dio_vidSetPinVal+0x106>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	57 c0       	rjmp	.+174    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 2:
		if(Val==1){
     e32:	8c 81       	ldd	r24, Y+4	; 0x04
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	a1 f4       	brne	.+40     	; 0xe60 <Dio_vidSetPinVal+0x144>
			SET_BIT(PORTC,PinLoc);
     e38:	a5 e3       	ldi	r26, 0x35	; 53
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e3       	ldi	r30, 0x35	; 53
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <Dio_vidSetPinVal+0x13a>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <Dio_vidSetPinVal+0x136>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	40 c0       	rjmp	.+128    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTC,PinLoc);
     e60:	a5 e3       	ldi	r26, 0x35	; 53
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e3       	ldi	r30, 0x35	; 53
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <Dio_vidSetPinVal+0x162>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <Dio_vidSetPinVal+0x15e>
     e82:	80 95       	com	r24
     e84:	84 23       	and	r24, r20
     e86:	8c 93       	st	X, r24
     e88:	2b c0       	rjmp	.+86     	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 3:
		if(Val==1){
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	a1 f4       	brne	.+40     	; 0xeb8 <Dio_vidSetPinVal+0x19c>
			SET_BIT(PORTD,PinLoc);
     e90:	a2 e3       	ldi	r26, 0x32	; 50
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e2 e3       	ldi	r30, 0x32	; 50
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <Dio_vidSetPinVal+0x192>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <Dio_vidSetPinVal+0x18e>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTD,PinLoc);
     eb8:	a2 e3       	ldi	r26, 0x32	; 50
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e3       	ldi	r30, 0x32	; 50
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <Dio_vidSetPinVal+0x1ba>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <Dio_vidSetPinVal+0x1b6>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
		}
		break;
	}
}
     ee0:	26 96       	adiw	r28, 0x06	; 6
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <Dio_u8GetPinVal>:

u8 Dio_u8GetPinVal(u8 pin){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <Dio_u8GetPinVal+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <Dio_u8GetPinVal+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <Dio_u8GetPinVal+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8c 83       	std	Y+4, r24	; 0x04
	u8 PortID;
	u8 PinLoc;
	u8 PinVal;

	PortID=pin/8;
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	86 95       	lsr	r24
     f06:	86 95       	lsr	r24
     f08:	86 95       	lsr	r24
     f0a:	8b 83       	std	Y+3, r24	; 0x03
	PinLoc=pin%8;
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	87 70       	andi	r24, 0x07	; 7
     f10:	8a 83       	std	Y+2, r24	; 0x02

	switch(PortID){
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3e 83       	std	Y+6, r19	; 0x06
     f1a:	2d 83       	std	Y+5, r18	; 0x05
     f1c:	4d 81       	ldd	r20, Y+5	; 0x05
     f1e:	5e 81       	ldd	r21, Y+6	; 0x06
     f20:	41 30       	cpi	r20, 0x01	; 1
     f22:	51 05       	cpc	r21, r1
     f24:	41 f1       	breq	.+80     	; 0xf76 <Dio_u8GetPinVal+0x84>
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	82 30       	cpi	r24, 0x02	; 2
     f2c:	91 05       	cpc	r25, r1
     f2e:	34 f4       	brge	.+12     	; 0xf3c <Dio_u8GetPinVal+0x4a>
     f30:	2d 81       	ldd	r18, Y+5	; 0x05
     f32:	3e 81       	ldd	r19, Y+6	; 0x06
     f34:	21 15       	cp	r18, r1
     f36:	31 05       	cpc	r19, r1
     f38:	61 f0       	breq	.+24     	; 0xf52 <Dio_u8GetPinVal+0x60>
     f3a:	52 c0       	rjmp	.+164    	; 0xfe0 <Dio_u8GetPinVal+0xee>
     f3c:	4d 81       	ldd	r20, Y+5	; 0x05
     f3e:	5e 81       	ldd	r21, Y+6	; 0x06
     f40:	42 30       	cpi	r20, 0x02	; 2
     f42:	51 05       	cpc	r21, r1
     f44:	51 f1       	breq	.+84     	; 0xf9a <Dio_u8GetPinVal+0xa8>
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	91 05       	cpc	r25, r1
     f4e:	b9 f1       	breq	.+110    	; 0xfbe <Dio_u8GetPinVal+0xcc>
     f50:	47 c0       	rjmp	.+142    	; 0xfe0 <Dio_u8GetPinVal+0xee>

	case 0:
		PinVal=GET_BIT(PINA,PinLoc);
     f52:	e9 e3       	ldi	r30, 0x39	; 57
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a9 01       	movw	r20, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <Dio_u8GetPinVal+0x78>
     f66:	55 95       	asr	r21
     f68:	47 95       	ror	r20
     f6a:	8a 95       	dec	r24
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <Dio_u8GetPinVal+0x74>
     f6e:	ca 01       	movw	r24, r20
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	35 c0       	rjmp	.+106    	; 0xfe0 <Dio_u8GetPinVal+0xee>
		break;

	case 1:
		PinVal=GET_BIT(PINB,PinLoc);
     f76:	e6 e3       	ldi	r30, 0x36	; 54
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	a9 01       	movw	r20, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <Dio_u8GetPinVal+0x9c>
     f8a:	55 95       	asr	r21
     f8c:	47 95       	ror	r20
     f8e:	8a 95       	dec	r24
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <Dio_u8GetPinVal+0x98>
     f92:	ca 01       	movw	r24, r20
     f94:	81 70       	andi	r24, 0x01	; 1
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	23 c0       	rjmp	.+70     	; 0xfe0 <Dio_u8GetPinVal+0xee>
		break;
	case 2:
		PinVal=GET_BIT(PINC,PinLoc);
     f9a:	e3 e3       	ldi	r30, 0x33	; 51
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <Dio_u8GetPinVal+0xc0>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <Dio_u8GetPinVal+0xbc>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	11 c0       	rjmp	.+34     	; 0xfe0 <Dio_u8GetPinVal+0xee>
		break;
	case 3:
		PinVal=GET_BIT(PIND,PinLoc);
     fbe:	e0 e3       	ldi	r30, 0x30	; 48
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <Dio_u8GetPinVal+0xe4>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <Dio_u8GetPinVal+0xe0>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return PinVal;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe2:	26 96       	adiw	r28, 0x06	; 6
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <Keypad_vidInit>:
#undef F_CPU
#define F_CPU 8000000
#include<util/delay.h>
#include<avr/io.h>

void Keypad_vidInit(void){
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
	//Setting upper 4 bits to output and lower 4 to input
	Dio_vidSetPinDir(KEYPAD_u8R1_PIN,DIO_u8OUTPUT);
     ffc:	88 e1       	ldi	r24, 0x18	; 24
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R2_PIN,DIO_u8OUTPUT);
    1004:	89 e1       	ldi	r24, 0x19	; 25
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R3_PIN,DIO_u8OUTPUT);
    100c:	8a e1       	ldi	r24, 0x1A	; 26
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R4_PIN,DIO_u8OUTPUT);
    1014:	8b e1       	ldi	r24, 0x1B	; 27
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	Dio_vidSetPinDir(KEYPAD_u8C1_PIN,DIO_u8INPUT);
    101c:	8c e1       	ldi	r24, 0x1C	; 28
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C2_PIN,DIO_u8INPUT);
    1024:	8d e1       	ldi	r24, 0x1D	; 29
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C3_PIN,DIO_u8INPUT);
    102c:	8e e1       	ldi	r24, 0x1E	; 30
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C4_PIN,DIO_u8INPUT);
    1034:	8f e1       	ldi	r24, 0x1F	; 31
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	//Pulling up resistors for lower 4 bits and passing 5v through upper 4 bits
	//>Indicating that we are not scanning for any button clicks right now
	Dio_vidSetPinVal(KEYPAD_u8R1_PIN,DIO_u8HIGH);
    103c:	88 e1       	ldi	r24, 0x18	; 24
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN,DIO_u8HIGH);
    1044:	89 e1       	ldi	r24, 0x19	; 25
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN,DIO_u8HIGH);
    104c:	8a e1       	ldi	r24, 0x1A	; 26
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN,DIO_u8HIGH);
    1054:	8b e1       	ldi	r24, 0x1B	; 27
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C1_PIN,DIO_u8HIGH);
    105c:	8c e1       	ldi	r24, 0x1C	; 28
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C2_PIN,DIO_u8HIGH);
    1064:	8d e1       	ldi	r24, 0x1D	; 29
    1066:	61 e0       	ldi	r22, 0x01	; 1
    1068:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C3_PIN,DIO_u8HIGH);
    106c:	8e e1       	ldi	r24, 0x1E	; 30
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C4_PIN,DIO_u8HIGH);
    1074:	8f e1       	ldi	r24, 0x1F	; 31
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <Keypad_u8GetKey>:

u8 Keypad_u8GetKey(void){
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	2e 97       	sbiw	r28, 0x0e	; 14
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
	u8 temp,pin_c1,pin_c2,pin_c3,pin_c4;

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN,DIO_u8LOW);
    1096:	88 e1       	ldi	r24, 0x18	; 24
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN,DIO_u8HIGH);
    109e:	89 e1       	ldi	r24, 0x19	; 25
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN,DIO_u8HIGH);
    10a6:	8a e1       	ldi	r24, 0x1A	; 26
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN,DIO_u8HIGH);
    10ae:	8b e1       	ldi	r24, 0x1B	; 27
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	//Masking to get values of input pins solely
	pin_c1= Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    10b6:	8c e1       	ldi	r24, 0x1C	; 28
    10b8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    10bc:	8c 83       	std	Y+4, r24	; 0x04
	pin_c2= Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    10be:	8d e1       	ldi	r24, 0x1D	; 29
    10c0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    10c4:	8b 83       	std	Y+3, r24	; 0x03
	pin_c3= Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    10c6:	8e e1       	ldi	r24, 0x1E	; 30
    10c8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    10cc:	8a 83       	std	Y+2, r24	; 0x02
	pin_c4= Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    10ce:	8f e1       	ldi	r24, 0x1F	; 31
    10d0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    10d4:	89 83       	std	Y+1, r24	; 0x01

	temp=0;
    10d6:	1d 82       	std	Y+5, r1	; 0x05
	temp|=(pin_c1<<4);
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	82 95       	swap	r24
    10e0:	92 95       	swap	r25
    10e2:	90 7f       	andi	r25, 0xF0	; 240
    10e4:	98 27       	eor	r25, r24
    10e6:	80 7f       	andi	r24, 0xF0	; 240
    10e8:	98 27       	eor	r25, r24
    10ea:	98 2f       	mov	r25, r24
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	89 2b       	or	r24, r25
    10f0:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c2<<5);
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	82 95       	swap	r24
    10fe:	92 95       	swap	r25
    1100:	90 7f       	andi	r25, 0xF0	; 240
    1102:	98 27       	eor	r25, r24
    1104:	80 7f       	andi	r24, 0xF0	; 240
    1106:	98 27       	eor	r25, r24
    1108:	98 2f       	mov	r25, r24
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	89 2b       	or	r24, r25
    110e:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c3<<6);
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	00 24       	eor	r0, r0
    1118:	96 95       	lsr	r25
    111a:	87 95       	ror	r24
    111c:	07 94       	ror	r0
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	07 94       	ror	r0
    1124:	98 2f       	mov	r25, r24
    1126:	80 2d       	mov	r24, r0
    1128:	98 2f       	mov	r25, r24
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	89 2b       	or	r24, r25
    112e:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c4<<7);
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	96 95       	lsr	r25
    1138:	98 2f       	mov	r25, r24
    113a:	88 27       	eor	r24, r24
    113c:	97 95       	ror	r25
    113e:	87 95       	ror	r24
    1140:	98 2f       	mov	r25, r24
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	89 2b       	or	r24, r25
    1146:	8d 83       	std	Y+5, r24	; 0x05


	switch(temp){
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3e 87       	std	Y+14, r19	; 0x0e
    1150:	2d 87       	std	Y+13, r18	; 0x0d
    1152:	8d 85       	ldd	r24, Y+13	; 0x0d
    1154:	9e 85       	ldd	r25, Y+14	; 0x0e
    1156:	80 3b       	cpi	r24, 0xB0	; 176
    1158:	91 05       	cpc	r25, r1
    115a:	d9 f0       	breq	.+54     	; 0x1192 <Keypad_u8GetKey+0x110>
    115c:	2d 85       	ldd	r18, Y+13	; 0x0d
    115e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1160:	21 3b       	cpi	r18, 0xB1	; 177
    1162:	31 05       	cpc	r19, r1
    1164:	34 f4       	brge	.+12     	; 0x1172 <Keypad_u8GetKey+0xf0>
    1166:	8d 85       	ldd	r24, Y+13	; 0x0d
    1168:	9e 85       	ldd	r25, Y+14	; 0x0e
    116a:	80 37       	cpi	r24, 0x70	; 112
    116c:	91 05       	cpc	r25, r1
    116e:	a1 f0       	breq	.+40     	; 0x1198 <Keypad_u8GetKey+0x116>
    1170:	16 c0       	rjmp	.+44     	; 0x119e <Keypad_u8GetKey+0x11c>
    1172:	2d 85       	ldd	r18, Y+13	; 0x0d
    1174:	3e 85       	ldd	r19, Y+14	; 0x0e
    1176:	20 3d       	cpi	r18, 0xD0	; 208
    1178:	31 05       	cpc	r19, r1
    117a:	41 f0       	breq	.+16     	; 0x118c <Keypad_u8GetKey+0x10a>
    117c:	8d 85       	ldd	r24, Y+13	; 0x0d
    117e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1180:	80 3e       	cpi	r24, 0xE0	; 224
    1182:	91 05       	cpc	r25, r1
    1184:	61 f4       	brne	.+24     	; 0x119e <Keypad_u8GetKey+0x11c>
	case 0b11100000:
		return KEYPAD_u8R1C1_KEY;
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	9c 87       	std	Y+12, r25	; 0x0c
    118a:	96 c1       	rjmp	.+812    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b11010000:
		return KEYPAD_u8R1C2_KEY;
    118c:	22 e0       	ldi	r18, 0x02	; 2
    118e:	2c 87       	std	Y+12, r18	; 0x0c
    1190:	93 c1       	rjmp	.+806    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b10110000:
		return KEYPAD_u8R1C3_KEY;
    1192:	33 e0       	ldi	r19, 0x03	; 3
    1194:	3c 87       	std	Y+12, r19	; 0x0c
    1196:	90 c1       	rjmp	.+800    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b01110000:
		return KEYPAD_u8R1C4_KEY;
    1198:	8b e2       	ldi	r24, 0x2B	; 43
    119a:	8c 87       	std	Y+12, r24	; 0x0c
    119c:	8d c1       	rjmp	.+794    	; 0x14b8 <Keypad_u8GetKey+0x436>
	}

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN,DIO_u8HIGH);
    119e:	88 e1       	ldi	r24, 0x18	; 24
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN,DIO_u8LOW);
    11a6:	89 e1       	ldi	r24, 0x19	; 25
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN,DIO_u8HIGH);
    11ae:	8a e1       	ldi	r24, 0x1A	; 26
    11b0:	61 e0       	ldi	r22, 0x01	; 1
    11b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN,DIO_u8HIGH);
    11b6:	8b e1       	ldi	r24, 0x1B	; 27
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	//Masking to get values of input pins solely
	pin_c1= Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    11be:	8c e1       	ldi	r24, 0x1C	; 28
    11c0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    11c4:	8c 83       	std	Y+4, r24	; 0x04
	pin_c2= Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    11c6:	8d e1       	ldi	r24, 0x1D	; 29
    11c8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    11cc:	8b 83       	std	Y+3, r24	; 0x03
	pin_c3= Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    11ce:	8e e1       	ldi	r24, 0x1E	; 30
    11d0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    11d4:	8a 83       	std	Y+2, r24	; 0x02
	pin_c4= Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    11d6:	8f e1       	ldi	r24, 0x1F	; 31
    11d8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    11dc:	89 83       	std	Y+1, r24	; 0x01

	temp=0;
    11de:	1d 82       	std	Y+5, r1	; 0x05
	temp|=(pin_c1<<4);
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	82 95       	swap	r24
    11e8:	92 95       	swap	r25
    11ea:	90 7f       	andi	r25, 0xF0	; 240
    11ec:	98 27       	eor	r25, r24
    11ee:	80 7f       	andi	r24, 0xF0	; 240
    11f0:	98 27       	eor	r25, r24
    11f2:	98 2f       	mov	r25, r24
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	89 2b       	or	r24, r25
    11f8:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c2<<5);
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	82 95       	swap	r24
    1206:	92 95       	swap	r25
    1208:	90 7f       	andi	r25, 0xF0	; 240
    120a:	98 27       	eor	r25, r24
    120c:	80 7f       	andi	r24, 0xF0	; 240
    120e:	98 27       	eor	r25, r24
    1210:	98 2f       	mov	r25, r24
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	89 2b       	or	r24, r25
    1216:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c3<<6);
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	00 24       	eor	r0, r0
    1220:	96 95       	lsr	r25
    1222:	87 95       	ror	r24
    1224:	07 94       	ror	r0
    1226:	96 95       	lsr	r25
    1228:	87 95       	ror	r24
    122a:	07 94       	ror	r0
    122c:	98 2f       	mov	r25, r24
    122e:	80 2d       	mov	r24, r0
    1230:	98 2f       	mov	r25, r24
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	89 2b       	or	r24, r25
    1236:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c4<<7);
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	96 95       	lsr	r25
    1240:	98 2f       	mov	r25, r24
    1242:	88 27       	eor	r24, r24
    1244:	97 95       	ror	r25
    1246:	87 95       	ror	r24
    1248:	98 2f       	mov	r25, r24
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	89 2b       	or	r24, r25
    124e:	8d 83       	std	Y+5, r24	; 0x05


	switch(temp){
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3b 87       	std	Y+11, r19	; 0x0b
    1258:	2a 87       	std	Y+10, r18	; 0x0a
    125a:	8a 85       	ldd	r24, Y+10	; 0x0a
    125c:	9b 85       	ldd	r25, Y+11	; 0x0b
    125e:	80 3b       	cpi	r24, 0xB0	; 176
    1260:	91 05       	cpc	r25, r1
    1262:	d9 f0       	breq	.+54     	; 0x129a <Keypad_u8GetKey+0x218>
    1264:	2a 85       	ldd	r18, Y+10	; 0x0a
    1266:	3b 85       	ldd	r19, Y+11	; 0x0b
    1268:	21 3b       	cpi	r18, 0xB1	; 177
    126a:	31 05       	cpc	r19, r1
    126c:	34 f4       	brge	.+12     	; 0x127a <Keypad_u8GetKey+0x1f8>
    126e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1270:	9b 85       	ldd	r25, Y+11	; 0x0b
    1272:	80 37       	cpi	r24, 0x70	; 112
    1274:	91 05       	cpc	r25, r1
    1276:	a1 f0       	breq	.+40     	; 0x12a0 <Keypad_u8GetKey+0x21e>
    1278:	16 c0       	rjmp	.+44     	; 0x12a6 <Keypad_u8GetKey+0x224>
    127a:	2a 85       	ldd	r18, Y+10	; 0x0a
    127c:	3b 85       	ldd	r19, Y+11	; 0x0b
    127e:	20 3d       	cpi	r18, 0xD0	; 208
    1280:	31 05       	cpc	r19, r1
    1282:	41 f0       	breq	.+16     	; 0x1294 <Keypad_u8GetKey+0x212>
    1284:	8a 85       	ldd	r24, Y+10	; 0x0a
    1286:	9b 85       	ldd	r25, Y+11	; 0x0b
    1288:	80 3e       	cpi	r24, 0xE0	; 224
    128a:	91 05       	cpc	r25, r1
    128c:	61 f4       	brne	.+24     	; 0x12a6 <Keypad_u8GetKey+0x224>
	case 0b11100000:
		return KEYPAD_u8R2C1_KEY;
    128e:	94 e0       	ldi	r25, 0x04	; 4
    1290:	9c 87       	std	Y+12, r25	; 0x0c
    1292:	12 c1       	rjmp	.+548    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b11010000:
		return KEYPAD_u8R2C2_KEY;
    1294:	25 e0       	ldi	r18, 0x05	; 5
    1296:	2c 87       	std	Y+12, r18	; 0x0c
    1298:	0f c1       	rjmp	.+542    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b10110000:
		return KEYPAD_u8R2C3_KEY;
    129a:	36 e0       	ldi	r19, 0x06	; 6
    129c:	3c 87       	std	Y+12, r19	; 0x0c
    129e:	0c c1       	rjmp	.+536    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b01110000:
		return KEYPAD_u8R2C4_KEY;
    12a0:	8d e2       	ldi	r24, 0x2D	; 45
    12a2:	8c 87       	std	Y+12, r24	; 0x0c
    12a4:	09 c1       	rjmp	.+530    	; 0x14b8 <Keypad_u8GetKey+0x436>
	}

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN,DIO_u8HIGH);
    12a6:	88 e1       	ldi	r24, 0x18	; 24
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN,DIO_u8HIGH);
    12ae:	89 e1       	ldi	r24, 0x19	; 25
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN,DIO_u8LOW);
    12b6:	8a e1       	ldi	r24, 0x1A	; 26
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN,DIO_u8HIGH);
    12be:	8b e1       	ldi	r24, 0x1B	; 27
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	//Masking to get values of input pins solely
	pin_c1= Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    12c6:	8c e1       	ldi	r24, 0x1C	; 28
    12c8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    12cc:	8c 83       	std	Y+4, r24	; 0x04
	pin_c2= Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    12ce:	8d e1       	ldi	r24, 0x1D	; 29
    12d0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    12d4:	8b 83       	std	Y+3, r24	; 0x03
	pin_c3= Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    12d6:	8e e1       	ldi	r24, 0x1E	; 30
    12d8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    12dc:	8a 83       	std	Y+2, r24	; 0x02
	pin_c4= Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    12de:	8f e1       	ldi	r24, 0x1F	; 31
    12e0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    12e4:	89 83       	std	Y+1, r24	; 0x01

	temp=0;
    12e6:	1d 82       	std	Y+5, r1	; 0x05
	temp|=(pin_c1<<4);
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	82 95       	swap	r24
    12f0:	92 95       	swap	r25
    12f2:	90 7f       	andi	r25, 0xF0	; 240
    12f4:	98 27       	eor	r25, r24
    12f6:	80 7f       	andi	r24, 0xF0	; 240
    12f8:	98 27       	eor	r25, r24
    12fa:	98 2f       	mov	r25, r24
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	89 2b       	or	r24, r25
    1300:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c2<<5);
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	82 95       	swap	r24
    130e:	92 95       	swap	r25
    1310:	90 7f       	andi	r25, 0xF0	; 240
    1312:	98 27       	eor	r25, r24
    1314:	80 7f       	andi	r24, 0xF0	; 240
    1316:	98 27       	eor	r25, r24
    1318:	98 2f       	mov	r25, r24
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	89 2b       	or	r24, r25
    131e:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c3<<6);
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	00 24       	eor	r0, r0
    1328:	96 95       	lsr	r25
    132a:	87 95       	ror	r24
    132c:	07 94       	ror	r0
    132e:	96 95       	lsr	r25
    1330:	87 95       	ror	r24
    1332:	07 94       	ror	r0
    1334:	98 2f       	mov	r25, r24
    1336:	80 2d       	mov	r24, r0
    1338:	98 2f       	mov	r25, r24
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	89 2b       	or	r24, r25
    133e:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c4<<7);
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	96 95       	lsr	r25
    1348:	98 2f       	mov	r25, r24
    134a:	88 27       	eor	r24, r24
    134c:	97 95       	ror	r25
    134e:	87 95       	ror	r24
    1350:	98 2f       	mov	r25, r24
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	89 2b       	or	r24, r25
    1356:	8d 83       	std	Y+5, r24	; 0x05

	switch(temp){
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	39 87       	std	Y+9, r19	; 0x09
    1360:	28 87       	std	Y+8, r18	; 0x08
    1362:	88 85       	ldd	r24, Y+8	; 0x08
    1364:	99 85       	ldd	r25, Y+9	; 0x09
    1366:	80 3b       	cpi	r24, 0xB0	; 176
    1368:	91 05       	cpc	r25, r1
    136a:	d9 f0       	breq	.+54     	; 0x13a2 <Keypad_u8GetKey+0x320>
    136c:	28 85       	ldd	r18, Y+8	; 0x08
    136e:	39 85       	ldd	r19, Y+9	; 0x09
    1370:	21 3b       	cpi	r18, 0xB1	; 177
    1372:	31 05       	cpc	r19, r1
    1374:	34 f4       	brge	.+12     	; 0x1382 <Keypad_u8GetKey+0x300>
    1376:	88 85       	ldd	r24, Y+8	; 0x08
    1378:	99 85       	ldd	r25, Y+9	; 0x09
    137a:	80 37       	cpi	r24, 0x70	; 112
    137c:	91 05       	cpc	r25, r1
    137e:	a1 f0       	breq	.+40     	; 0x13a8 <Keypad_u8GetKey+0x326>
    1380:	16 c0       	rjmp	.+44     	; 0x13ae <Keypad_u8GetKey+0x32c>
    1382:	28 85       	ldd	r18, Y+8	; 0x08
    1384:	39 85       	ldd	r19, Y+9	; 0x09
    1386:	20 3d       	cpi	r18, 0xD0	; 208
    1388:	31 05       	cpc	r19, r1
    138a:	41 f0       	breq	.+16     	; 0x139c <Keypad_u8GetKey+0x31a>
    138c:	88 85       	ldd	r24, Y+8	; 0x08
    138e:	99 85       	ldd	r25, Y+9	; 0x09
    1390:	80 3e       	cpi	r24, 0xE0	; 224
    1392:	91 05       	cpc	r25, r1
    1394:	61 f4       	brne	.+24     	; 0x13ae <Keypad_u8GetKey+0x32c>
	case 0b11100000:
		return KEYPAD_u8R3C1_KEY;
    1396:	97 e0       	ldi	r25, 0x07	; 7
    1398:	9c 87       	std	Y+12, r25	; 0x0c
    139a:	8e c0       	rjmp	.+284    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b11010000:
		return KEYPAD_u8R3C2_KEY;
    139c:	28 e0       	ldi	r18, 0x08	; 8
    139e:	2c 87       	std	Y+12, r18	; 0x0c
    13a0:	8b c0       	rjmp	.+278    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b10110000:
		return KEYPAD_u8R3C3_KEY;
    13a2:	39 e0       	ldi	r19, 0x09	; 9
    13a4:	3c 87       	std	Y+12, r19	; 0x0c
    13a6:	88 c0       	rjmp	.+272    	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b01110000:
		return KEYPAD_u8R3C4_KEY;
    13a8:	8a e2       	ldi	r24, 0x2A	; 42
    13aa:	8c 87       	std	Y+12, r24	; 0x0c
    13ac:	85 c0       	rjmp	.+266    	; 0x14b8 <Keypad_u8GetKey+0x436>
	}

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN,DIO_u8HIGH);
    13ae:	88 e1       	ldi	r24, 0x18	; 24
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN,DIO_u8HIGH);
    13b6:	89 e1       	ldi	r24, 0x19	; 25
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN,DIO_u8HIGH);
    13be:	8a e1       	ldi	r24, 0x1A	; 26
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN,DIO_u8LOW);
    13c6:	8b e1       	ldi	r24, 0x1B	; 27
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	//Masking to get values of input pins solely
	pin_c1= Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    13ce:	8c e1       	ldi	r24, 0x1C	; 28
    13d0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    13d4:	8c 83       	std	Y+4, r24	; 0x04
	pin_c2= Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    13d6:	8d e1       	ldi	r24, 0x1D	; 29
    13d8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    13dc:	8b 83       	std	Y+3, r24	; 0x03
	pin_c3= Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    13de:	8e e1       	ldi	r24, 0x1E	; 30
    13e0:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    13e4:	8a 83       	std	Y+2, r24	; 0x02
	pin_c4= Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    13e6:	8f e1       	ldi	r24, 0x1F	; 31
    13e8:	0e 94 79 07 	call	0xef2	; 0xef2 <Dio_u8GetPinVal>
    13ec:	89 83       	std	Y+1, r24	; 0x01

	temp=0;
    13ee:	1d 82       	std	Y+5, r1	; 0x05
	temp|=(pin_c1<<4);
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	82 95       	swap	r24
    13f8:	92 95       	swap	r25
    13fa:	90 7f       	andi	r25, 0xF0	; 240
    13fc:	98 27       	eor	r25, r24
    13fe:	80 7f       	andi	r24, 0xF0	; 240
    1400:	98 27       	eor	r25, r24
    1402:	98 2f       	mov	r25, r24
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	89 2b       	or	r24, r25
    1408:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c2<<5);
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	82 95       	swap	r24
    1416:	92 95       	swap	r25
    1418:	90 7f       	andi	r25, 0xF0	; 240
    141a:	98 27       	eor	r25, r24
    141c:	80 7f       	andi	r24, 0xF0	; 240
    141e:	98 27       	eor	r25, r24
    1420:	98 2f       	mov	r25, r24
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	89 2b       	or	r24, r25
    1426:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c3<<6);
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	00 24       	eor	r0, r0
    1430:	96 95       	lsr	r25
    1432:	87 95       	ror	r24
    1434:	07 94       	ror	r0
    1436:	96 95       	lsr	r25
    1438:	87 95       	ror	r24
    143a:	07 94       	ror	r0
    143c:	98 2f       	mov	r25, r24
    143e:	80 2d       	mov	r24, r0
    1440:	98 2f       	mov	r25, r24
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	89 2b       	or	r24, r25
    1446:	8d 83       	std	Y+5, r24	; 0x05
	temp|=(pin_c4<<7);
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	96 95       	lsr	r25
    1450:	98 2f       	mov	r25, r24
    1452:	88 27       	eor	r24, r24
    1454:	97 95       	ror	r25
    1456:	87 95       	ror	r24
    1458:	98 2f       	mov	r25, r24
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	89 2b       	or	r24, r25
    145e:	8d 83       	std	Y+5, r24	; 0x05

	switch(temp){
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3f 83       	std	Y+7, r19	; 0x07
    1468:	2e 83       	std	Y+6, r18	; 0x06
    146a:	8e 81       	ldd	r24, Y+6	; 0x06
    146c:	9f 81       	ldd	r25, Y+7	; 0x07
    146e:	80 3b       	cpi	r24, 0xB0	; 176
    1470:	91 05       	cpc	r25, r1
    1472:	d1 f0       	breq	.+52     	; 0x14a8 <Keypad_u8GetKey+0x426>
    1474:	2e 81       	ldd	r18, Y+6	; 0x06
    1476:	3f 81       	ldd	r19, Y+7	; 0x07
    1478:	21 3b       	cpi	r18, 0xB1	; 177
    147a:	31 05       	cpc	r19, r1
    147c:	34 f4       	brge	.+12     	; 0x148a <Keypad_u8GetKey+0x408>
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	80 37       	cpi	r24, 0x70	; 112
    1484:	91 05       	cpc	r25, r1
    1486:	99 f0       	breq	.+38     	; 0x14ae <Keypad_u8GetKey+0x42c>
    1488:	15 c0       	rjmp	.+42     	; 0x14b4 <Keypad_u8GetKey+0x432>
    148a:	2e 81       	ldd	r18, Y+6	; 0x06
    148c:	3f 81       	ldd	r19, Y+7	; 0x07
    148e:	20 3d       	cpi	r18, 0xD0	; 208
    1490:	31 05       	cpc	r19, r1
    1492:	41 f0       	breq	.+16     	; 0x14a4 <Keypad_u8GetKey+0x422>
    1494:	8e 81       	ldd	r24, Y+6	; 0x06
    1496:	9f 81       	ldd	r25, Y+7	; 0x07
    1498:	80 3e       	cpi	r24, 0xE0	; 224
    149a:	91 05       	cpc	r25, r1
    149c:	59 f4       	brne	.+22     	; 0x14b4 <Keypad_u8GetKey+0x432>
	case 0b11100000:
		return KEYPAD_u8R4C1_KEY;
    149e:	93 e2       	ldi	r25, 0x23	; 35
    14a0:	9c 87       	std	Y+12, r25	; 0x0c
    14a2:	0a c0       	rjmp	.+20     	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b11010000:
		return KEYPAD_u8R4C2_KEY;
    14a4:	1c 86       	std	Y+12, r1	; 0x0c
    14a6:	08 c0       	rjmp	.+16     	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b10110000:
		return KEYPAD_u8R4C3_KEY;
    14a8:	2d e3       	ldi	r18, 0x3D	; 61
    14aa:	2c 87       	std	Y+12, r18	; 0x0c
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <Keypad_u8GetKey+0x436>
	case 0b01110000:
		return KEYPAD_u8R4C4_KEY;
    14ae:	3f e2       	ldi	r19, 0x2F	; 47
    14b0:	3c 87       	std	Y+12, r19	; 0x0c
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <Keypad_u8GetKey+0x436>
	}
	return KEYPAD_u8NO_KEY;
    14b4:	8f ef       	ldi	r24, 0xFF	; 255
    14b6:	8c 87       	std	Y+12, r24	; 0x0c
    14b8:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    14ba:	2e 96       	adiw	r28, 0x0e	; 14
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <Lcd_vidSendCommand>:
#include"Dio_int.h"
#include"Lcd_cfg.h"
#include"Lcd_int.h"


void Lcd_vidSendCommand(u8 Cmd){
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	2f 97       	sbiw	r28, 0x0f	; 15
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	8f 87       	std	Y+15, r24	; 0x0f

	Dio_vidSetPinVal(LCD_u8RS_PIN,DIO_u8LOW);  //RS Pin cleared
    14e2:	88 e0       	ldi	r24, 0x08	; 8
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN,DIO_u8LOW);  //RW Pin cleared because we always wanna write
    14ea:	89 e0       	ldi	r24, 0x09	; 9
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Cmd,0));
    14f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f4:	98 2f       	mov	r25, r24
    14f6:	91 70       	andi	r25, 0x01	; 1
    14f8:	80 e1       	ldi	r24, 0x10	; 16
    14fa:	69 2f       	mov	r22, r25
    14fc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Cmd,1));
    1500:	8f 85       	ldd	r24, Y+15	; 0x0f
    1502:	86 95       	lsr	r24
    1504:	98 2f       	mov	r25, r24
    1506:	91 70       	andi	r25, 0x01	; 1
    1508:	81 e1       	ldi	r24, 0x11	; 17
    150a:	69 2f       	mov	r22, r25
    150c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Cmd,2));
    1510:	8f 85       	ldd	r24, Y+15	; 0x0f
    1512:	86 95       	lsr	r24
    1514:	86 95       	lsr	r24
    1516:	98 2f       	mov	r25, r24
    1518:	91 70       	andi	r25, 0x01	; 1
    151a:	82 e1       	ldi	r24, 0x12	; 18
    151c:	69 2f       	mov	r22, r25
    151e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Cmd,3));
    1522:	8f 85       	ldd	r24, Y+15	; 0x0f
    1524:	86 95       	lsr	r24
    1526:	86 95       	lsr	r24
    1528:	86 95       	lsr	r24
    152a:	98 2f       	mov	r25, r24
    152c:	91 70       	andi	r25, 0x01	; 1
    152e:	83 e1       	ldi	r24, 0x13	; 19
    1530:	69 2f       	mov	r22, r25
    1532:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Cmd,4));
    1536:	8f 85       	ldd	r24, Y+15	; 0x0f
    1538:	82 95       	swap	r24
    153a:	8f 70       	andi	r24, 0x0F	; 15
    153c:	98 2f       	mov	r25, r24
    153e:	91 70       	andi	r25, 0x01	; 1
    1540:	84 e1       	ldi	r24, 0x14	; 20
    1542:	69 2f       	mov	r22, r25
    1544:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Cmd,5));
    1548:	8f 85       	ldd	r24, Y+15	; 0x0f
    154a:	82 95       	swap	r24
    154c:	86 95       	lsr	r24
    154e:	87 70       	andi	r24, 0x07	; 7
    1550:	98 2f       	mov	r25, r24
    1552:	91 70       	andi	r25, 0x01	; 1
    1554:	85 e1       	ldi	r24, 0x15	; 21
    1556:	69 2f       	mov	r22, r25
    1558:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Cmd,6));
    155c:	8f 85       	ldd	r24, Y+15	; 0x0f
    155e:	82 95       	swap	r24
    1560:	86 95       	lsr	r24
    1562:	86 95       	lsr	r24
    1564:	83 70       	andi	r24, 0x03	; 3
    1566:	98 2f       	mov	r25, r24
    1568:	91 70       	andi	r25, 0x01	; 1
    156a:	86 e1       	ldi	r24, 0x16	; 22
    156c:	69 2f       	mov	r22, r25
    156e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Cmd,7));
    1572:	8f 85       	ldd	r24, Y+15	; 0x0f
    1574:	98 2f       	mov	r25, r24
    1576:	99 1f       	adc	r25, r25
    1578:	99 27       	eor	r25, r25
    157a:	99 1f       	adc	r25, r25
    157c:	87 e1       	ldi	r24, 0x17	; 23
    157e:	69 2f       	mov	r22, r25
    1580:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH); //EN
    1584:	8a e0       	ldi	r24, 0x0A	; 10
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	b0 e4       	ldi	r27, 0x40	; 64
    1594:	8b 87       	std	Y+11, r24	; 0x0b
    1596:	9c 87       	std	Y+12, r25	; 0x0c
    1598:	ad 87       	std	Y+13, r26	; 0x0d
    159a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159c:	6b 85       	ldd	r22, Y+11	; 0x0b
    159e:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a ef       	ldi	r20, 0xFA	; 250
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	8f 83       	std	Y+7, r24	; 0x07
    15b6:	98 87       	std	Y+8, r25	; 0x08
    15b8:	a9 87       	std	Y+9, r26	; 0x09
    15ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15bc:	6f 81       	ldd	r22, Y+7	; 0x07
    15be:	78 85       	ldd	r23, Y+8	; 0x08
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f e3       	ldi	r21, 0x3F	; 63
    15cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d0:	88 23       	and	r24, r24
    15d2:	2c f4       	brge	.+10     	; 0x15de <Lcd_vidSendCommand+0x112>
		__ticks = 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	3f c0       	rjmp	.+126    	; 0x165c <Lcd_vidSendCommand+0x190>
	else if (__tmp > 65535)
    15de:	6f 81       	ldd	r22, Y+7	; 0x07
    15e0:	78 85       	ldd	r23, Y+8	; 0x08
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	3f ef       	ldi	r19, 0xFF	; 255
    15ea:	4f e7       	ldi	r20, 0x7F	; 127
    15ec:	57 e4       	ldi	r21, 0x47	; 71
    15ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	4c f5       	brge	.+82     	; 0x1648 <Lcd_vidSendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e2       	ldi	r20, 0x20	; 32
    1604:	51 e4       	ldi	r21, 0x41	; 65
    1606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	0f c0       	rjmp	.+30     	; 0x163e <Lcd_vidSendCommand+0x172>
    1620:	88 ec       	ldi	r24, 0xC8	; 200
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <Lcd_vidSendCommand+0x160>
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	9e 81       	ldd	r25, Y+6	; 0x06
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	69 f7       	brne	.-38     	; 0x1620 <Lcd_vidSendCommand+0x154>
    1646:	14 c0       	rjmp	.+40     	; 0x1670 <Lcd_vidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1648:	6f 81       	ldd	r22, Y+7	; 0x07
    164a:	78 85       	ldd	r23, Y+8	; 0x08
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <Lcd_vidSendCommand+0x19c>
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW); //EN
    1670:	8a e0       	ldi	r24, 0x0A	; 10
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
}
    1678:	2f 96       	adiw	r28, 0x0f	; 15
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <Lcd_vidWriteChar>:

void Lcd_vidWriteChar(u8 Char){
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	2f 97       	sbiw	r28, 0x0f	; 15
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	8f 87       	std	Y+15, r24	; 0x0f
	Dio_vidSetPinVal(LCD_u8RS_PIN,DIO_u8HIGH);  //RS Pin set
    16a0:	88 e0       	ldi	r24, 0x08	; 8
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN,DIO_u8LOW);  //RW Pin cleared because we always wanna write
    16a8:	89 e0       	ldi	r24, 0x09	; 9
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Char,0));
    16b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b2:	98 2f       	mov	r25, r24
    16b4:	91 70       	andi	r25, 0x01	; 1
    16b6:	80 e1       	ldi	r24, 0x10	; 16
    16b8:	69 2f       	mov	r22, r25
    16ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Char,1));
    16be:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c0:	86 95       	lsr	r24
    16c2:	98 2f       	mov	r25, r24
    16c4:	91 70       	andi	r25, 0x01	; 1
    16c6:	81 e1       	ldi	r24, 0x11	; 17
    16c8:	69 2f       	mov	r22, r25
    16ca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Char,2));
    16ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d0:	86 95       	lsr	r24
    16d2:	86 95       	lsr	r24
    16d4:	98 2f       	mov	r25, r24
    16d6:	91 70       	andi	r25, 0x01	; 1
    16d8:	82 e1       	ldi	r24, 0x12	; 18
    16da:	69 2f       	mov	r22, r25
    16dc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Char,3));
    16e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e2:	86 95       	lsr	r24
    16e4:	86 95       	lsr	r24
    16e6:	86 95       	lsr	r24
    16e8:	98 2f       	mov	r25, r24
    16ea:	91 70       	andi	r25, 0x01	; 1
    16ec:	83 e1       	ldi	r24, 0x13	; 19
    16ee:	69 2f       	mov	r22, r25
    16f0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Char,4));
    16f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f6:	82 95       	swap	r24
    16f8:	8f 70       	andi	r24, 0x0F	; 15
    16fa:	98 2f       	mov	r25, r24
    16fc:	91 70       	andi	r25, 0x01	; 1
    16fe:	84 e1       	ldi	r24, 0x14	; 20
    1700:	69 2f       	mov	r22, r25
    1702:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Char,5));
    1706:	8f 85       	ldd	r24, Y+15	; 0x0f
    1708:	82 95       	swap	r24
    170a:	86 95       	lsr	r24
    170c:	87 70       	andi	r24, 0x07	; 7
    170e:	98 2f       	mov	r25, r24
    1710:	91 70       	andi	r25, 0x01	; 1
    1712:	85 e1       	ldi	r24, 0x15	; 21
    1714:	69 2f       	mov	r22, r25
    1716:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Char,6));
    171a:	8f 85       	ldd	r24, Y+15	; 0x0f
    171c:	82 95       	swap	r24
    171e:	86 95       	lsr	r24
    1720:	86 95       	lsr	r24
    1722:	83 70       	andi	r24, 0x03	; 3
    1724:	98 2f       	mov	r25, r24
    1726:	91 70       	andi	r25, 0x01	; 1
    1728:	86 e1       	ldi	r24, 0x16	; 22
    172a:	69 2f       	mov	r22, r25
    172c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Char,7));
    1730:	8f 85       	ldd	r24, Y+15	; 0x0f
    1732:	98 2f       	mov	r25, r24
    1734:	99 1f       	adc	r25, r25
    1736:	99 27       	eor	r25, r25
    1738:	99 1f       	adc	r25, r25
    173a:	87 e1       	ldi	r24, 0x17	; 23
    173c:	69 2f       	mov	r22, r25
    173e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH);   //EN
    1742:	8a e0       	ldi	r24, 0x0A	; 10
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e4       	ldi	r27, 0x40	; 64
    1752:	8b 87       	std	Y+11, r24	; 0x0b
    1754:	9c 87       	std	Y+12, r25	; 0x0c
    1756:	ad 87       	std	Y+13, r26	; 0x0d
    1758:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175a:	6b 85       	ldd	r22, Y+11	; 0x0b
    175c:	7c 85       	ldd	r23, Y+12	; 0x0c
    175e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1760:	9e 85       	ldd	r25, Y+14	; 0x0e
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	4a ef       	ldi	r20, 0xFA	; 250
    1768:	54 e4       	ldi	r21, 0x44	; 68
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	8f 83       	std	Y+7, r24	; 0x07
    1774:	98 87       	std	Y+8, r25	; 0x08
    1776:	a9 87       	std	Y+9, r26	; 0x09
    1778:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    177a:	6f 81       	ldd	r22, Y+7	; 0x07
    177c:	78 85       	ldd	r23, Y+8	; 0x08
    177e:	89 85       	ldd	r24, Y+9	; 0x09
    1780:	9a 85       	ldd	r25, Y+10	; 0x0a
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e8       	ldi	r20, 0x80	; 128
    1788:	5f e3       	ldi	r21, 0x3F	; 63
    178a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178e:	88 23       	and	r24, r24
    1790:	2c f4       	brge	.+10     	; 0x179c <Lcd_vidWriteChar+0x112>
		__ticks = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	3f c0       	rjmp	.+126    	; 0x181a <Lcd_vidWriteChar+0x190>
	else if (__tmp > 65535)
    179c:	6f 81       	ldd	r22, Y+7	; 0x07
    179e:	78 85       	ldd	r23, Y+8	; 0x08
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	3f ef       	ldi	r19, 0xFF	; 255
    17a8:	4f e7       	ldi	r20, 0x7F	; 127
    17aa:	57 e4       	ldi	r21, 0x47	; 71
    17ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	4c f5       	brge	.+82     	; 0x1806 <Lcd_vidWriteChar+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e2       	ldi	r20, 0x20	; 32
    17c2:	51 e4       	ldi	r21, 0x41	; 65
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <Lcd_vidWriteChar+0x172>
    17de:	88 ec       	ldi	r24, 0xC8	; 200
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9c 83       	std	Y+4, r25	; 0x04
    17e4:	8b 83       	std	Y+3, r24	; 0x03
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <Lcd_vidWriteChar+0x160>
    17ee:	9c 83       	std	Y+4, r25	; 0x04
    17f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	9e 81       	ldd	r25, Y+6	; 0x06
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	69 f7       	brne	.-38     	; 0x17de <Lcd_vidWriteChar+0x154>
    1804:	14 c0       	rjmp	.+40     	; 0x182e <Lcd_vidWriteChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <Lcd_vidWriteChar+0x19c>
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW);   //EN
    182e:	8a e0       	ldi	r24, 0x0A	; 10
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
}
    1836:	2f 96       	adiw	r28, 0x0f	; 15
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <Lcd_vidInit>:

void Lcd_vidInit(void){
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	aa 97       	sbiw	r28, 0x2a	; 42
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61

	Dio_vidSetPinDir(LCD_u8RS_PIN,DIO_u8OUTPUT);
    185c:	88 e0       	ldi	r24, 0x08	; 8
    185e:	61 e0       	ldi	r22, 0x01	; 1
    1860:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8RW_PIN,DIO_u8OUTPUT);
    1864:	89 e0       	ldi	r24, 0x09	; 9
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8EN_PIN,DIO_u8OUTPUT);
    186c:	8a e0       	ldi	r24, 0x0A	; 10
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	Dio_vidSetPinDir(LCD_u8D0_PIN,DIO_u8OUTPUT);
    1874:	80 e1       	ldi	r24, 0x10	; 16
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D1_PIN,DIO_u8OUTPUT);
    187c:	81 e1       	ldi	r24, 0x11	; 17
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D2_PIN,DIO_u8OUTPUT);
    1884:	82 e1       	ldi	r24, 0x12	; 18
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D3_PIN,DIO_u8OUTPUT);
    188c:	83 e1       	ldi	r24, 0x13	; 19
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D4_PIN,DIO_u8OUTPUT);
    1894:	84 e1       	ldi	r24, 0x14	; 20
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D5_PIN,DIO_u8OUTPUT);
    189c:	85 e1       	ldi	r24, 0x15	; 21
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D6_PIN,DIO_u8OUTPUT);
    18a4:	86 e1       	ldi	r24, 0x16	; 22
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D7_PIN,DIO_u8OUTPUT);
    18ac:	87 e1       	ldi	r24, 0x17	; 23
    18ae:	61 e0       	ldi	r22, 0x01	; 1
    18b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>




	Lcd_vidSendCommand(LCD_u8_CMD_8_BIT_2x16_5x7); 	 //Function Set 8bit 2 line 5x7
    18b4:	88 e3       	ldi	r24, 0x38	; 56
    18b6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e0       	ldi	r26, 0x00	; 0
    18c0:	b0 e4       	ldi	r27, 0x40	; 64
    18c2:	8f a3       	std	Y+39, r24	; 0x27
    18c4:	98 a7       	std	Y+40, r25	; 0x28
    18c6:	a9 a7       	std	Y+41, r26	; 0x29
    18c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ca:	6f a1       	ldd	r22, Y+39	; 0x27
    18cc:	78 a5       	ldd	r23, Y+40	; 0x28
    18ce:	89 a5       	ldd	r24, Y+41	; 0x29
    18d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	4a ef       	ldi	r20, 0xFA	; 250
    18d8:	54 e4       	ldi	r21, 0x44	; 68
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	8b a3       	std	Y+35, r24	; 0x23
    18e4:	9c a3       	std	Y+36, r25	; 0x24
    18e6:	ad a3       	std	Y+37, r26	; 0x25
    18e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ea:	6b a1       	ldd	r22, Y+35	; 0x23
    18ec:	7c a1       	ldd	r23, Y+36	; 0x24
    18ee:	8d a1       	ldd	r24, Y+37	; 0x25
    18f0:	9e a1       	ldd	r25, Y+38	; 0x26
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	2c f4       	brge	.+10     	; 0x190c <Lcd_vidInit+0xc4>
		__ticks = 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	9a a3       	std	Y+34, r25	; 0x22
    1908:	89 a3       	std	Y+33, r24	; 0x21
    190a:	3f c0       	rjmp	.+126    	; 0x198a <Lcd_vidInit+0x142>
	else if (__tmp > 65535)
    190c:	6b a1       	ldd	r22, Y+35	; 0x23
    190e:	7c a1       	ldd	r23, Y+36	; 0x24
    1910:	8d a1       	ldd	r24, Y+37	; 0x25
    1912:	9e a1       	ldd	r25, Y+38	; 0x26
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	3f ef       	ldi	r19, 0xFF	; 255
    1918:	4f e7       	ldi	r20, 0x7F	; 127
    191a:	57 e4       	ldi	r21, 0x47	; 71
    191c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1920:	18 16       	cp	r1, r24
    1922:	4c f5       	brge	.+82     	; 0x1976 <Lcd_vidInit+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1924:	6f a1       	ldd	r22, Y+39	; 0x27
    1926:	78 a5       	ldd	r23, Y+40	; 0x28
    1928:	89 a5       	ldd	r24, Y+41	; 0x29
    192a:	9a a5       	ldd	r25, Y+42	; 0x2a
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e2       	ldi	r20, 0x20	; 32
    1932:	51 e4       	ldi	r21, 0x41	; 65
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	9a a3       	std	Y+34, r25	; 0x22
    194a:	89 a3       	std	Y+33, r24	; 0x21
    194c:	0f c0       	rjmp	.+30     	; 0x196c <Lcd_vidInit+0x124>
    194e:	88 ec       	ldi	r24, 0xC8	; 200
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	98 a3       	std	Y+32, r25	; 0x20
    1954:	8f 8f       	std	Y+31, r24	; 0x1f
    1956:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1958:	98 a1       	ldd	r25, Y+32	; 0x20
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <Lcd_vidInit+0x112>
    195e:	98 a3       	std	Y+32, r25	; 0x20
    1960:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1962:	89 a1       	ldd	r24, Y+33	; 0x21
    1964:	9a a1       	ldd	r25, Y+34	; 0x22
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	9a a3       	std	Y+34, r25	; 0x22
    196a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196c:	89 a1       	ldd	r24, Y+33	; 0x21
    196e:	9a a1       	ldd	r25, Y+34	; 0x22
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	69 f7       	brne	.-38     	; 0x194e <Lcd_vidInit+0x106>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <Lcd_vidInit+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1976:	6b a1       	ldd	r22, Y+35	; 0x23
    1978:	7c a1       	ldd	r23, Y+36	; 0x24
    197a:	8d a1       	ldd	r24, Y+37	; 0x25
    197c:	9e a1       	ldd	r25, Y+38	; 0x26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9a a3       	std	Y+34, r25	; 0x22
    1988:	89 a3       	std	Y+33, r24	; 0x21
    198a:	89 a1       	ldd	r24, Y+33	; 0x21
    198c:	9a a1       	ldd	r25, Y+34	; 0x22
    198e:	9e 8f       	std	Y+30, r25	; 0x1e
    1990:	8d 8f       	std	Y+29, r24	; 0x1d
    1992:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1994:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <Lcd_vidInit+0x14e>
    199a:	9e 8f       	std	Y+30, r25	; 0x1e
    199c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8_CMD_DISP_ON_CURS_OFF); 	//Display ON Cursor OFF
    199e:	8c e0       	ldi	r24, 0x0C	; 12
    19a0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a0 e0       	ldi	r26, 0x00	; 0
    19aa:	b0 e4       	ldi	r27, 0x40	; 64
    19ac:	89 8f       	std	Y+25, r24	; 0x19
    19ae:	9a 8f       	std	Y+26, r25	; 0x1a
    19b0:	ab 8f       	std	Y+27, r26	; 0x1b
    19b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b4:	69 8d       	ldd	r22, Y+25	; 0x19
    19b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	4a ef       	ldi	r20, 0xFA	; 250
    19c2:	54 e4       	ldi	r21, 0x44	; 68
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	8d 8b       	std	Y+21, r24	; 0x15
    19ce:	9e 8b       	std	Y+22, r25	; 0x16
    19d0:	af 8b       	std	Y+23, r26	; 0x17
    19d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d4:	6d 89       	ldd	r22, Y+21	; 0x15
    19d6:	7e 89       	ldd	r23, Y+22	; 0x16
    19d8:	8f 89       	ldd	r24, Y+23	; 0x17
    19da:	98 8d       	ldd	r25, Y+24	; 0x18
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e8       	ldi	r20, 0x80	; 128
    19e2:	5f e3       	ldi	r21, 0x3F	; 63
    19e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e8:	88 23       	and	r24, r24
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <Lcd_vidInit+0x1ae>
		__ticks = 1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9c 8b       	std	Y+20, r25	; 0x14
    19f2:	8b 8b       	std	Y+19, r24	; 0x13
    19f4:	3f c0       	rjmp	.+126    	; 0x1a74 <Lcd_vidInit+0x22c>
	else if (__tmp > 65535)
    19f6:	6d 89       	ldd	r22, Y+21	; 0x15
    19f8:	7e 89       	ldd	r23, Y+22	; 0x16
    19fa:	8f 89       	ldd	r24, Y+23	; 0x17
    19fc:	98 8d       	ldd	r25, Y+24	; 0x18
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	3f ef       	ldi	r19, 0xFF	; 255
    1a02:	4f e7       	ldi	r20, 0x7F	; 127
    1a04:	57 e4       	ldi	r21, 0x47	; 71
    1a06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a0a:	18 16       	cp	r1, r24
    1a0c:	4c f5       	brge	.+82     	; 0x1a60 <Lcd_vidInit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e2       	ldi	r20, 0x20	; 32
    1a1c:	51 e4       	ldi	r21, 0x41	; 65
    1a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	bc 01       	movw	r22, r24
    1a28:	cd 01       	movw	r24, r26
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9c 8b       	std	Y+20, r25	; 0x14
    1a34:	8b 8b       	std	Y+19, r24	; 0x13
    1a36:	0f c0       	rjmp	.+30     	; 0x1a56 <Lcd_vidInit+0x20e>
    1a38:	88 ec       	ldi	r24, 0xC8	; 200
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9a 8b       	std	Y+18, r25	; 0x12
    1a3e:	89 8b       	std	Y+17, r24	; 0x11
    1a40:	89 89       	ldd	r24, Y+17	; 0x11
    1a42:	9a 89       	ldd	r25, Y+18	; 0x12
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <Lcd_vidInit+0x1fc>
    1a48:	9a 8b       	std	Y+18, r25	; 0x12
    1a4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	9c 8b       	std	Y+20, r25	; 0x14
    1a54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a56:	8b 89       	ldd	r24, Y+19	; 0x13
    1a58:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	69 f7       	brne	.-38     	; 0x1a38 <Lcd_vidInit+0x1f0>
    1a5e:	14 c0       	rjmp	.+40     	; 0x1a88 <Lcd_vidInit+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a60:	6d 89       	ldd	r22, Y+21	; 0x15
    1a62:	7e 89       	ldd	r23, Y+22	; 0x16
    1a64:	8f 89       	ldd	r24, Y+23	; 0x17
    1a66:	98 8d       	ldd	r25, Y+24	; 0x18
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9c 8b       	std	Y+20, r25	; 0x14
    1a72:	8b 8b       	std	Y+19, r24	; 0x13
    1a74:	8b 89       	ldd	r24, Y+19	; 0x13
    1a76:	9c 89       	ldd	r25, Y+20	; 0x14
    1a78:	98 8b       	std	Y+16, r25	; 0x10
    1a7a:	8f 87       	std	Y+15, r24	; 0x0f
    1a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7e:	98 89       	ldd	r25, Y+16	; 0x10
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <Lcd_vidInit+0x238>
    1a84:	98 8b       	std	Y+16, r25	; 0x10
    1a86:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8_CMD_CLR_DISPLAY);	//Clear Display
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 e0       	ldi	r26, 0x00	; 0
    1a94:	b0 e4       	ldi	r27, 0x40	; 64
    1a96:	8b 87       	std	Y+11, r24	; 0x0b
    1a98:	9c 87       	std	Y+12, r25	; 0x0c
    1a9a:	ad 87       	std	Y+13, r26	; 0x0d
    1a9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a ef       	ldi	r20, 0xFA	; 250
    1aac:	54 e4       	ldi	r21, 0x44	; 68
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8f 83       	std	Y+7, r24	; 0x07
    1ab8:	98 87       	std	Y+8, r25	; 0x08
    1aba:	a9 87       	std	Y+9, r26	; 0x09
    1abc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <Lcd_vidInit+0x298>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <Lcd_vidInit+0x316>
	else if (__tmp > 65535)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <Lcd_vidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <Lcd_vidInit+0x2f8>
    1b22:	88 ec       	ldi	r24, 0xC8	; 200
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <Lcd_vidInit+0x2e6>
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <Lcd_vidInit+0x2da>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <Lcd_vidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <Lcd_vidInit+0x322>
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1b72:	aa 96       	adiw	r28, 0x2a	; 42
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <Lcd_MoveCursor>:

void Lcd_MoveCursor(u8 Pos){
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <Lcd_MoveCursor+0x6>
    1b8a:	0f 92       	push	r0
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0; i<Pos; i++){
    1b92:	1a 82       	std	Y+2, r1	; 0x02
    1b94:	19 82       	std	Y+1, r1	; 0x01
    1b96:	08 c0       	rjmp	.+16     	; 0x1ba8 <Lcd_MoveCursor+0x24>
		Lcd_vidSendCommand(16);
    1b98:	80 e1       	ldi	r24, 0x10	; 16
    1b9a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
	Lcd_vidSendCommand(LCD_u8_CMD_CLR_DISPLAY);	//Clear Display
	_delay_ms(2);
}

void Lcd_MoveCursor(u8 Pos){
	for(int i=0; i<Pos; i++){
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	82 17       	cp	r24, r18
    1bb4:	93 07       	cpc	r25, r19
    1bb6:	84 f3       	brlt	.-32     	; 0x1b98 <Lcd_MoveCursor+0x14>
		Lcd_vidSendCommand(16);
	}
}
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <main>:
#define F_CPU 8000000
#include<util/delay.h>
//u8 arr[10]={0b1000000,0b1111001,0b0100100,0b0110000,0b0011001,0b0010010,0b0000010,0b1011000,0b0000000,0b0010000};

u8 key,key1,key2,operand1,operand2,operator,result;
int main(void){
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	cc 58       	subi	r28, 0x8C	; 140
    1bd2:	d1 40       	sbci	r29, 0x01	; 1
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
	operator=0x81;
    1bde:	81 e8       	ldi	r24, 0x81	; 129
    1be0:	80 93 6e 00 	sts	0x006E, r24
	Lcd_vidInit();
    1be4:	0e 94 24 0c 	call	0x1848	; 0x1848 <Lcd_vidInit>
	Keypad_vidInit();
    1be8:	0e 94 fa 07 	call	0xff4	; 0xff4 <Keypad_vidInit>
	while(1){
	key=Keypad_u8GetKey();
    1bec:	0e 94 41 08 	call	0x1082	; 0x1082 <Keypad_u8GetKey>
    1bf0:	80 93 6a 00 	sts	0x006A, r24
	if(key!=0xFF){
    1bf4:	80 91 6a 00 	lds	r24, 0x006A
    1bf8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bfa:	11 f4       	brne	.+4      	; 0x1c00 <main+0x3c>
    1bfc:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <main+0x11c0>
	switch(key){
    1c00:	80 91 6a 00 	lds	r24, 0x006A
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	c5 57       	subi	r28, 0x75	; 117
    1c0a:	de 4f       	sbci	r29, 0xFE	; 254
    1c0c:	39 83       	std	Y+1, r19	; 0x01
    1c0e:	28 83       	st	Y, r18
    1c10:	cb 58       	subi	r28, 0x8B	; 139
    1c12:	d1 40       	sbci	r29, 0x01	; 1
    1c14:	c5 57       	subi	r28, 0x75	; 117
    1c16:	de 4f       	sbci	r29, 0xFE	; 254
    1c18:	88 81       	ld	r24, Y
    1c1a:	99 81       	ldd	r25, Y+1	; 0x01
    1c1c:	cb 58       	subi	r28, 0x8B	; 139
    1c1e:	d1 40       	sbci	r29, 0x01	; 1
    1c20:	84 30       	cpi	r24, 0x04	; 4
    1c22:	91 05       	cpc	r25, r1
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <main+0x64>
    1c26:	7b c3       	rjmp	.+1782   	; 0x231e <main+0x75a>
    1c28:	c5 57       	subi	r28, 0x75	; 117
    1c2a:	de 4f       	sbci	r29, 0xFE	; 254
    1c2c:	e8 81       	ld	r30, Y
    1c2e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c30:	cb 58       	subi	r28, 0x8B	; 139
    1c32:	d1 40       	sbci	r29, 0x01	; 1
    1c34:	e5 30       	cpi	r30, 0x05	; 5
    1c36:	f1 05       	cpc	r31, r1
    1c38:	a4 f5       	brge	.+104    	; 0x1ca2 <main+0xde>
    1c3a:	c5 57       	subi	r28, 0x75	; 117
    1c3c:	de 4f       	sbci	r29, 0xFE	; 254
    1c3e:	28 81       	ld	r18, Y
    1c40:	39 81       	ldd	r19, Y+1	; 0x01
    1c42:	cb 58       	subi	r28, 0x8B	; 139
    1c44:	d1 40       	sbci	r29, 0x01	; 1
    1c46:	21 30       	cpi	r18, 0x01	; 1
    1c48:	31 05       	cpc	r19, r1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <main+0x8a>
    1c4c:	28 c1       	rjmp	.+592    	; 0x1e9e <main+0x2da>
    1c4e:	c5 57       	subi	r28, 0x75	; 117
    1c50:	de 4f       	sbci	r29, 0xFE	; 254
    1c52:	88 81       	ld	r24, Y
    1c54:	99 81       	ldd	r25, Y+1	; 0x01
    1c56:	cb 58       	subi	r28, 0x8B	; 139
    1c58:	d1 40       	sbci	r29, 0x01	; 1
    1c5a:	82 30       	cpi	r24, 0x02	; 2
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	5c f4       	brge	.+22     	; 0x1c76 <main+0xb2>
    1c60:	c5 57       	subi	r28, 0x75	; 117
    1c62:	de 4f       	sbci	r29, 0xFE	; 254
    1c64:	e8 81       	ld	r30, Y
    1c66:	f9 81       	ldd	r31, Y+1	; 0x01
    1c68:	cb 58       	subi	r28, 0x8B	; 139
    1c6a:	d1 40       	sbci	r29, 0x01	; 1
    1c6c:	30 97       	sbiw	r30, 0x00	; 0
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <main+0xae>
    1c70:	57 c0       	rjmp	.+174    	; 0x1d20 <main+0x15c>
    1c72:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <main+0x1056>
    1c76:	c5 57       	subi	r28, 0x75	; 117
    1c78:	de 4f       	sbci	r29, 0xFE	; 254
    1c7a:	28 81       	ld	r18, Y
    1c7c:	39 81       	ldd	r19, Y+1	; 0x01
    1c7e:	cb 58       	subi	r28, 0x8B	; 139
    1c80:	d1 40       	sbci	r29, 0x01	; 1
    1c82:	22 30       	cpi	r18, 0x02	; 2
    1c84:	31 05       	cpc	r19, r1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <main+0xc6>
    1c88:	ca c1       	rjmp	.+916    	; 0x201e <main+0x45a>
    1c8a:	c5 57       	subi	r28, 0x75	; 117
    1c8c:	de 4f       	sbci	r29, 0xFE	; 254
    1c8e:	88 81       	ld	r24, Y
    1c90:	99 81       	ldd	r25, Y+1	; 0x01
    1c92:	cb 58       	subi	r28, 0x8B	; 139
    1c94:	d1 40       	sbci	r29, 0x01	; 1
    1c96:	83 30       	cpi	r24, 0x03	; 3
    1c98:	91 05       	cpc	r25, r1
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <main+0xda>
    1c9c:	80 c2       	rjmp	.+1280   	; 0x219e <main+0x5da>
    1c9e:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <main+0x1056>
    1ca2:	c5 57       	subi	r28, 0x75	; 117
    1ca4:	de 4f       	sbci	r29, 0xFE	; 254
    1ca6:	e8 81       	ld	r30, Y
    1ca8:	f9 81       	ldd	r31, Y+1	; 0x01
    1caa:	cb 58       	subi	r28, 0x8B	; 139
    1cac:	d1 40       	sbci	r29, 0x01	; 1
    1cae:	e7 30       	cpi	r30, 0x07	; 7
    1cb0:	f1 05       	cpc	r31, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <main+0xf2>
    1cb4:	74 c5       	rjmp	.+2792   	; 0x279e <main+0xbda>
    1cb6:	c5 57       	subi	r28, 0x75	; 117
    1cb8:	de 4f       	sbci	r29, 0xFE	; 254
    1cba:	28 81       	ld	r18, Y
    1cbc:	39 81       	ldd	r19, Y+1	; 0x01
    1cbe:	cb 58       	subi	r28, 0x8B	; 139
    1cc0:	d1 40       	sbci	r29, 0x01	; 1
    1cc2:	28 30       	cpi	r18, 0x08	; 8
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	b4 f4       	brge	.+44     	; 0x1cf4 <main+0x130>
    1cc8:	c5 57       	subi	r28, 0x75	; 117
    1cca:	de 4f       	sbci	r29, 0xFE	; 254
    1ccc:	88 81       	ld	r24, Y
    1cce:	99 81       	ldd	r25, Y+1	; 0x01
    1cd0:	cb 58       	subi	r28, 0x8B	; 139
    1cd2:	d1 40       	sbci	r29, 0x01	; 1
    1cd4:	85 30       	cpi	r24, 0x05	; 5
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <main+0x118>
    1cda:	e1 c3       	rjmp	.+1986   	; 0x249e <main+0x8da>
    1cdc:	c5 57       	subi	r28, 0x75	; 117
    1cde:	de 4f       	sbci	r29, 0xFE	; 254
    1ce0:	e8 81       	ld	r30, Y
    1ce2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ce4:	cb 58       	subi	r28, 0x8B	; 139
    1ce6:	d1 40       	sbci	r29, 0x01	; 1
    1ce8:	e6 30       	cpi	r30, 0x06	; 6
    1cea:	f1 05       	cpc	r31, r1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <main+0x12c>
    1cee:	97 c4       	rjmp	.+2350   	; 0x261e <main+0xa5a>
    1cf0:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <main+0x1056>
    1cf4:	c5 57       	subi	r28, 0x75	; 117
    1cf6:	de 4f       	sbci	r29, 0xFE	; 254
    1cf8:	28 81       	ld	r18, Y
    1cfa:	39 81       	ldd	r19, Y+1	; 0x01
    1cfc:	cb 58       	subi	r28, 0x8B	; 139
    1cfe:	d1 40       	sbci	r29, 0x01	; 1
    1d00:	28 30       	cpi	r18, 0x08	; 8
    1d02:	31 05       	cpc	r19, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <main+0x144>
    1d06:	0b c6       	rjmp	.+3094   	; 0x291e <main+0xd5a>
    1d08:	c5 57       	subi	r28, 0x75	; 117
    1d0a:	de 4f       	sbci	r29, 0xFE	; 254
    1d0c:	88 81       	ld	r24, Y
    1d0e:	99 81       	ldd	r25, Y+1	; 0x01
    1d10:	cb 58       	subi	r28, 0x8B	; 139
    1d12:	d1 40       	sbci	r29, 0x01	; 1
    1d14:	89 30       	cpi	r24, 0x09	; 9
    1d16:	91 05       	cpc	r25, r1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <main+0x158>
    1d1a:	c1 c6       	rjmp	.+3458   	; 0x2a9e <main+0xeda>
    1d1c:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <main+0x1056>
	case 0:
		Lcd_vidSendCommand(0x80);
    1d20:	80 e8       	ldi	r24, 0x80	; 128
    1d22:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('0');
    1d26:	80 e3       	ldi	r24, 0x30	; 48
    1d28:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	eb 57       	subi	r30, 0x7B	; 123
    1d30:	fe 4f       	sbci	r31, 0xFE	; 254
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	aa ef       	ldi	r26, 0xFA	; 250
    1d38:	b3 e4       	ldi	r27, 0x43	; 67
    1d3a:	80 83       	st	Z, r24
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	a2 83       	std	Z+2, r26	; 0x02
    1d40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d42:	8e 01       	movw	r16, r28
    1d44:	0f 57       	subi	r16, 0x7F	; 127
    1d46:	1e 4f       	sbci	r17, 0xFE	; 254
    1d48:	fe 01       	movw	r30, r28
    1d4a:	eb 57       	subi	r30, 0x7B	; 123
    1d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a ef       	ldi	r20, 0xFA	; 250
    1d5c:	54 e4       	ldi	r21, 0x44	; 68
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	f8 01       	movw	r30, r16
    1d68:	80 83       	st	Z, r24
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	a2 83       	std	Z+2, r26	; 0x02
    1d6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d70:	fe 01       	movw	r30, r28
    1d72:	ef 57       	subi	r30, 0x7F	; 127
    1d74:	fe 4f       	sbci	r31, 0xFE	; 254
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5f e3       	ldi	r21, 0x3F	; 63
    1d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8a:	88 23       	and	r24, r24
    1d8c:	44 f4       	brge	.+16     	; 0x1d9e <main+0x1da>
		__ticks = 1;
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e1 58       	subi	r30, 0x81	; 129
    1d92:	fe 4f       	sbci	r31, 0xFE	; 254
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	64 c0       	rjmp	.+200    	; 0x1e66 <main+0x2a2>
	else if (__tmp > 65535)
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ef 57       	subi	r30, 0x7F	; 127
    1da2:	fe 4f       	sbci	r31, 0xFE	; 254
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	0c f0       	brlt	.+2      	; 0x1dbe <main+0x1fa>
    1dbc:	43 c0       	rjmp	.+134    	; 0x1e44 <main+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	eb 57       	subi	r30, 0x7B	; 123
    1dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8e 01       	movw	r16, r28
    1dde:	01 58       	subi	r16, 0x81	; 129
    1de0:	1e 4f       	sbci	r17, 0xFE	; 254
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	f8 01       	movw	r30, r16
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	80 83       	st	Z, r24
    1df4:	1f c0       	rjmp	.+62     	; 0x1e34 <main+0x270>
    1df6:	fe 01       	movw	r30, r28
    1df8:	e3 58       	subi	r30, 0x83	; 131
    1dfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	80 83       	st	Z, r24
    1e04:	fe 01       	movw	r30, r28
    1e06:	e3 58       	subi	r30, 0x83	; 131
    1e08:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <main+0x24a>
    1e12:	fe 01       	movw	r30, r28
    1e14:	e3 58       	subi	r30, 0x83	; 131
    1e16:	fe 4f       	sbci	r31, 0xFE	; 254
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1c:	de 01       	movw	r26, r28
    1e1e:	a1 58       	subi	r26, 0x81	; 129
    1e20:	be 4f       	sbci	r27, 0xFE	; 254
    1e22:	fe 01       	movw	r30, r28
    1e24:	e1 58       	subi	r30, 0x81	; 129
    1e26:	fe 4f       	sbci	r31, 0xFE	; 254
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	11 96       	adiw	r26, 0x01	; 1
    1e30:	9c 93       	st	X, r25
    1e32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	fe 01       	movw	r30, r28
    1e36:	e1 58       	subi	r30, 0x81	; 129
    1e38:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	d1 f6       	brne	.-76     	; 0x1df6 <main+0x232>
    1e42:	28 c0       	rjmp	.+80     	; 0x1e94 <main+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e44:	8e 01       	movw	r16, r28
    1e46:	01 58       	subi	r16, 0x81	; 129
    1e48:	1e 4f       	sbci	r17, 0xFE	; 254
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ef 57       	subi	r30, 0x7F	; 127
    1e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	f8 01       	movw	r30, r16
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	80 83       	st	Z, r24
    1e66:	de 01       	movw	r26, r28
    1e68:	a5 58       	subi	r26, 0x85	; 133
    1e6a:	be 4f       	sbci	r27, 0xFE	; 254
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e1 58       	subi	r30, 0x81	; 129
    1e70:	fe 4f       	sbci	r31, 0xFE	; 254
    1e72:	80 81       	ld	r24, Z
    1e74:	91 81       	ldd	r25, Z+1	; 0x01
    1e76:	11 96       	adiw	r26, 0x01	; 1
    1e78:	9c 93       	st	X, r25
    1e7a:	8e 93       	st	-X, r24
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e5 58       	subi	r30, 0x85	; 133
    1e80:	fe 4f       	sbci	r31, 0xFE	; 254
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <main+0x2c2>
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e5 58       	subi	r30, 0x85	; 133
    1e8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e90:	91 83       	std	Z+1, r25	; 0x01
    1e92:	80 83       	st	Z, r24
		_delay_ms(500);
		operand1=0;
    1e94:	10 92 6b 00 	sts	0x006B, r1
		key=0;
    1e98:	10 92 6a 00 	sts	0x006A, r1
    1e9c:	be c6       	rjmp	.+3452   	; 0x2c1a <main+0x1056>
		break;
	case 1:
		Lcd_vidSendCommand(0x80);
    1e9e:	80 e8       	ldi	r24, 0x80	; 128
    1ea0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('1');
    1ea4:	81 e3       	ldi	r24, 0x31	; 49
    1ea6:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e9 58       	subi	r30, 0x89	; 137
    1eae:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	aa ef       	ldi	r26, 0xFA	; 250
    1eb6:	b3 e4       	ldi	r27, 0x43	; 67
    1eb8:	80 83       	st	Z, r24
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	a2 83       	std	Z+2, r26	; 0x02
    1ebe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	8e 01       	movw	r16, r28
    1ec2:	0d 58       	subi	r16, 0x8D	; 141
    1ec4:	1e 4f       	sbci	r17, 0xFE	; 254
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e9 58       	subi	r30, 0x89	; 137
    1eca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4a ef       	ldi	r20, 0xFA	; 250
    1eda:	54 e4       	ldi	r21, 0x44	; 68
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	80 83       	st	Z, r24
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	a2 83       	std	Z+2, r26	; 0x02
    1eec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ed 58       	subi	r30, 0x8D	; 141
    1ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	44 f4       	brge	.+16     	; 0x1f1c <main+0x358>
		__ticks = 1;
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ef 58       	subi	r30, 0x8F	; 143
    1f10:	fe 4f       	sbci	r31, 0xFE	; 254
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
    1f1a:	64 c0       	rjmp	.+200    	; 0x1fe4 <main+0x420>
	else if (__tmp > 65535)
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	ed 58       	subi	r30, 0x8D	; 141
    1f20:	fe 4f       	sbci	r31, 0xFE	; 254
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	3f ef       	ldi	r19, 0xFF	; 255
    1f2e:	4f e7       	ldi	r20, 0x7F	; 127
    1f30:	57 e4       	ldi	r21, 0x47	; 71
    1f32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f36:	18 16       	cp	r1, r24
    1f38:	0c f0       	brlt	.+2      	; 0x1f3c <main+0x378>
    1f3a:	43 c0       	rjmp	.+134    	; 0x1fc2 <main+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e9 58       	subi	r30, 0x89	; 137
    1f40:	fe 4f       	sbci	r31, 0xFE	; 254
    1f42:	60 81       	ld	r22, Z
    1f44:	71 81       	ldd	r23, Z+1	; 0x01
    1f46:	82 81       	ldd	r24, Z+2	; 0x02
    1f48:	93 81       	ldd	r25, Z+3	; 0x03
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	8e 01       	movw	r16, r28
    1f5c:	0f 58       	subi	r16, 0x8F	; 143
    1f5e:	1e 4f       	sbci	r17, 0xFE	; 254
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	80 83       	st	Z, r24
    1f72:	1f c0       	rjmp	.+62     	; 0x1fb2 <main+0x3ee>
    1f74:	fe 01       	movw	r30, r28
    1f76:	e1 59       	subi	r30, 0x91	; 145
    1f78:	fe 4f       	sbci	r31, 0xFE	; 254
    1f7a:	88 ec       	ldi	r24, 0xC8	; 200
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
    1f82:	fe 01       	movw	r30, r28
    1f84:	e1 59       	subi	r30, 0x91	; 145
    1f86:	fe 4f       	sbci	r31, 0xFE	; 254
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <main+0x3c8>
    1f90:	fe 01       	movw	r30, r28
    1f92:	e1 59       	subi	r30, 0x91	; 145
    1f94:	fe 4f       	sbci	r31, 0xFE	; 254
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	de 01       	movw	r26, r28
    1f9c:	af 58       	subi	r26, 0x8F	; 143
    1f9e:	be 4f       	sbci	r27, 0xFE	; 254
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ef 58       	subi	r30, 0x8F	; 143
    1fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	11 96       	adiw	r26, 0x01	; 1
    1fae:	9c 93       	st	X, r25
    1fb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	ef 58       	subi	r30, 0x8F	; 143
    1fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	d1 f6       	brne	.-76     	; 0x1f74 <main+0x3b0>
    1fc0:	28 c0       	rjmp	.+80     	; 0x2012 <main+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	8e 01       	movw	r16, r28
    1fc4:	0f 58       	subi	r16, 0x8F	; 143
    1fc6:	1e 4f       	sbci	r17, 0xFE	; 254
    1fc8:	fe 01       	movw	r30, r28
    1fca:	ed 58       	subi	r30, 0x8D	; 141
    1fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fce:	60 81       	ld	r22, Z
    1fd0:	71 81       	ldd	r23, Z+1	; 0x01
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	f8 01       	movw	r30, r16
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	80 83       	st	Z, r24
    1fe4:	de 01       	movw	r26, r28
    1fe6:	a3 59       	subi	r26, 0x93	; 147
    1fe8:	be 4f       	sbci	r27, 0xFE	; 254
    1fea:	fe 01       	movw	r30, r28
    1fec:	ef 58       	subi	r30, 0x8F	; 143
    1fee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	11 96       	adiw	r26, 0x01	; 1
    1ff6:	9c 93       	st	X, r25
    1ff8:	8e 93       	st	-X, r24
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e3 59       	subi	r30, 0x93	; 147
    1ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    2000:	80 81       	ld	r24, Z
    2002:	91 81       	ldd	r25, Z+1	; 0x01
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <main+0x440>
    2008:	fe 01       	movw	r30, r28
    200a:	e3 59       	subi	r30, 0x93	; 147
    200c:	fe 4f       	sbci	r31, 0xFE	; 254
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24
		_delay_ms(500);
		operand1=1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    2018:	10 92 6a 00 	sts	0x006A, r1
    201c:	fe c5       	rjmp	.+3068   	; 0x2c1a <main+0x1056>
		break;
	case 2:
		Lcd_vidSendCommand(0x80);
    201e:	80 e8       	ldi	r24, 0x80	; 128
    2020:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('2');
    2024:	82 e3       	ldi	r24, 0x32	; 50
    2026:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    202a:	fe 01       	movw	r30, r28
    202c:	e7 59       	subi	r30, 0x97	; 151
    202e:	fe 4f       	sbci	r31, 0xFE	; 254
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	aa ef       	ldi	r26, 0xFA	; 250
    2036:	b3 e4       	ldi	r27, 0x43	; 67
    2038:	80 83       	st	Z, r24
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	a2 83       	std	Z+2, r26	; 0x02
    203e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	8e 01       	movw	r16, r28
    2042:	0b 59       	subi	r16, 0x9B	; 155
    2044:	1e 4f       	sbci	r17, 0xFE	; 254
    2046:	fe 01       	movw	r30, r28
    2048:	e7 59       	subi	r30, 0x97	; 151
    204a:	fe 4f       	sbci	r31, 0xFE	; 254
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a ef       	ldi	r20, 0xFA	; 250
    205a:	54 e4       	ldi	r21, 0x44	; 68
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	f8 01       	movw	r30, r16
    2066:	80 83       	st	Z, r24
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	a2 83       	std	Z+2, r26	; 0x02
    206c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    206e:	fe 01       	movw	r30, r28
    2070:	eb 59       	subi	r30, 0x9B	; 155
    2072:	fe 4f       	sbci	r31, 0xFE	; 254
    2074:	60 81       	ld	r22, Z
    2076:	71 81       	ldd	r23, Z+1	; 0x01
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	93 81       	ldd	r25, Z+3	; 0x03
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2088:	88 23       	and	r24, r24
    208a:	44 f4       	brge	.+16     	; 0x209c <main+0x4d8>
		__ticks = 1;
    208c:	fe 01       	movw	r30, r28
    208e:	ed 59       	subi	r30, 0x9D	; 157
    2090:	fe 4f       	sbci	r31, 0xFE	; 254
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
    209a:	64 c0       	rjmp	.+200    	; 0x2164 <main+0x5a0>
	else if (__tmp > 65535)
    209c:	fe 01       	movw	r30, r28
    209e:	eb 59       	subi	r30, 0x9B	; 155
    20a0:	fe 4f       	sbci	r31, 0xFE	; 254
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	3f ef       	ldi	r19, 0xFF	; 255
    20ae:	4f e7       	ldi	r20, 0x7F	; 127
    20b0:	57 e4       	ldi	r21, 0x47	; 71
    20b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b6:	18 16       	cp	r1, r24
    20b8:	0c f0       	brlt	.+2      	; 0x20bc <main+0x4f8>
    20ba:	43 c0       	rjmp	.+134    	; 0x2142 <main+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	fe 01       	movw	r30, r28
    20be:	e7 59       	subi	r30, 0x97	; 151
    20c0:	fe 4f       	sbci	r31, 0xFE	; 254
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	8e 01       	movw	r16, r28
    20dc:	0d 59       	subi	r16, 0x9D	; 157
    20de:	1e 4f       	sbci	r17, 0xFE	; 254
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	f8 01       	movw	r30, r16
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	80 83       	st	Z, r24
    20f2:	1f c0       	rjmp	.+62     	; 0x2132 <main+0x56e>
    20f4:	fe 01       	movw	r30, r28
    20f6:	ef 59       	subi	r30, 0x9F	; 159
    20f8:	fe 4f       	sbci	r31, 0xFE	; 254
    20fa:	88 ec       	ldi	r24, 0xC8	; 200
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	fe 01       	movw	r30, r28
    2104:	ef 59       	subi	r30, 0x9F	; 159
    2106:	fe 4f       	sbci	r31, 0xFE	; 254
    2108:	80 81       	ld	r24, Z
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <main+0x548>
    2110:	fe 01       	movw	r30, r28
    2112:	ef 59       	subi	r30, 0x9F	; 159
    2114:	fe 4f       	sbci	r31, 0xFE	; 254
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211a:	de 01       	movw	r26, r28
    211c:	ad 59       	subi	r26, 0x9D	; 157
    211e:	be 4f       	sbci	r27, 0xFE	; 254
    2120:	fe 01       	movw	r30, r28
    2122:	ed 59       	subi	r30, 0x9D	; 157
    2124:	fe 4f       	sbci	r31, 0xFE	; 254
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	11 96       	adiw	r26, 0x01	; 1
    212e:	9c 93       	st	X, r25
    2130:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	fe 01       	movw	r30, r28
    2134:	ed 59       	subi	r30, 0x9D	; 157
    2136:	fe 4f       	sbci	r31, 0xFE	; 254
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	d1 f6       	brne	.-76     	; 0x20f4 <main+0x530>
    2140:	28 c0       	rjmp	.+80     	; 0x2192 <main+0x5ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2142:	8e 01       	movw	r16, r28
    2144:	0d 59       	subi	r16, 0x9D	; 157
    2146:	1e 4f       	sbci	r17, 0xFE	; 254
    2148:	fe 01       	movw	r30, r28
    214a:	eb 59       	subi	r30, 0x9B	; 155
    214c:	fe 4f       	sbci	r31, 0xFE	; 254
    214e:	60 81       	ld	r22, Z
    2150:	71 81       	ldd	r23, Z+1	; 0x01
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	93 81       	ldd	r25, Z+3	; 0x03
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	f8 01       	movw	r30, r16
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	80 83       	st	Z, r24
    2164:	de 01       	movw	r26, r28
    2166:	a1 5a       	subi	r26, 0xA1	; 161
    2168:	be 4f       	sbci	r27, 0xFE	; 254
    216a:	fe 01       	movw	r30, r28
    216c:	ed 59       	subi	r30, 0x9D	; 157
    216e:	fe 4f       	sbci	r31, 0xFE	; 254
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	11 96       	adiw	r26, 0x01	; 1
    2176:	9c 93       	st	X, r25
    2178:	8e 93       	st	-X, r24
    217a:	fe 01       	movw	r30, r28
    217c:	e1 5a       	subi	r30, 0xA1	; 161
    217e:	fe 4f       	sbci	r31, 0xFE	; 254
    2180:	80 81       	ld	r24, Z
    2182:	91 81       	ldd	r25, Z+1	; 0x01
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <main+0x5c0>
    2188:	fe 01       	movw	r30, r28
    218a:	e1 5a       	subi	r30, 0xA1	; 161
    218c:	fe 4f       	sbci	r31, 0xFE	; 254
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
		_delay_ms(500);
		operand1=2;
    2192:	82 e0       	ldi	r24, 0x02	; 2
    2194:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    2198:	10 92 6a 00 	sts	0x006A, r1
    219c:	3e c5       	rjmp	.+2684   	; 0x2c1a <main+0x1056>
		break;
	case 3:
		Lcd_vidSendCommand(0x80);
    219e:	80 e8       	ldi	r24, 0x80	; 128
    21a0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('3');
    21a4:	83 e3       	ldi	r24, 0x33	; 51
    21a6:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    21aa:	fe 01       	movw	r30, r28
    21ac:	e5 5a       	subi	r30, 0xA5	; 165
    21ae:	fe 4f       	sbci	r31, 0xFE	; 254
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	aa ef       	ldi	r26, 0xFA	; 250
    21b6:	b3 e4       	ldi	r27, 0x43	; 67
    21b8:	80 83       	st	Z, r24
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	a2 83       	std	Z+2, r26	; 0x02
    21be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c0:	8e 01       	movw	r16, r28
    21c2:	09 5a       	subi	r16, 0xA9	; 169
    21c4:	1e 4f       	sbci	r17, 0xFE	; 254
    21c6:	fe 01       	movw	r30, r28
    21c8:	e5 5a       	subi	r30, 0xA5	; 165
    21ca:	fe 4f       	sbci	r31, 0xFE	; 254
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	4a ef       	ldi	r20, 0xFA	; 250
    21da:	54 e4       	ldi	r21, 0x44	; 68
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	f8 01       	movw	r30, r16
    21e6:	80 83       	st	Z, r24
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	a2 83       	std	Z+2, r26	; 0x02
    21ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ee:	fe 01       	movw	r30, r28
    21f0:	e9 5a       	subi	r30, 0xA9	; 169
    21f2:	fe 4f       	sbci	r31, 0xFE	; 254
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	44 f4       	brge	.+16     	; 0x221c <main+0x658>
		__ticks = 1;
    220c:	fe 01       	movw	r30, r28
    220e:	eb 5a       	subi	r30, 0xAB	; 171
    2210:	fe 4f       	sbci	r31, 0xFE	; 254
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
    221a:	64 c0       	rjmp	.+200    	; 0x22e4 <main+0x720>
	else if (__tmp > 65535)
    221c:	fe 01       	movw	r30, r28
    221e:	e9 5a       	subi	r30, 0xA9	; 169
    2220:	fe 4f       	sbci	r31, 0xFE	; 254
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	0c f0       	brlt	.+2      	; 0x223c <main+0x678>
    223a:	43 c0       	rjmp	.+134    	; 0x22c2 <main+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223c:	fe 01       	movw	r30, r28
    223e:	e5 5a       	subi	r30, 0xA5	; 165
    2240:	fe 4f       	sbci	r31, 0xFE	; 254
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	8e 01       	movw	r16, r28
    225c:	0b 5a       	subi	r16, 0xAB	; 171
    225e:	1e 4f       	sbci	r17, 0xFE	; 254
    2260:	bc 01       	movw	r22, r24
    2262:	cd 01       	movw	r24, r26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	f8 01       	movw	r30, r16
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	1f c0       	rjmp	.+62     	; 0x22b2 <main+0x6ee>
    2274:	fe 01       	movw	r30, r28
    2276:	ed 5a       	subi	r30, 0xAD	; 173
    2278:	fe 4f       	sbci	r31, 0xFE	; 254
    227a:	88 ec       	ldi	r24, 0xC8	; 200
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	80 83       	st	Z, r24
    2282:	fe 01       	movw	r30, r28
    2284:	ed 5a       	subi	r30, 0xAD	; 173
    2286:	fe 4f       	sbci	r31, 0xFE	; 254
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <main+0x6c8>
    2290:	fe 01       	movw	r30, r28
    2292:	ed 5a       	subi	r30, 0xAD	; 173
    2294:	fe 4f       	sbci	r31, 0xFE	; 254
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229a:	de 01       	movw	r26, r28
    229c:	ab 5a       	subi	r26, 0xAB	; 171
    229e:	be 4f       	sbci	r27, 0xFE	; 254
    22a0:	fe 01       	movw	r30, r28
    22a2:	eb 5a       	subi	r30, 0xAB	; 171
    22a4:	fe 4f       	sbci	r31, 0xFE	; 254
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	11 96       	adiw	r26, 0x01	; 1
    22ae:	9c 93       	st	X, r25
    22b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b2:	fe 01       	movw	r30, r28
    22b4:	eb 5a       	subi	r30, 0xAB	; 171
    22b6:	fe 4f       	sbci	r31, 0xFE	; 254
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	d1 f6       	brne	.-76     	; 0x2274 <main+0x6b0>
    22c0:	28 c0       	rjmp	.+80     	; 0x2312 <main+0x74e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	8e 01       	movw	r16, r28
    22c4:	0b 5a       	subi	r16, 0xAB	; 171
    22c6:	1e 4f       	sbci	r17, 0xFE	; 254
    22c8:	fe 01       	movw	r30, r28
    22ca:	e9 5a       	subi	r30, 0xA9	; 169
    22cc:	fe 4f       	sbci	r31, 0xFE	; 254
    22ce:	60 81       	ld	r22, Z
    22d0:	71 81       	ldd	r23, Z+1	; 0x01
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	93 81       	ldd	r25, Z+3	; 0x03
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	f8 01       	movw	r30, r16
    22e0:	91 83       	std	Z+1, r25	; 0x01
    22e2:	80 83       	st	Z, r24
    22e4:	de 01       	movw	r26, r28
    22e6:	af 5a       	subi	r26, 0xAF	; 175
    22e8:	be 4f       	sbci	r27, 0xFE	; 254
    22ea:	fe 01       	movw	r30, r28
    22ec:	eb 5a       	subi	r30, 0xAB	; 171
    22ee:	fe 4f       	sbci	r31, 0xFE	; 254
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	11 96       	adiw	r26, 0x01	; 1
    22f6:	9c 93       	st	X, r25
    22f8:	8e 93       	st	-X, r24
    22fa:	fe 01       	movw	r30, r28
    22fc:	ef 5a       	subi	r30, 0xAF	; 175
    22fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <main+0x740>
    2308:	fe 01       	movw	r30, r28
    230a:	ef 5a       	subi	r30, 0xAF	; 175
    230c:	fe 4f       	sbci	r31, 0xFE	; 254
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	80 83       	st	Z, r24
		_delay_ms(500);
		operand1=3;
    2312:	83 e0       	ldi	r24, 0x03	; 3
    2314:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    2318:	10 92 6a 00 	sts	0x006A, r1
    231c:	7e c4       	rjmp	.+2300   	; 0x2c1a <main+0x1056>
		break;
	case 4:
		Lcd_vidSendCommand(0x80);
    231e:	80 e8       	ldi	r24, 0x80	; 128
    2320:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('4');
    2324:	84 e3       	ldi	r24, 0x34	; 52
    2326:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    232a:	fe 01       	movw	r30, r28
    232c:	e3 5b       	subi	r30, 0xB3	; 179
    232e:	fe 4f       	sbci	r31, 0xFE	; 254
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	aa ef       	ldi	r26, 0xFA	; 250
    2336:	b3 e4       	ldi	r27, 0x43	; 67
    2338:	80 83       	st	Z, r24
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	a2 83       	std	Z+2, r26	; 0x02
    233e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2340:	8e 01       	movw	r16, r28
    2342:	07 5b       	subi	r16, 0xB7	; 183
    2344:	1e 4f       	sbci	r17, 0xFE	; 254
    2346:	fe 01       	movw	r30, r28
    2348:	e3 5b       	subi	r30, 0xB3	; 179
    234a:	fe 4f       	sbci	r31, 0xFE	; 254
    234c:	60 81       	ld	r22, Z
    234e:	71 81       	ldd	r23, Z+1	; 0x01
    2350:	82 81       	ldd	r24, Z+2	; 0x02
    2352:	93 81       	ldd	r25, Z+3	; 0x03
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	4a ef       	ldi	r20, 0xFA	; 250
    235a:	54 e4       	ldi	r21, 0x44	; 68
    235c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	f8 01       	movw	r30, r16
    2366:	80 83       	st	Z, r24
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	a2 83       	std	Z+2, r26	; 0x02
    236c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    236e:	fe 01       	movw	r30, r28
    2370:	e7 5b       	subi	r30, 0xB7	; 183
    2372:	fe 4f       	sbci	r31, 0xFE	; 254
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e8       	ldi	r20, 0x80	; 128
    2382:	5f e3       	ldi	r21, 0x3F	; 63
    2384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2388:	88 23       	and	r24, r24
    238a:	44 f4       	brge	.+16     	; 0x239c <main+0x7d8>
		__ticks = 1;
    238c:	fe 01       	movw	r30, r28
    238e:	e9 5b       	subi	r30, 0xB9	; 185
    2390:	fe 4f       	sbci	r31, 0xFE	; 254
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
    239a:	64 c0       	rjmp	.+200    	; 0x2464 <main+0x8a0>
	else if (__tmp > 65535)
    239c:	fe 01       	movw	r30, r28
    239e:	e7 5b       	subi	r30, 0xB7	; 183
    23a0:	fe 4f       	sbci	r31, 0xFE	; 254
    23a2:	60 81       	ld	r22, Z
    23a4:	71 81       	ldd	r23, Z+1	; 0x01
    23a6:	82 81       	ldd	r24, Z+2	; 0x02
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	3f ef       	ldi	r19, 0xFF	; 255
    23ae:	4f e7       	ldi	r20, 0x7F	; 127
    23b0:	57 e4       	ldi	r21, 0x47	; 71
    23b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b6:	18 16       	cp	r1, r24
    23b8:	0c f0       	brlt	.+2      	; 0x23bc <main+0x7f8>
    23ba:	43 c0       	rjmp	.+134    	; 0x2442 <main+0x87e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	fe 01       	movw	r30, r28
    23be:	e3 5b       	subi	r30, 0xB3	; 179
    23c0:	fe 4f       	sbci	r31, 0xFE	; 254
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	8e 01       	movw	r16, r28
    23dc:	09 5b       	subi	r16, 0xB9	; 185
    23de:	1e 4f       	sbci	r17, 0xFE	; 254
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	f8 01       	movw	r30, r16
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
    23f2:	1f c0       	rjmp	.+62     	; 0x2432 <main+0x86e>
    23f4:	fe 01       	movw	r30, r28
    23f6:	eb 5b       	subi	r30, 0xBB	; 187
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	88 ec       	ldi	r24, 0xC8	; 200
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	80 83       	st	Z, r24
    2402:	fe 01       	movw	r30, r28
    2404:	eb 5b       	subi	r30, 0xBB	; 187
    2406:	fe 4f       	sbci	r31, 0xFE	; 254
    2408:	80 81       	ld	r24, Z
    240a:	91 81       	ldd	r25, Z+1	; 0x01
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <main+0x848>
    2410:	fe 01       	movw	r30, r28
    2412:	eb 5b       	subi	r30, 0xBB	; 187
    2414:	fe 4f       	sbci	r31, 0xFE	; 254
    2416:	91 83       	std	Z+1, r25	; 0x01
    2418:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241a:	de 01       	movw	r26, r28
    241c:	a9 5b       	subi	r26, 0xB9	; 185
    241e:	be 4f       	sbci	r27, 0xFE	; 254
    2420:	fe 01       	movw	r30, r28
    2422:	e9 5b       	subi	r30, 0xB9	; 185
    2424:	fe 4f       	sbci	r31, 0xFE	; 254
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	11 96       	adiw	r26, 0x01	; 1
    242e:	9c 93       	st	X, r25
    2430:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2432:	fe 01       	movw	r30, r28
    2434:	e9 5b       	subi	r30, 0xB9	; 185
    2436:	fe 4f       	sbci	r31, 0xFE	; 254
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	d1 f6       	brne	.-76     	; 0x23f4 <main+0x830>
    2440:	28 c0       	rjmp	.+80     	; 0x2492 <main+0x8ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2442:	8e 01       	movw	r16, r28
    2444:	09 5b       	subi	r16, 0xB9	; 185
    2446:	1e 4f       	sbci	r17, 0xFE	; 254
    2448:	fe 01       	movw	r30, r28
    244a:	e7 5b       	subi	r30, 0xB7	; 183
    244c:	fe 4f       	sbci	r31, 0xFE	; 254
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	f8 01       	movw	r30, r16
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	80 83       	st	Z, r24
    2464:	de 01       	movw	r26, r28
    2466:	ad 5b       	subi	r26, 0xBD	; 189
    2468:	be 4f       	sbci	r27, 0xFE	; 254
    246a:	fe 01       	movw	r30, r28
    246c:	e9 5b       	subi	r30, 0xB9	; 185
    246e:	fe 4f       	sbci	r31, 0xFE	; 254
    2470:	80 81       	ld	r24, Z
    2472:	91 81       	ldd	r25, Z+1	; 0x01
    2474:	11 96       	adiw	r26, 0x01	; 1
    2476:	9c 93       	st	X, r25
    2478:	8e 93       	st	-X, r24
    247a:	fe 01       	movw	r30, r28
    247c:	ed 5b       	subi	r30, 0xBD	; 189
    247e:	fe 4f       	sbci	r31, 0xFE	; 254
    2480:	80 81       	ld	r24, Z
    2482:	91 81       	ldd	r25, Z+1	; 0x01
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <main+0x8c0>
    2488:	fe 01       	movw	r30, r28
    248a:	ed 5b       	subi	r30, 0xBD	; 189
    248c:	fe 4f       	sbci	r31, 0xFE	; 254
    248e:	91 83       	std	Z+1, r25	; 0x01
    2490:	80 83       	st	Z, r24
		_delay_ms(500);
		operand1=4;
    2492:	84 e0       	ldi	r24, 0x04	; 4
    2494:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    2498:	10 92 6a 00 	sts	0x006A, r1
    249c:	be c3       	rjmp	.+1916   	; 0x2c1a <main+0x1056>
		break;
	case 5:
		Lcd_vidSendCommand(0x80);
    249e:	80 e8       	ldi	r24, 0x80	; 128
    24a0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('5');
    24a4:	85 e3       	ldi	r24, 0x35	; 53
    24a6:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    24aa:	fe 01       	movw	r30, r28
    24ac:	e1 5c       	subi	r30, 0xC1	; 193
    24ae:	fe 4f       	sbci	r31, 0xFE	; 254
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	aa ef       	ldi	r26, 0xFA	; 250
    24b6:	b3 e4       	ldi	r27, 0x43	; 67
    24b8:	80 83       	st	Z, r24
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	a2 83       	std	Z+2, r26	; 0x02
    24be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	8e 01       	movw	r16, r28
    24c2:	05 5c       	subi	r16, 0xC5	; 197
    24c4:	1e 4f       	sbci	r17, 0xFE	; 254
    24c6:	fe 01       	movw	r30, r28
    24c8:	e1 5c       	subi	r30, 0xC1	; 193
    24ca:	fe 4f       	sbci	r31, 0xFE	; 254
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
    24d0:	82 81       	ldd	r24, Z+2	; 0x02
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	4a ef       	ldi	r20, 0xFA	; 250
    24da:	54 e4       	ldi	r21, 0x44	; 68
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	f8 01       	movw	r30, r16
    24e6:	80 83       	st	Z, r24
    24e8:	91 83       	std	Z+1, r25	; 0x01
    24ea:	a2 83       	std	Z+2, r26	; 0x02
    24ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ee:	fe 01       	movw	r30, r28
    24f0:	e5 5c       	subi	r30, 0xC5	; 197
    24f2:	fe 4f       	sbci	r31, 0xFE	; 254
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	44 f4       	brge	.+16     	; 0x251c <main+0x958>
		__ticks = 1;
    250c:	fe 01       	movw	r30, r28
    250e:	e7 5c       	subi	r30, 0xC7	; 199
    2510:	fe 4f       	sbci	r31, 0xFE	; 254
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	80 83       	st	Z, r24
    251a:	64 c0       	rjmp	.+200    	; 0x25e4 <main+0xa20>
	else if (__tmp > 65535)
    251c:	fe 01       	movw	r30, r28
    251e:	e5 5c       	subi	r30, 0xC5	; 197
    2520:	fe 4f       	sbci	r31, 0xFE	; 254
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	57 e4       	ldi	r21, 0x47	; 71
    2532:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	0c f0       	brlt	.+2      	; 0x253c <main+0x978>
    253a:	43 c0       	rjmp	.+134    	; 0x25c2 <main+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253c:	fe 01       	movw	r30, r28
    253e:	e1 5c       	subi	r30, 0xC1	; 193
    2540:	fe 4f       	sbci	r31, 0xFE	; 254
    2542:	60 81       	ld	r22, Z
    2544:	71 81       	ldd	r23, Z+1	; 0x01
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e2       	ldi	r20, 0x20	; 32
    2550:	51 e4       	ldi	r21, 0x41	; 65
    2552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	8e 01       	movw	r16, r28
    255c:	07 5c       	subi	r16, 0xC7	; 199
    255e:	1e 4f       	sbci	r17, 0xFE	; 254
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	f8 01       	movw	r30, r16
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	80 83       	st	Z, r24
    2572:	1f c0       	rjmp	.+62     	; 0x25b2 <main+0x9ee>
    2574:	fe 01       	movw	r30, r28
    2576:	e9 5c       	subi	r30, 0xC9	; 201
    2578:	fe 4f       	sbci	r31, 0xFE	; 254
    257a:	88 ec       	ldi	r24, 0xC8	; 200
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
    2582:	fe 01       	movw	r30, r28
    2584:	e9 5c       	subi	r30, 0xC9	; 201
    2586:	fe 4f       	sbci	r31, 0xFE	; 254
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <main+0x9c8>
    2590:	fe 01       	movw	r30, r28
    2592:	e9 5c       	subi	r30, 0xC9	; 201
    2594:	fe 4f       	sbci	r31, 0xFE	; 254
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259a:	de 01       	movw	r26, r28
    259c:	a7 5c       	subi	r26, 0xC7	; 199
    259e:	be 4f       	sbci	r27, 0xFE	; 254
    25a0:	fe 01       	movw	r30, r28
    25a2:	e7 5c       	subi	r30, 0xC7	; 199
    25a4:	fe 4f       	sbci	r31, 0xFE	; 254
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	11 96       	adiw	r26, 0x01	; 1
    25ae:	9c 93       	st	X, r25
    25b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b2:	fe 01       	movw	r30, r28
    25b4:	e7 5c       	subi	r30, 0xC7	; 199
    25b6:	fe 4f       	sbci	r31, 0xFE	; 254
    25b8:	80 81       	ld	r24, Z
    25ba:	91 81       	ldd	r25, Z+1	; 0x01
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	d1 f6       	brne	.-76     	; 0x2574 <main+0x9b0>
    25c0:	28 c0       	rjmp	.+80     	; 0x2612 <main+0xa4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c2:	8e 01       	movw	r16, r28
    25c4:	07 5c       	subi	r16, 0xC7	; 199
    25c6:	1e 4f       	sbci	r17, 0xFE	; 254
    25c8:	fe 01       	movw	r30, r28
    25ca:	e5 5c       	subi	r30, 0xC5	; 197
    25cc:	fe 4f       	sbci	r31, 0xFE	; 254
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	f8 01       	movw	r30, r16
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	80 83       	st	Z, r24
    25e4:	de 01       	movw	r26, r28
    25e6:	ab 5c       	subi	r26, 0xCB	; 203
    25e8:	be 4f       	sbci	r27, 0xFE	; 254
    25ea:	fe 01       	movw	r30, r28
    25ec:	e7 5c       	subi	r30, 0xC7	; 199
    25ee:	fe 4f       	sbci	r31, 0xFE	; 254
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	11 96       	adiw	r26, 0x01	; 1
    25f6:	9c 93       	st	X, r25
    25f8:	8e 93       	st	-X, r24
    25fa:	fe 01       	movw	r30, r28
    25fc:	eb 5c       	subi	r30, 0xCB	; 203
    25fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2600:	80 81       	ld	r24, Z
    2602:	91 81       	ldd	r25, Z+1	; 0x01
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <main+0xa40>
    2608:	fe 01       	movw	r30, r28
    260a:	eb 5c       	subi	r30, 0xCB	; 203
    260c:	fe 4f       	sbci	r31, 0xFE	; 254
    260e:	91 83       	std	Z+1, r25	; 0x01
    2610:	80 83       	st	Z, r24
		_delay_ms(500);
		operand1=5;
    2612:	85 e0       	ldi	r24, 0x05	; 5
    2614:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    2618:	10 92 6a 00 	sts	0x006A, r1
    261c:	fe c2       	rjmp	.+1532   	; 0x2c1a <main+0x1056>
		break;
	case 6:
		Lcd_vidSendCommand(0x80);
    261e:	80 e8       	ldi	r24, 0x80	; 128
    2620:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('6');
    2624:	86 e3       	ldi	r24, 0x36	; 54
    2626:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    262a:	fe 01       	movw	r30, r28
    262c:	ef 5c       	subi	r30, 0xCF	; 207
    262e:	fe 4f       	sbci	r31, 0xFE	; 254
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	aa ef       	ldi	r26, 0xFA	; 250
    2636:	b3 e4       	ldi	r27, 0x43	; 67
    2638:	80 83       	st	Z, r24
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	a2 83       	std	Z+2, r26	; 0x02
    263e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2640:	8e 01       	movw	r16, r28
    2642:	03 5d       	subi	r16, 0xD3	; 211
    2644:	1e 4f       	sbci	r17, 0xFE	; 254
    2646:	fe 01       	movw	r30, r28
    2648:	ef 5c       	subi	r30, 0xCF	; 207
    264a:	fe 4f       	sbci	r31, 0xFE	; 254
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4a ef       	ldi	r20, 0xFA	; 250
    265a:	54 e4       	ldi	r21, 0x44	; 68
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	f8 01       	movw	r30, r16
    2666:	80 83       	st	Z, r24
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	a2 83       	std	Z+2, r26	; 0x02
    266c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    266e:	fe 01       	movw	r30, r28
    2670:	e3 5d       	subi	r30, 0xD3	; 211
    2672:	fe 4f       	sbci	r31, 0xFE	; 254
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e8       	ldi	r20, 0x80	; 128
    2682:	5f e3       	ldi	r21, 0x3F	; 63
    2684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2688:	88 23       	and	r24, r24
    268a:	44 f4       	brge	.+16     	; 0x269c <main+0xad8>
		__ticks = 1;
    268c:	fe 01       	movw	r30, r28
    268e:	e5 5d       	subi	r30, 0xD5	; 213
    2690:	fe 4f       	sbci	r31, 0xFE	; 254
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	64 c0       	rjmp	.+200    	; 0x2764 <main+0xba0>
	else if (__tmp > 65535)
    269c:	fe 01       	movw	r30, r28
    269e:	e3 5d       	subi	r30, 0xD3	; 211
    26a0:	fe 4f       	sbci	r31, 0xFE	; 254
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	0c f0       	brlt	.+2      	; 0x26bc <main+0xaf8>
    26ba:	43 c0       	rjmp	.+134    	; 0x2742 <main+0xb7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	fe 01       	movw	r30, r28
    26be:	ef 5c       	subi	r30, 0xCF	; 207
    26c0:	fe 4f       	sbci	r31, 0xFE	; 254
    26c2:	60 81       	ld	r22, Z
    26c4:	71 81       	ldd	r23, Z+1	; 0x01
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e2       	ldi	r20, 0x20	; 32
    26d0:	51 e4       	ldi	r21, 0x41	; 65
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8e 01       	movw	r16, r28
    26dc:	05 5d       	subi	r16, 0xD5	; 213
    26de:	1e 4f       	sbci	r17, 0xFE	; 254
    26e0:	bc 01       	movw	r22, r24
    26e2:	cd 01       	movw	r24, r26
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	f8 01       	movw	r30, r16
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
    26f2:	1f c0       	rjmp	.+62     	; 0x2732 <main+0xb6e>
    26f4:	fe 01       	movw	r30, r28
    26f6:	e7 5d       	subi	r30, 0xD7	; 215
    26f8:	fe 4f       	sbci	r31, 0xFE	; 254
    26fa:	88 ec       	ldi	r24, 0xC8	; 200
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    2702:	fe 01       	movw	r30, r28
    2704:	e7 5d       	subi	r30, 0xD7	; 215
    2706:	fe 4f       	sbci	r31, 0xFE	; 254
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <main+0xb48>
    2710:	fe 01       	movw	r30, r28
    2712:	e7 5d       	subi	r30, 0xD7	; 215
    2714:	fe 4f       	sbci	r31, 0xFE	; 254
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271a:	de 01       	movw	r26, r28
    271c:	a5 5d       	subi	r26, 0xD5	; 213
    271e:	be 4f       	sbci	r27, 0xFE	; 254
    2720:	fe 01       	movw	r30, r28
    2722:	e5 5d       	subi	r30, 0xD5	; 213
    2724:	fe 4f       	sbci	r31, 0xFE	; 254
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	11 96       	adiw	r26, 0x01	; 1
    272e:	9c 93       	st	X, r25
    2730:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2732:	fe 01       	movw	r30, r28
    2734:	e5 5d       	subi	r30, 0xD5	; 213
    2736:	fe 4f       	sbci	r31, 0xFE	; 254
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	d1 f6       	brne	.-76     	; 0x26f4 <main+0xb30>
    2740:	28 c0       	rjmp	.+80     	; 0x2792 <main+0xbce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2742:	8e 01       	movw	r16, r28
    2744:	05 5d       	subi	r16, 0xD5	; 213
    2746:	1e 4f       	sbci	r17, 0xFE	; 254
    2748:	fe 01       	movw	r30, r28
    274a:	e3 5d       	subi	r30, 0xD3	; 211
    274c:	fe 4f       	sbci	r31, 0xFE	; 254
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	f8 01       	movw	r30, r16
    2760:	91 83       	std	Z+1, r25	; 0x01
    2762:	80 83       	st	Z, r24
    2764:	de 01       	movw	r26, r28
    2766:	a9 5d       	subi	r26, 0xD9	; 217
    2768:	be 4f       	sbci	r27, 0xFE	; 254
    276a:	fe 01       	movw	r30, r28
    276c:	e5 5d       	subi	r30, 0xD5	; 213
    276e:	fe 4f       	sbci	r31, 0xFE	; 254
    2770:	80 81       	ld	r24, Z
    2772:	91 81       	ldd	r25, Z+1	; 0x01
    2774:	11 96       	adiw	r26, 0x01	; 1
    2776:	9c 93       	st	X, r25
    2778:	8e 93       	st	-X, r24
    277a:	fe 01       	movw	r30, r28
    277c:	e9 5d       	subi	r30, 0xD9	; 217
    277e:	fe 4f       	sbci	r31, 0xFE	; 254
    2780:	80 81       	ld	r24, Z
    2782:	91 81       	ldd	r25, Z+1	; 0x01
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <main+0xbc0>
    2788:	fe 01       	movw	r30, r28
    278a:	e9 5d       	subi	r30, 0xD9	; 217
    278c:	fe 4f       	sbci	r31, 0xFE	; 254
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	80 83       	st	Z, r24
		_delay_ms(500);
		operand1=6;
    2792:	86 e0       	ldi	r24, 0x06	; 6
    2794:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    2798:	10 92 6a 00 	sts	0x006A, r1
    279c:	3e c2       	rjmp	.+1148   	; 0x2c1a <main+0x1056>
		break;
	case 7:
		Lcd_vidSendCommand(0x80);
    279e:	80 e8       	ldi	r24, 0x80	; 128
    27a0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('7');
    27a4:	87 e3       	ldi	r24, 0x37	; 55
    27a6:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    27aa:	fe 01       	movw	r30, r28
    27ac:	ed 5d       	subi	r30, 0xDD	; 221
    27ae:	fe 4f       	sbci	r31, 0xFE	; 254
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	aa ef       	ldi	r26, 0xFA	; 250
    27b6:	b3 e4       	ldi	r27, 0x43	; 67
    27b8:	80 83       	st	Z, r24
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	a2 83       	std	Z+2, r26	; 0x02
    27be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c0:	8e 01       	movw	r16, r28
    27c2:	01 5e       	subi	r16, 0xE1	; 225
    27c4:	1e 4f       	sbci	r17, 0xFE	; 254
    27c6:	fe 01       	movw	r30, r28
    27c8:	ed 5d       	subi	r30, 0xDD	; 221
    27ca:	fe 4f       	sbci	r31, 0xFE	; 254
    27cc:	60 81       	ld	r22, Z
    27ce:	71 81       	ldd	r23, Z+1	; 0x01
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a ef       	ldi	r20, 0xFA	; 250
    27da:	54 e4       	ldi	r21, 0x44	; 68
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	f8 01       	movw	r30, r16
    27e6:	80 83       	st	Z, r24
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	a2 83       	std	Z+2, r26	; 0x02
    27ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ee:	fe 01       	movw	r30, r28
    27f0:	e1 5e       	subi	r30, 0xE1	; 225
    27f2:	fe 4f       	sbci	r31, 0xFE	; 254
    27f4:	60 81       	ld	r22, Z
    27f6:	71 81       	ldd	r23, Z+1	; 0x01
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	93 81       	ldd	r25, Z+3	; 0x03
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	44 f4       	brge	.+16     	; 0x281c <main+0xc58>
		__ticks = 1;
    280c:	fe 01       	movw	r30, r28
    280e:	e3 5e       	subi	r30, 0xE3	; 227
    2810:	fe 4f       	sbci	r31, 0xFE	; 254
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	80 83       	st	Z, r24
    281a:	64 c0       	rjmp	.+200    	; 0x28e4 <main+0xd20>
	else if (__tmp > 65535)
    281c:	fe 01       	movw	r30, r28
    281e:	e1 5e       	subi	r30, 0xE1	; 225
    2820:	fe 4f       	sbci	r31, 0xFE	; 254
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	3f ef       	ldi	r19, 0xFF	; 255
    282e:	4f e7       	ldi	r20, 0x7F	; 127
    2830:	57 e4       	ldi	r21, 0x47	; 71
    2832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2836:	18 16       	cp	r1, r24
    2838:	0c f0       	brlt	.+2      	; 0x283c <main+0xc78>
    283a:	43 c0       	rjmp	.+134    	; 0x28c2 <main+0xcfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283c:	fe 01       	movw	r30, r28
    283e:	ed 5d       	subi	r30, 0xDD	; 221
    2840:	fe 4f       	sbci	r31, 0xFE	; 254
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8e 01       	movw	r16, r28
    285c:	03 5e       	subi	r16, 0xE3	; 227
    285e:	1e 4f       	sbci	r17, 0xFE	; 254
    2860:	bc 01       	movw	r22, r24
    2862:	cd 01       	movw	r24, r26
    2864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	f8 01       	movw	r30, r16
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	80 83       	st	Z, r24
    2872:	1f c0       	rjmp	.+62     	; 0x28b2 <main+0xcee>
    2874:	fe 01       	movw	r30, r28
    2876:	e5 5e       	subi	r30, 0xE5	; 229
    2878:	fe 4f       	sbci	r31, 0xFE	; 254
    287a:	88 ec       	ldi	r24, 0xC8	; 200
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	80 83       	st	Z, r24
    2882:	fe 01       	movw	r30, r28
    2884:	e5 5e       	subi	r30, 0xE5	; 229
    2886:	fe 4f       	sbci	r31, 0xFE	; 254
    2888:	80 81       	ld	r24, Z
    288a:	91 81       	ldd	r25, Z+1	; 0x01
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <main+0xcc8>
    2890:	fe 01       	movw	r30, r28
    2892:	e5 5e       	subi	r30, 0xE5	; 229
    2894:	fe 4f       	sbci	r31, 0xFE	; 254
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	de 01       	movw	r26, r28
    289c:	a3 5e       	subi	r26, 0xE3	; 227
    289e:	be 4f       	sbci	r27, 0xFE	; 254
    28a0:	fe 01       	movw	r30, r28
    28a2:	e3 5e       	subi	r30, 0xE3	; 227
    28a4:	fe 4f       	sbci	r31, 0xFE	; 254
    28a6:	80 81       	ld	r24, Z
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	11 96       	adiw	r26, 0x01	; 1
    28ae:	9c 93       	st	X, r25
    28b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	fe 01       	movw	r30, r28
    28b4:	e3 5e       	subi	r30, 0xE3	; 227
    28b6:	fe 4f       	sbci	r31, 0xFE	; 254
    28b8:	80 81       	ld	r24, Z
    28ba:	91 81       	ldd	r25, Z+1	; 0x01
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	d1 f6       	brne	.-76     	; 0x2874 <main+0xcb0>
    28c0:	28 c0       	rjmp	.+80     	; 0x2912 <main+0xd4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	8e 01       	movw	r16, r28
    28c4:	03 5e       	subi	r16, 0xE3	; 227
    28c6:	1e 4f       	sbci	r17, 0xFE	; 254
    28c8:	fe 01       	movw	r30, r28
    28ca:	e1 5e       	subi	r30, 0xE1	; 225
    28cc:	fe 4f       	sbci	r31, 0xFE	; 254
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	f8 01       	movw	r30, r16
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	80 83       	st	Z, r24
    28e4:	de 01       	movw	r26, r28
    28e6:	a7 5e       	subi	r26, 0xE7	; 231
    28e8:	be 4f       	sbci	r27, 0xFE	; 254
    28ea:	fe 01       	movw	r30, r28
    28ec:	e3 5e       	subi	r30, 0xE3	; 227
    28ee:	fe 4f       	sbci	r31, 0xFE	; 254
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	11 96       	adiw	r26, 0x01	; 1
    28f6:	9c 93       	st	X, r25
    28f8:	8e 93       	st	-X, r24
    28fa:	fe 01       	movw	r30, r28
    28fc:	e7 5e       	subi	r30, 0xE7	; 231
    28fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <main+0xd40>
    2908:	fe 01       	movw	r30, r28
    290a:	e7 5e       	subi	r30, 0xE7	; 231
    290c:	fe 4f       	sbci	r31, 0xFE	; 254
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
		_delay_ms(500);
		operand1=7;
    2912:	87 e0       	ldi	r24, 0x07	; 7
    2914:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    2918:	10 92 6a 00 	sts	0x006A, r1
    291c:	7e c1       	rjmp	.+764    	; 0x2c1a <main+0x1056>
		break;
	case 8:
		Lcd_vidSendCommand(0x80);
    291e:	80 e8       	ldi	r24, 0x80	; 128
    2920:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('8');
    2924:	88 e3       	ldi	r24, 0x38	; 56
    2926:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    292a:	fe 01       	movw	r30, r28
    292c:	eb 5e       	subi	r30, 0xEB	; 235
    292e:	fe 4f       	sbci	r31, 0xFE	; 254
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	aa ef       	ldi	r26, 0xFA	; 250
    2936:	b3 e4       	ldi	r27, 0x43	; 67
    2938:	80 83       	st	Z, r24
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	a2 83       	std	Z+2, r26	; 0x02
    293e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2940:	8e 01       	movw	r16, r28
    2942:	0f 5e       	subi	r16, 0xEF	; 239
    2944:	1e 4f       	sbci	r17, 0xFE	; 254
    2946:	fe 01       	movw	r30, r28
    2948:	eb 5e       	subi	r30, 0xEB	; 235
    294a:	fe 4f       	sbci	r31, 0xFE	; 254
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a ef       	ldi	r20, 0xFA	; 250
    295a:	54 e4       	ldi	r21, 0x44	; 68
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	f8 01       	movw	r30, r16
    2966:	80 83       	st	Z, r24
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	a2 83       	std	Z+2, r26	; 0x02
    296c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    296e:	fe 01       	movw	r30, r28
    2970:	ef 5e       	subi	r30, 0xEF	; 239
    2972:	fe 4f       	sbci	r31, 0xFE	; 254
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	44 f4       	brge	.+16     	; 0x299c <main+0xdd8>
		__ticks = 1;
    298c:	fe 01       	movw	r30, r28
    298e:	e1 5f       	subi	r30, 0xF1	; 241
    2990:	fe 4f       	sbci	r31, 0xFE	; 254
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	64 c0       	rjmp	.+200    	; 0x2a64 <main+0xea0>
	else if (__tmp > 65535)
    299c:	fe 01       	movw	r30, r28
    299e:	ef 5e       	subi	r30, 0xEF	; 239
    29a0:	fe 4f       	sbci	r31, 0xFE	; 254
    29a2:	60 81       	ld	r22, Z
    29a4:	71 81       	ldd	r23, Z+1	; 0x01
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	0c f0       	brlt	.+2      	; 0x29bc <main+0xdf8>
    29ba:	43 c0       	rjmp	.+134    	; 0x2a42 <main+0xe7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	fe 01       	movw	r30, r28
    29be:	eb 5e       	subi	r30, 0xEB	; 235
    29c0:	fe 4f       	sbci	r31, 0xFE	; 254
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8e 01       	movw	r16, r28
    29dc:	01 5f       	subi	r16, 0xF1	; 241
    29de:	1e 4f       	sbci	r17, 0xFE	; 254
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	f8 01       	movw	r30, r16
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
    29f2:	1f c0       	rjmp	.+62     	; 0x2a32 <main+0xe6e>
    29f4:	fe 01       	movw	r30, r28
    29f6:	e3 5f       	subi	r30, 0xF3	; 243
    29f8:	fe 4f       	sbci	r31, 0xFE	; 254
    29fa:	88 ec       	ldi	r24, 0xC8	; 200
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
    2a02:	fe 01       	movw	r30, r28
    2a04:	e3 5f       	subi	r30, 0xF3	; 243
    2a06:	fe 4f       	sbci	r31, 0xFE	; 254
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <main+0xe48>
    2a10:	fe 01       	movw	r30, r28
    2a12:	e3 5f       	subi	r30, 0xF3	; 243
    2a14:	fe 4f       	sbci	r31, 0xFE	; 254
    2a16:	91 83       	std	Z+1, r25	; 0x01
    2a18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1a:	de 01       	movw	r26, r28
    2a1c:	a1 5f       	subi	r26, 0xF1	; 241
    2a1e:	be 4f       	sbci	r27, 0xFE	; 254
    2a20:	fe 01       	movw	r30, r28
    2a22:	e1 5f       	subi	r30, 0xF1	; 241
    2a24:	fe 4f       	sbci	r31, 0xFE	; 254
    2a26:	80 81       	ld	r24, Z
    2a28:	91 81       	ldd	r25, Z+1	; 0x01
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	11 96       	adiw	r26, 0x01	; 1
    2a2e:	9c 93       	st	X, r25
    2a30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a32:	fe 01       	movw	r30, r28
    2a34:	e1 5f       	subi	r30, 0xF1	; 241
    2a36:	fe 4f       	sbci	r31, 0xFE	; 254
    2a38:	80 81       	ld	r24, Z
    2a3a:	91 81       	ldd	r25, Z+1	; 0x01
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	d1 f6       	brne	.-76     	; 0x29f4 <main+0xe30>
    2a40:	28 c0       	rjmp	.+80     	; 0x2a92 <main+0xece>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a42:	8e 01       	movw	r16, r28
    2a44:	01 5f       	subi	r16, 0xF1	; 241
    2a46:	1e 4f       	sbci	r17, 0xFE	; 254
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ef 5e       	subi	r30, 0xEF	; 239
    2a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4e:	60 81       	ld	r22, Z
    2a50:	71 81       	ldd	r23, Z+1	; 0x01
    2a52:	82 81       	ldd	r24, Z+2	; 0x02
    2a54:	93 81       	ldd	r25, Z+3	; 0x03
    2a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	f8 01       	movw	r30, r16
    2a60:	91 83       	std	Z+1, r25	; 0x01
    2a62:	80 83       	st	Z, r24
    2a64:	de 01       	movw	r26, r28
    2a66:	a5 5f       	subi	r26, 0xF5	; 245
    2a68:	be 4f       	sbci	r27, 0xFE	; 254
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e1 5f       	subi	r30, 0xF1	; 241
    2a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	11 96       	adiw	r26, 0x01	; 1
    2a76:	9c 93       	st	X, r25
    2a78:	8e 93       	st	-X, r24
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e5 5f       	subi	r30, 0xF5	; 245
    2a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <main+0xec0>
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e5 5f       	subi	r30, 0xF5	; 245
    2a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a8e:	91 83       	std	Z+1, r25	; 0x01
    2a90:	80 83       	st	Z, r24
		_delay_ms(500);
		operand1=8;
    2a92:	88 e0       	ldi	r24, 0x08	; 8
    2a94:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    2a98:	10 92 6a 00 	sts	0x006A, r1
    2a9c:	be c0       	rjmp	.+380    	; 0x2c1a <main+0x1056>
		break;
	case 9:
		Lcd_vidSendCommand(0x80);
    2a9e:	80 e8       	ldi	r24, 0x80	; 128
    2aa0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('9');
    2aa4:	89 e3       	ldi	r24, 0x39	; 57
    2aa6:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e9 5f       	subi	r30, 0xF9	; 249
    2aae:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	aa ef       	ldi	r26, 0xFA	; 250
    2ab6:	b3 e4       	ldi	r27, 0x43	; 67
    2ab8:	80 83       	st	Z, r24
    2aba:	91 83       	std	Z+1, r25	; 0x01
    2abc:	a2 83       	std	Z+2, r26	; 0x02
    2abe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac0:	8e 01       	movw	r16, r28
    2ac2:	0d 5f       	subi	r16, 0xFD	; 253
    2ac4:	1e 4f       	sbci	r17, 0xFE	; 254
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e9 5f       	subi	r30, 0xF9	; 249
    2aca:	fe 4f       	sbci	r31, 0xFE	; 254
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a ef       	ldi	r20, 0xFA	; 250
    2ada:	54 e4       	ldi	r21, 0x44	; 68
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	f8 01       	movw	r30, r16
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aee:	fe 01       	movw	r30, r28
    2af0:	ed 5f       	subi	r30, 0xFD	; 253
    2af2:	fe 4f       	sbci	r31, 0xFE	; 254
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	44 f4       	brge	.+16     	; 0x2b1c <main+0xf58>
		__ticks = 1;
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ef 5f       	subi	r30, 0xFF	; 255
    2b10:	fe 4f       	sbci	r31, 0xFE	; 254
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
    2b1a:	64 c0       	rjmp	.+200    	; 0x2be4 <main+0x1020>
	else if (__tmp > 65535)
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	ed 5f       	subi	r30, 0xFD	; 253
    2b20:	fe 4f       	sbci	r31, 0xFE	; 254
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	3f ef       	ldi	r19, 0xFF	; 255
    2b2e:	4f e7       	ldi	r20, 0x7F	; 127
    2b30:	57 e4       	ldi	r21, 0x47	; 71
    2b32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	0c f0       	brlt	.+2      	; 0x2b3c <main+0xf78>
    2b3a:	43 c0       	rjmp	.+134    	; 0x2bc2 <main+0xffe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e9 5f       	subi	r30, 0xF9	; 249
    2b40:	fe 4f       	sbci	r31, 0xFE	; 254
    2b42:	60 81       	ld	r22, Z
    2b44:	71 81       	ldd	r23, Z+1	; 0x01
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e2       	ldi	r20, 0x20	; 32
    2b50:	51 e4       	ldi	r21, 0x41	; 65
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8e 01       	movw	r16, r28
    2b5c:	0f 5f       	subi	r16, 0xFF	; 255
    2b5e:	1e 4f       	sbci	r17, 0xFE	; 254
    2b60:	bc 01       	movw	r22, r24
    2b62:	cd 01       	movw	r24, r26
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	f8 01       	movw	r30, r16
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
    2b72:	1f c0       	rjmp	.+62     	; 0x2bb2 <main+0xfee>
    2b74:	fe 01       	movw	r30, r28
    2b76:	e1 50       	subi	r30, 0x01	; 1
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	88 ec       	ldi	r24, 0xC8	; 200
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	80 83       	st	Z, r24
    2b82:	fe 01       	movw	r30, r28
    2b84:	e1 50       	subi	r30, 0x01	; 1
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <main+0xfc8>
    2b90:	fe 01       	movw	r30, r28
    2b92:	e1 50       	subi	r30, 0x01	; 1
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9a:	de 01       	movw	r26, r28
    2b9c:	af 5f       	subi	r26, 0xFF	; 255
    2b9e:	be 4f       	sbci	r27, 0xFE	; 254
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ef 5f       	subi	r30, 0xFF	; 255
    2ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba6:	80 81       	ld	r24, Z
    2ba8:	91 81       	ldd	r25, Z+1	; 0x01
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	11 96       	adiw	r26, 0x01	; 1
    2bae:	9c 93       	st	X, r25
    2bb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	ef 5f       	subi	r30, 0xFF	; 255
    2bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	d1 f6       	brne	.-76     	; 0x2b74 <main+0xfb0>
    2bc0:	27 c0       	rjmp	.+78     	; 0x2c10 <main+0x104c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	8e 01       	movw	r16, r28
    2bc4:	0f 5f       	subi	r16, 0xFF	; 255
    2bc6:	1e 4f       	sbci	r17, 0xFE	; 254
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ed 5f       	subi	r30, 0xFD	; 253
    2bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	f8 01       	movw	r30, r16
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
    2be4:	de 01       	movw	r26, r28
    2be6:	a3 50       	subi	r26, 0x03	; 3
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	ef 5f       	subi	r30, 0xFF	; 255
    2bee:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	8d 93       	st	X+, r24
    2bf6:	9c 93       	st	X, r25
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	e3 50       	subi	r30, 0x03	; 3
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	80 81       	ld	r24, Z
    2c00:	91 81       	ldd	r25, Z+1	; 0x01
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <main+0x103e>
    2c06:	fe 01       	movw	r30, r28
    2c08:	e3 50       	subi	r30, 0x03	; 3
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	80 83       	st	Z, r24
		_delay_ms(500);
		operand1=9;
    2c10:	89 e0       	ldi	r24, 0x09	; 9
    2c12:	80 93 6b 00 	sts	0x006B, r24
		key=0;
    2c16:	10 92 6a 00 	sts	0x006A, r1
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e7 50       	subi	r30, 0x07	; 7
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	aa ef       	ldi	r26, 0xFA	; 250
    2c26:	b4 e4       	ldi	r27, 0x44	; 68
    2c28:	80 83       	st	Z, r24
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	a2 83       	std	Z+2, r26	; 0x02
    2c2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c30:	8e 01       	movw	r16, r28
    2c32:	0b 50       	subi	r16, 0x0B	; 11
    2c34:	1f 4f       	sbci	r17, 0xFF	; 255
    2c36:	fe 01       	movw	r30, r28
    2c38:	e7 50       	subi	r30, 0x07	; 7
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	4a ef       	ldi	r20, 0xFA	; 250
    2c4a:	54 e4       	ldi	r21, 0x44	; 68
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	f8 01       	movw	r30, r16
    2c56:	80 83       	st	Z, r24
    2c58:	91 83       	std	Z+1, r25	; 0x01
    2c5a:	a2 83       	std	Z+2, r26	; 0x02
    2c5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c5e:	fe 01       	movw	r30, r28
    2c60:	eb 50       	subi	r30, 0x0B	; 11
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	60 81       	ld	r22, Z
    2c66:	71 81       	ldd	r23, Z+1	; 0x01
    2c68:	82 81       	ldd	r24, Z+2	; 0x02
    2c6a:	93 81       	ldd	r25, Z+3	; 0x03
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e8       	ldi	r20, 0x80	; 128
    2c72:	5f e3       	ldi	r21, 0x3F	; 63
    2c74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c78:	88 23       	and	r24, r24
    2c7a:	44 f4       	brge	.+16     	; 0x2c8c <main+0x10c8>
		__ticks = 1;
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ed 50       	subi	r30, 0x0D	; 13
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	80 83       	st	Z, r24
    2c8a:	64 c0       	rjmp	.+200    	; 0x2d54 <main+0x1190>
	else if (__tmp > 65535)
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	eb 50       	subi	r30, 0x0B	; 11
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	93 81       	ldd	r25, Z+3	; 0x03
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	3f ef       	ldi	r19, 0xFF	; 255
    2c9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ca0:	57 e4       	ldi	r21, 0x47	; 71
    2ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca6:	18 16       	cp	r1, r24
    2ca8:	0c f0       	brlt	.+2      	; 0x2cac <main+0x10e8>
    2caa:	43 c0       	rjmp	.+134    	; 0x2d32 <main+0x116e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cac:	fe 01       	movw	r30, r28
    2cae:	e7 50       	subi	r30, 0x07	; 7
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	60 81       	ld	r22, Z
    2cb4:	71 81       	ldd	r23, Z+1	; 0x01
    2cb6:	82 81       	ldd	r24, Z+2	; 0x02
    2cb8:	93 81       	ldd	r25, Z+3	; 0x03
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e2       	ldi	r20, 0x20	; 32
    2cc0:	51 e4       	ldi	r21, 0x41	; 65
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	8e 01       	movw	r16, r28
    2ccc:	0d 50       	subi	r16, 0x0D	; 13
    2cce:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	f8 01       	movw	r30, r16
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
    2ce2:	1f c0       	rjmp	.+62     	; 0x2d22 <main+0x115e>
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ef 50       	subi	r30, 0x0F	; 15
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	88 ec       	ldi	r24, 0xC8	; 200
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ef 50       	subi	r30, 0x0F	; 15
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	f1 f7       	brne	.-4      	; 0x2cfc <main+0x1138>
    2d00:	fe 01       	movw	r30, r28
    2d02:	ef 50       	subi	r30, 0x0F	; 15
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	91 83       	std	Z+1, r25	; 0x01
    2d08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0a:	de 01       	movw	r26, r28
    2d0c:	ad 50       	subi	r26, 0x0D	; 13
    2d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d10:	fe 01       	movw	r30, r28
    2d12:	ed 50       	subi	r30, 0x0D	; 13
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	80 81       	ld	r24, Z
    2d18:	91 81       	ldd	r25, Z+1	; 0x01
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	11 96       	adiw	r26, 0x01	; 1
    2d1e:	9c 93       	st	X, r25
    2d20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d22:	fe 01       	movw	r30, r28
    2d24:	ed 50       	subi	r30, 0x0D	; 13
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	91 81       	ldd	r25, Z+1	; 0x01
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	d1 f6       	brne	.-76     	; 0x2ce4 <main+0x1120>
    2d30:	31 c0       	rjmp	.+98     	; 0x2d94 <main+0x11d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d32:	8e 01       	movw	r16, r28
    2d34:	0d 50       	subi	r16, 0x0D	; 13
    2d36:	1f 4f       	sbci	r17, 0xFF	; 255
    2d38:	fe 01       	movw	r30, r28
    2d3a:	eb 50       	subi	r30, 0x0B	; 11
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	f8 01       	movw	r30, r16
    2d50:	91 83       	std	Z+1, r25	; 0x01
    2d52:	80 83       	st	Z, r24
    2d54:	de 01       	movw	r26, r28
    2d56:	a1 51       	subi	r26, 0x11	; 17
    2d58:	bf 4f       	sbci	r27, 0xFF	; 255
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	ed 50       	subi	r30, 0x0D	; 13
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	80 81       	ld	r24, Z
    2d62:	91 81       	ldd	r25, Z+1	; 0x01
    2d64:	11 96       	adiw	r26, 0x01	; 1
    2d66:	9c 93       	st	X, r25
    2d68:	8e 93       	st	-X, r24
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e1 51       	subi	r30, 0x11	; 17
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 81       	ld	r24, Z
    2d72:	91 81       	ldd	r25, Z+1	; 0x01
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <main+0x11b0>
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e1 51       	subi	r30, 0x11	; 17
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	91 83       	std	Z+1, r25	; 0x01
    2d80:	80 83       	st	Z, r24
    2d82:	08 c0       	rjmp	.+16     	; 0x2d94 <main+0x11d0>
		break;
	}
	_delay_ms(2000);
	}
	else if(key==0xFF){
    2d84:	80 91 6a 00 	lds	r24, 0x006A
    2d88:	8f 3f       	cpi	r24, 0xFF	; 255
    2d8a:	21 f4       	brne	.+8      	; 0x2d94 <main+0x11d0>
		PORTD=0xFF;
    2d8c:	e2 e3       	ldi	r30, 0x32	; 50
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	8f ef       	ldi	r24, 0xFF	; 255
    2d92:	80 83       	st	Z, r24
	}
	operator=Keypad_u8GetKey();
    2d94:	0e 94 41 08 	call	0x1082	; 0x1082 <Keypad_u8GetKey>
    2d98:	80 93 6e 00 	sts	0x006E, r24
	if(operator!=0xFF){
    2d9c:	80 91 6e 00 	lds	r24, 0x006E
    2da0:	8f 3f       	cpi	r24, 0xFF	; 255
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <main+0x11e2>
    2da4:	26 c3       	rjmp	.+1612   	; 0x33f2 <main+0x182e>
	if(operator=='+'){
    2da6:	80 91 6e 00 	lds	r24, 0x006E
    2daa:	8b 32       	cpi	r24, 0x2B	; 43
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <main+0x11ec>
    2dae:	c3 c0       	rjmp	.+390    	; 0x2f36 <main+0x1372>
		Lcd_vidSendCommand(0x81);
    2db0:	81 e8       	ldi	r24, 0x81	; 129
    2db2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar(operator);
    2db6:	80 91 6e 00 	lds	r24, 0x006E
    2dba:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		result=operand1+operand2;
    2dbe:	90 91 6b 00 	lds	r25, 0x006B
    2dc2:	80 91 68 00 	lds	r24, 0x0068
    2dc6:	89 0f       	add	r24, r25
    2dc8:	80 93 6c 00 	sts	0x006C, r24
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e5 51       	subi	r30, 0x15	; 21
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	aa ef       	ldi	r26, 0xFA	; 250
    2dd8:	b3 e4       	ldi	r27, 0x43	; 67
    2dda:	80 83       	st	Z, r24
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	a2 83       	std	Z+2, r26	; 0x02
    2de0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de2:	8e 01       	movw	r16, r28
    2de4:	09 51       	subi	r16, 0x19	; 25
    2de6:	1f 4f       	sbci	r17, 0xFF	; 255
    2de8:	fe 01       	movw	r30, r28
    2dea:	e5 51       	subi	r30, 0x15	; 21
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	60 81       	ld	r22, Z
    2df0:	71 81       	ldd	r23, Z+1	; 0x01
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	4a ef       	ldi	r20, 0xFA	; 250
    2dfc:	54 e4       	ldi	r21, 0x44	; 68
    2dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	f8 01       	movw	r30, r16
    2e08:	80 83       	st	Z, r24
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	a2 83       	std	Z+2, r26	; 0x02
    2e0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e10:	fe 01       	movw	r30, r28
    2e12:	e9 51       	subi	r30, 0x19	; 25
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	60 81       	ld	r22, Z
    2e18:	71 81       	ldd	r23, Z+1	; 0x01
    2e1a:	82 81       	ldd	r24, Z+2	; 0x02
    2e1c:	93 81       	ldd	r25, Z+3	; 0x03
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e8       	ldi	r20, 0x80	; 128
    2e24:	5f e3       	ldi	r21, 0x3F	; 63
    2e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e2a:	88 23       	and	r24, r24
    2e2c:	44 f4       	brge	.+16     	; 0x2e3e <main+0x127a>
		__ticks = 1;
    2e2e:	fe 01       	movw	r30, r28
    2e30:	eb 51       	subi	r30, 0x1B	; 27
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	80 83       	st	Z, r24
    2e3c:	64 c0       	rjmp	.+200    	; 0x2f06 <main+0x1342>
	else if (__tmp > 65535)
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e9 51       	subi	r30, 0x19	; 25
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	3f ef       	ldi	r19, 0xFF	; 255
    2e50:	4f e7       	ldi	r20, 0x7F	; 127
    2e52:	57 e4       	ldi	r21, 0x47	; 71
    2e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e58:	18 16       	cp	r1, r24
    2e5a:	0c f0       	brlt	.+2      	; 0x2e5e <main+0x129a>
    2e5c:	43 c0       	rjmp	.+134    	; 0x2ee4 <main+0x1320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5e:	fe 01       	movw	r30, r28
    2e60:	e5 51       	subi	r30, 0x15	; 21
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	60 81       	ld	r22, Z
    2e66:	71 81       	ldd	r23, Z+1	; 0x01
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	93 81       	ldd	r25, Z+3	; 0x03
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e2       	ldi	r20, 0x20	; 32
    2e72:	51 e4       	ldi	r21, 0x41	; 65
    2e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	8e 01       	movw	r16, r28
    2e7e:	0b 51       	subi	r16, 0x1B	; 27
    2e80:	1f 4f       	sbci	r17, 0xFF	; 255
    2e82:	bc 01       	movw	r22, r24
    2e84:	cd 01       	movw	r24, r26
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	f8 01       	movw	r30, r16
    2e90:	91 83       	std	Z+1, r25	; 0x01
    2e92:	80 83       	st	Z, r24
    2e94:	1f c0       	rjmp	.+62     	; 0x2ed4 <main+0x1310>
    2e96:	fe 01       	movw	r30, r28
    2e98:	ed 51       	subi	r30, 0x1D	; 29
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	88 ec       	ldi	r24, 0xC8	; 200
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	ed 51       	subi	r30, 0x1D	; 29
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	80 81       	ld	r24, Z
    2eac:	91 81       	ldd	r25, Z+1	; 0x01
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <main+0x12ea>
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	ed 51       	subi	r30, 0x1D	; 29
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebc:	de 01       	movw	r26, r28
    2ebe:	ab 51       	subi	r26, 0x1B	; 27
    2ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	eb 51       	subi	r30, 0x1B	; 27
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	11 96       	adiw	r26, 0x01	; 1
    2ed0:	9c 93       	st	X, r25
    2ed2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	eb 51       	subi	r30, 0x1B	; 27
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	80 81       	ld	r24, Z
    2edc:	91 81       	ldd	r25, Z+1	; 0x01
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	d1 f6       	brne	.-76     	; 0x2e96 <main+0x12d2>
    2ee2:	8f c2       	rjmp	.+1310   	; 0x3402 <main+0x183e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee4:	8e 01       	movw	r16, r28
    2ee6:	0b 51       	subi	r16, 0x1B	; 27
    2ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eea:	fe 01       	movw	r30, r28
    2eec:	e9 51       	subi	r30, 0x19	; 25
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	60 81       	ld	r22, Z
    2ef2:	71 81       	ldd	r23, Z+1	; 0x01
    2ef4:	82 81       	ldd	r24, Z+2	; 0x02
    2ef6:	93 81       	ldd	r25, Z+3	; 0x03
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	f8 01       	movw	r30, r16
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	80 83       	st	Z, r24
    2f06:	de 01       	movw	r26, r28
    2f08:	af 51       	subi	r26, 0x1F	; 31
    2f0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	eb 51       	subi	r30, 0x1B	; 27
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	80 81       	ld	r24, Z
    2f14:	91 81       	ldd	r25, Z+1	; 0x01
    2f16:	11 96       	adiw	r26, 0x01	; 1
    2f18:	9c 93       	st	X, r25
    2f1a:	8e 93       	st	-X, r24
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	ef 51       	subi	r30, 0x1F	; 31
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	80 81       	ld	r24, Z
    2f24:	91 81       	ldd	r25, Z+1	; 0x01
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <main+0x1362>
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ef 51       	subi	r30, 0x1F	; 31
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
    2f34:	66 c2       	rjmp	.+1228   	; 0x3402 <main+0x183e>
		_delay_ms(500);
	}
	else if(operator=='-'){
    2f36:	80 91 6e 00 	lds	r24, 0x006E
    2f3a:	8d 32       	cpi	r24, 0x2D	; 45
    2f3c:	09 f0       	breq	.+2      	; 0x2f40 <main+0x137c>
    2f3e:	c5 c0       	rjmp	.+394    	; 0x30ca <main+0x1506>
		Lcd_vidSendCommand(0x81);
    2f40:	81 e8       	ldi	r24, 0x81	; 129
    2f42:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar(operator);
    2f46:	80 91 6e 00 	lds	r24, 0x006E
    2f4a:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		result=operand1-operand2;
    2f4e:	90 91 6b 00 	lds	r25, 0x006B
    2f52:	80 91 68 00 	lds	r24, 0x0068
    2f56:	f9 2f       	mov	r31, r25
    2f58:	f8 1b       	sub	r31, r24
    2f5a:	8f 2f       	mov	r24, r31
    2f5c:	80 93 6c 00 	sts	0x006C, r24
    2f60:	fe 01       	movw	r30, r28
    2f62:	e3 52       	subi	r30, 0x23	; 35
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	aa ef       	ldi	r26, 0xFA	; 250
    2f6c:	b3 e4       	ldi	r27, 0x43	; 67
    2f6e:	80 83       	st	Z, r24
    2f70:	91 83       	std	Z+1, r25	; 0x01
    2f72:	a2 83       	std	Z+2, r26	; 0x02
    2f74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f76:	8e 01       	movw	r16, r28
    2f78:	07 52       	subi	r16, 0x27	; 39
    2f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	e3 52       	subi	r30, 0x23	; 35
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	60 81       	ld	r22, Z
    2f84:	71 81       	ldd	r23, Z+1	; 0x01
    2f86:	82 81       	ldd	r24, Z+2	; 0x02
    2f88:	93 81       	ldd	r25, Z+3	; 0x03
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	4a ef       	ldi	r20, 0xFA	; 250
    2f90:	54 e4       	ldi	r21, 0x44	; 68
    2f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	f8 01       	movw	r30, r16
    2f9c:	80 83       	st	Z, r24
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	a2 83       	std	Z+2, r26	; 0x02
    2fa2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e7 52       	subi	r30, 0x27	; 39
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	60 81       	ld	r22, Z
    2fac:	71 81       	ldd	r23, Z+1	; 0x01
    2fae:	82 81       	ldd	r24, Z+2	; 0x02
    2fb0:	93 81       	ldd	r25, Z+3	; 0x03
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e8       	ldi	r20, 0x80	; 128
    2fb8:	5f e3       	ldi	r21, 0x3F	; 63
    2fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fbe:	88 23       	and	r24, r24
    2fc0:	44 f4       	brge	.+16     	; 0x2fd2 <main+0x140e>
		__ticks = 1;
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e9 52       	subi	r30, 0x29	; 41
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	80 83       	st	Z, r24
    2fd0:	64 c0       	rjmp	.+200    	; 0x309a <main+0x14d6>
	else if (__tmp > 65535)
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e7 52       	subi	r30, 0x27	; 39
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	60 81       	ld	r22, Z
    2fda:	71 81       	ldd	r23, Z+1	; 0x01
    2fdc:	82 81       	ldd	r24, Z+2	; 0x02
    2fde:	93 81       	ldd	r25, Z+3	; 0x03
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	3f ef       	ldi	r19, 0xFF	; 255
    2fe4:	4f e7       	ldi	r20, 0x7F	; 127
    2fe6:	57 e4       	ldi	r21, 0x47	; 71
    2fe8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fec:	18 16       	cp	r1, r24
    2fee:	0c f0       	brlt	.+2      	; 0x2ff2 <main+0x142e>
    2ff0:	43 c0       	rjmp	.+134    	; 0x3078 <main+0x14b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	e3 52       	subi	r30, 0x23	; 35
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	60 81       	ld	r22, Z
    2ffa:	71 81       	ldd	r23, Z+1	; 0x01
    2ffc:	82 81       	ldd	r24, Z+2	; 0x02
    2ffe:	93 81       	ldd	r25, Z+3	; 0x03
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e2       	ldi	r20, 0x20	; 32
    3006:	51 e4       	ldi	r21, 0x41	; 65
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	8e 01       	movw	r16, r28
    3012:	09 52       	subi	r16, 0x29	; 41
    3014:	1f 4f       	sbci	r17, 0xFF	; 255
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	f8 01       	movw	r30, r16
    3024:	91 83       	std	Z+1, r25	; 0x01
    3026:	80 83       	st	Z, r24
    3028:	1f c0       	rjmp	.+62     	; 0x3068 <main+0x14a4>
    302a:	fe 01       	movw	r30, r28
    302c:	eb 52       	subi	r30, 0x2B	; 43
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	88 ec       	ldi	r24, 0xC8	; 200
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	80 83       	st	Z, r24
    3038:	fe 01       	movw	r30, r28
    303a:	eb 52       	subi	r30, 0x2B	; 43
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	80 81       	ld	r24, Z
    3040:	91 81       	ldd	r25, Z+1	; 0x01
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <main+0x147e>
    3046:	fe 01       	movw	r30, r28
    3048:	eb 52       	subi	r30, 0x2B	; 43
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	91 83       	std	Z+1, r25	; 0x01
    304e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3050:	de 01       	movw	r26, r28
    3052:	a9 52       	subi	r26, 0x29	; 41
    3054:	bf 4f       	sbci	r27, 0xFF	; 255
    3056:	fe 01       	movw	r30, r28
    3058:	e9 52       	subi	r30, 0x29	; 41
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 81       	ld	r24, Z
    305e:	91 81       	ldd	r25, Z+1	; 0x01
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	11 96       	adiw	r26, 0x01	; 1
    3064:	9c 93       	st	X, r25
    3066:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3068:	fe 01       	movw	r30, r28
    306a:	e9 52       	subi	r30, 0x29	; 41
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	80 81       	ld	r24, Z
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	d1 f6       	brne	.-76     	; 0x302a <main+0x1466>
    3076:	c5 c1       	rjmp	.+906    	; 0x3402 <main+0x183e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3078:	8e 01       	movw	r16, r28
    307a:	09 52       	subi	r16, 0x29	; 41
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	fe 01       	movw	r30, r28
    3080:	e7 52       	subi	r30, 0x27	; 39
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	60 81       	ld	r22, Z
    3086:	71 81       	ldd	r23, Z+1	; 0x01
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	f8 01       	movw	r30, r16
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
    309a:	de 01       	movw	r26, r28
    309c:	ad 52       	subi	r26, 0x2D	; 45
    309e:	bf 4f       	sbci	r27, 0xFF	; 255
    30a0:	fe 01       	movw	r30, r28
    30a2:	e9 52       	subi	r30, 0x29	; 41
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	11 96       	adiw	r26, 0x01	; 1
    30ac:	9c 93       	st	X, r25
    30ae:	8e 93       	st	-X, r24
    30b0:	fe 01       	movw	r30, r28
    30b2:	ed 52       	subi	r30, 0x2D	; 45
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <main+0x14f6>
    30be:	fe 01       	movw	r30, r28
    30c0:	ed 52       	subi	r30, 0x2D	; 45
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	80 83       	st	Z, r24
    30c8:	9c c1       	rjmp	.+824    	; 0x3402 <main+0x183e>
		_delay_ms(500);
	}
	else if(operator=='*'){
    30ca:	80 91 6e 00 	lds	r24, 0x006E
    30ce:	8a 32       	cpi	r24, 0x2A	; 42
    30d0:	09 f0       	breq	.+2      	; 0x30d4 <main+0x1510>
    30d2:	c5 c0       	rjmp	.+394    	; 0x325e <main+0x169a>
		Lcd_vidSendCommand(0x81);
    30d4:	81 e8       	ldi	r24, 0x81	; 129
    30d6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar(operator);
    30da:	80 91 6e 00 	lds	r24, 0x006E
    30de:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		result=operand1*operand2;
    30e2:	90 91 6b 00 	lds	r25, 0x006B
    30e6:	80 91 68 00 	lds	r24, 0x0068
    30ea:	98 9f       	mul	r25, r24
    30ec:	80 2d       	mov	r24, r0
    30ee:	11 24       	eor	r1, r1
    30f0:	80 93 6c 00 	sts	0x006C, r24
    30f4:	fe 01       	movw	r30, r28
    30f6:	e1 53       	subi	r30, 0x31	; 49
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	aa ef       	ldi	r26, 0xFA	; 250
    3100:	b3 e4       	ldi	r27, 0x43	; 67
    3102:	80 83       	st	Z, r24
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	a2 83       	std	Z+2, r26	; 0x02
    3108:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310a:	8e 01       	movw	r16, r28
    310c:	05 53       	subi	r16, 0x35	; 53
    310e:	1f 4f       	sbci	r17, 0xFF	; 255
    3110:	fe 01       	movw	r30, r28
    3112:	e1 53       	subi	r30, 0x31	; 49
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	93 81       	ldd	r25, Z+3	; 0x03
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	4a ef       	ldi	r20, 0xFA	; 250
    3124:	54 e4       	ldi	r21, 0x44	; 68
    3126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	f8 01       	movw	r30, r16
    3130:	80 83       	st	Z, r24
    3132:	91 83       	std	Z+1, r25	; 0x01
    3134:	a2 83       	std	Z+2, r26	; 0x02
    3136:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3138:	fe 01       	movw	r30, r28
    313a:	e5 53       	subi	r30, 0x35	; 53
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	60 81       	ld	r22, Z
    3140:	71 81       	ldd	r23, Z+1	; 0x01
    3142:	82 81       	ldd	r24, Z+2	; 0x02
    3144:	93 81       	ldd	r25, Z+3	; 0x03
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e8       	ldi	r20, 0x80	; 128
    314c:	5f e3       	ldi	r21, 0x3F	; 63
    314e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3152:	88 23       	and	r24, r24
    3154:	44 f4       	brge	.+16     	; 0x3166 <main+0x15a2>
		__ticks = 1;
    3156:	fe 01       	movw	r30, r28
    3158:	e7 53       	subi	r30, 0x37	; 55
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
    3164:	64 c0       	rjmp	.+200    	; 0x322e <main+0x166a>
	else if (__tmp > 65535)
    3166:	fe 01       	movw	r30, r28
    3168:	e5 53       	subi	r30, 0x35	; 53
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	3f ef       	ldi	r19, 0xFF	; 255
    3178:	4f e7       	ldi	r20, 0x7F	; 127
    317a:	57 e4       	ldi	r21, 0x47	; 71
    317c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3180:	18 16       	cp	r1, r24
    3182:	0c f0       	brlt	.+2      	; 0x3186 <main+0x15c2>
    3184:	43 c0       	rjmp	.+134    	; 0x320c <main+0x1648>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3186:	fe 01       	movw	r30, r28
    3188:	e1 53       	subi	r30, 0x31	; 49
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	60 81       	ld	r22, Z
    318e:	71 81       	ldd	r23, Z+1	; 0x01
    3190:	82 81       	ldd	r24, Z+2	; 0x02
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e2       	ldi	r20, 0x20	; 32
    319a:	51 e4       	ldi	r21, 0x41	; 65
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	8e 01       	movw	r16, r28
    31a6:	07 53       	subi	r16, 0x37	; 55
    31a8:	1f 4f       	sbci	r17, 0xFF	; 255
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	f8 01       	movw	r30, r16
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	80 83       	st	Z, r24
    31bc:	1f c0       	rjmp	.+62     	; 0x31fc <main+0x1638>
    31be:	fe 01       	movw	r30, r28
    31c0:	e9 53       	subi	r30, 0x39	; 57
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	88 ec       	ldi	r24, 0xC8	; 200
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    31cc:	fe 01       	movw	r30, r28
    31ce:	e9 53       	subi	r30, 0x39	; 57
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	91 81       	ldd	r25, Z+1	; 0x01
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <main+0x1612>
    31da:	fe 01       	movw	r30, r28
    31dc:	e9 53       	subi	r30, 0x39	; 57
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e4:	de 01       	movw	r26, r28
    31e6:	a7 53       	subi	r26, 0x37	; 55
    31e8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ea:	fe 01       	movw	r30, r28
    31ec:	e7 53       	subi	r30, 0x37	; 55
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 81       	ld	r24, Z
    31f2:	91 81       	ldd	r25, Z+1	; 0x01
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	11 96       	adiw	r26, 0x01	; 1
    31f8:	9c 93       	st	X, r25
    31fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fc:	fe 01       	movw	r30, r28
    31fe:	e7 53       	subi	r30, 0x37	; 55
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	d1 f6       	brne	.-76     	; 0x31be <main+0x15fa>
    320a:	fb c0       	rjmp	.+502    	; 0x3402 <main+0x183e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320c:	8e 01       	movw	r16, r28
    320e:	07 53       	subi	r16, 0x37	; 55
    3210:	1f 4f       	sbci	r17, 0xFF	; 255
    3212:	fe 01       	movw	r30, r28
    3214:	e5 53       	subi	r30, 0x35	; 53
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	60 81       	ld	r22, Z
    321a:	71 81       	ldd	r23, Z+1	; 0x01
    321c:	82 81       	ldd	r24, Z+2	; 0x02
    321e:	93 81       	ldd	r25, Z+3	; 0x03
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	f8 01       	movw	r30, r16
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	80 83       	st	Z, r24
    322e:	de 01       	movw	r26, r28
    3230:	ab 53       	subi	r26, 0x3B	; 59
    3232:	bf 4f       	sbci	r27, 0xFF	; 255
    3234:	fe 01       	movw	r30, r28
    3236:	e7 53       	subi	r30, 0x37	; 55
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	11 96       	adiw	r26, 0x01	; 1
    3240:	9c 93       	st	X, r25
    3242:	8e 93       	st	-X, r24
    3244:	fe 01       	movw	r30, r28
    3246:	eb 53       	subi	r30, 0x3B	; 59
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	80 81       	ld	r24, Z
    324c:	91 81       	ldd	r25, Z+1	; 0x01
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <main+0x168a>
    3252:	fe 01       	movw	r30, r28
    3254:	eb 53       	subi	r30, 0x3B	; 59
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
    325c:	d2 c0       	rjmp	.+420    	; 0x3402 <main+0x183e>
		_delay_ms(500);
	}
	else if(operator=='/'){
    325e:	80 91 6e 00 	lds	r24, 0x006E
    3262:	8f 32       	cpi	r24, 0x2F	; 47
    3264:	09 f0       	breq	.+2      	; 0x3268 <main+0x16a4>
    3266:	cd c0       	rjmp	.+410    	; 0x3402 <main+0x183e>
		Lcd_vidSendCommand(0x81);
    3268:	81 e8       	ldi	r24, 0x81	; 129
    326a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar(operator);
    326e:	80 91 6e 00 	lds	r24, 0x006E
    3272:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
		result=operand1/operand2;
    3276:	80 91 6b 00 	lds	r24, 0x006B
    327a:	90 91 68 00 	lds	r25, 0x0068
    327e:	69 2f       	mov	r22, r25
    3280:	0e 94 2f 23 	call	0x465e	; 0x465e <__udivmodqi4>
    3284:	80 93 6c 00 	sts	0x006C, r24
    3288:	fe 01       	movw	r30, r28
    328a:	ef 53       	subi	r30, 0x3F	; 63
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	aa ef       	ldi	r26, 0xFA	; 250
    3294:	b3 e4       	ldi	r27, 0x43	; 67
    3296:	80 83       	st	Z, r24
    3298:	91 83       	std	Z+1, r25	; 0x01
    329a:	a2 83       	std	Z+2, r26	; 0x02
    329c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329e:	8e 01       	movw	r16, r28
    32a0:	03 54       	subi	r16, 0x43	; 67
    32a2:	1f 4f       	sbci	r17, 0xFF	; 255
    32a4:	fe 01       	movw	r30, r28
    32a6:	ef 53       	subi	r30, 0x3F	; 63
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	60 81       	ld	r22, Z
    32ac:	71 81       	ldd	r23, Z+1	; 0x01
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	93 81       	ldd	r25, Z+3	; 0x03
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	4a ef       	ldi	r20, 0xFA	; 250
    32b8:	54 e4       	ldi	r21, 0x44	; 68
    32ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	f8 01       	movw	r30, r16
    32c4:	80 83       	st	Z, r24
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	a2 83       	std	Z+2, r26	; 0x02
    32ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32cc:	fe 01       	movw	r30, r28
    32ce:	e3 54       	subi	r30, 0x43	; 67
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	60 81       	ld	r22, Z
    32d4:	71 81       	ldd	r23, Z+1	; 0x01
    32d6:	82 81       	ldd	r24, Z+2	; 0x02
    32d8:	93 81       	ldd	r25, Z+3	; 0x03
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	40 e8       	ldi	r20, 0x80	; 128
    32e0:	5f e3       	ldi	r21, 0x3F	; 63
    32e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e6:	88 23       	and	r24, r24
    32e8:	44 f4       	brge	.+16     	; 0x32fa <main+0x1736>
		__ticks = 1;
    32ea:	fe 01       	movw	r30, r28
    32ec:	e5 54       	subi	r30, 0x45	; 69
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	91 83       	std	Z+1, r25	; 0x01
    32f6:	80 83       	st	Z, r24
    32f8:	64 c0       	rjmp	.+200    	; 0x33c2 <main+0x17fe>
	else if (__tmp > 65535)
    32fa:	fe 01       	movw	r30, r28
    32fc:	e3 54       	subi	r30, 0x43	; 67
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	60 81       	ld	r22, Z
    3302:	71 81       	ldd	r23, Z+1	; 0x01
    3304:	82 81       	ldd	r24, Z+2	; 0x02
    3306:	93 81       	ldd	r25, Z+3	; 0x03
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	3f ef       	ldi	r19, 0xFF	; 255
    330c:	4f e7       	ldi	r20, 0x7F	; 127
    330e:	57 e4       	ldi	r21, 0x47	; 71
    3310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3314:	18 16       	cp	r1, r24
    3316:	0c f0       	brlt	.+2      	; 0x331a <main+0x1756>
    3318:	43 c0       	rjmp	.+134    	; 0x33a0 <main+0x17dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331a:	fe 01       	movw	r30, r28
    331c:	ef 53       	subi	r30, 0x3F	; 63
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	60 81       	ld	r22, Z
    3322:	71 81       	ldd	r23, Z+1	; 0x01
    3324:	82 81       	ldd	r24, Z+2	; 0x02
    3326:	93 81       	ldd	r25, Z+3	; 0x03
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e2       	ldi	r20, 0x20	; 32
    332e:	51 e4       	ldi	r21, 0x41	; 65
    3330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	8e 01       	movw	r16, r28
    333a:	05 54       	subi	r16, 0x45	; 69
    333c:	1f 4f       	sbci	r17, 0xFF	; 255
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	f8 01       	movw	r30, r16
    334c:	91 83       	std	Z+1, r25	; 0x01
    334e:	80 83       	st	Z, r24
    3350:	1f c0       	rjmp	.+62     	; 0x3390 <main+0x17cc>
    3352:	fe 01       	movw	r30, r28
    3354:	e7 54       	subi	r30, 0x47	; 71
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	88 ec       	ldi	r24, 0xC8	; 200
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	91 83       	std	Z+1, r25	; 0x01
    335e:	80 83       	st	Z, r24
    3360:	fe 01       	movw	r30, r28
    3362:	e7 54       	subi	r30, 0x47	; 71
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 81       	ld	r24, Z
    3368:	91 81       	ldd	r25, Z+1	; 0x01
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	f1 f7       	brne	.-4      	; 0x336a <main+0x17a6>
    336e:	fe 01       	movw	r30, r28
    3370:	e7 54       	subi	r30, 0x47	; 71
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	91 83       	std	Z+1, r25	; 0x01
    3376:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3378:	de 01       	movw	r26, r28
    337a:	a5 54       	subi	r26, 0x45	; 69
    337c:	bf 4f       	sbci	r27, 0xFF	; 255
    337e:	fe 01       	movw	r30, r28
    3380:	e5 54       	subi	r30, 0x45	; 69
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	80 81       	ld	r24, Z
    3386:	91 81       	ldd	r25, Z+1	; 0x01
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	11 96       	adiw	r26, 0x01	; 1
    338c:	9c 93       	st	X, r25
    338e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3390:	fe 01       	movw	r30, r28
    3392:	e5 54       	subi	r30, 0x45	; 69
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	80 81       	ld	r24, Z
    3398:	91 81       	ldd	r25, Z+1	; 0x01
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	d1 f6       	brne	.-76     	; 0x3352 <main+0x178e>
    339e:	31 c0       	rjmp	.+98     	; 0x3402 <main+0x183e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a0:	8e 01       	movw	r16, r28
    33a2:	05 54       	subi	r16, 0x45	; 69
    33a4:	1f 4f       	sbci	r17, 0xFF	; 255
    33a6:	fe 01       	movw	r30, r28
    33a8:	e3 54       	subi	r30, 0x43	; 67
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	60 81       	ld	r22, Z
    33ae:	71 81       	ldd	r23, Z+1	; 0x01
    33b0:	82 81       	ldd	r24, Z+2	; 0x02
    33b2:	93 81       	ldd	r25, Z+3	; 0x03
    33b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	f8 01       	movw	r30, r16
    33be:	91 83       	std	Z+1, r25	; 0x01
    33c0:	80 83       	st	Z, r24
    33c2:	de 01       	movw	r26, r28
    33c4:	a9 54       	subi	r26, 0x49	; 73
    33c6:	bf 4f       	sbci	r27, 0xFF	; 255
    33c8:	fe 01       	movw	r30, r28
    33ca:	e5 54       	subi	r30, 0x45	; 69
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	80 81       	ld	r24, Z
    33d0:	91 81       	ldd	r25, Z+1	; 0x01
    33d2:	11 96       	adiw	r26, 0x01	; 1
    33d4:	9c 93       	st	X, r25
    33d6:	8e 93       	st	-X, r24
    33d8:	fe 01       	movw	r30, r28
    33da:	e9 54       	subi	r30, 0x49	; 73
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	80 81       	ld	r24, Z
    33e0:	91 81       	ldd	r25, Z+1	; 0x01
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <main+0x181e>
    33e6:	fe 01       	movw	r30, r28
    33e8:	e9 54       	subi	r30, 0x49	; 73
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	91 83       	std	Z+1, r25	; 0x01
    33ee:	80 83       	st	Z, r24
    33f0:	08 c0       	rjmp	.+16     	; 0x3402 <main+0x183e>
		_delay_ms(500);
	}
	}
	else if(operator==0xFF){
    33f2:	80 91 6e 00 	lds	r24, 0x006E
    33f6:	8f 3f       	cpi	r24, 0xFF	; 255
    33f8:	21 f4       	brne	.+8      	; 0x3402 <main+0x183e>
		PORTD=0xFF;
    33fa:	e2 e3       	ldi	r30, 0x32	; 50
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	8f ef       	ldi	r24, 0xFF	; 255
    3400:	80 83       	st	Z, r24
	}
	key1=Keypad_u8GetKey();
    3402:	0e 94 41 08 	call	0x1082	; 0x1082 <Keypad_u8GetKey>
    3406:	80 93 69 00 	sts	0x0069, r24
	if(key1!=0xFF){
    340a:	80 91 69 00 	lds	r24, 0x0069
    340e:	8f 3f       	cpi	r24, 0xFF	; 255
    3410:	09 f4       	brne	.+2      	; 0x3414 <main+0x1850>
    3412:	9b c7       	rjmp	.+3894   	; 0x434a <main+0x2786>
	switch(key1){
    3414:	80 91 69 00 	lds	r24, 0x0069
    3418:	28 2f       	mov	r18, r24
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	c7 57       	subi	r28, 0x77	; 119
    341e:	de 4f       	sbci	r29, 0xFE	; 254
    3420:	39 83       	std	Y+1, r19	; 0x01
    3422:	28 83       	st	Y, r18
    3424:	c9 58       	subi	r28, 0x89	; 137
    3426:	d1 40       	sbci	r29, 0x01	; 1
    3428:	c7 57       	subi	r28, 0x77	; 119
    342a:	de 4f       	sbci	r29, 0xFE	; 254
    342c:	88 81       	ld	r24, Y
    342e:	99 81       	ldd	r25, Y+1	; 0x01
    3430:	c9 58       	subi	r28, 0x89	; 137
    3432:	d1 40       	sbci	r29, 0x01	; 1
    3434:	84 30       	cpi	r24, 0x04	; 4
    3436:	91 05       	cpc	r25, r1
    3438:	09 f4       	brne	.+2      	; 0x343c <main+0x1878>
    343a:	78 c3       	rjmp	.+1776   	; 0x3b2c <main+0x1f68>
    343c:	c7 57       	subi	r28, 0x77	; 119
    343e:	de 4f       	sbci	r29, 0xFE	; 254
    3440:	e8 81       	ld	r30, Y
    3442:	f9 81       	ldd	r31, Y+1	; 0x01
    3444:	c9 58       	subi	r28, 0x89	; 137
    3446:	d1 40       	sbci	r29, 0x01	; 1
    3448:	e5 30       	cpi	r30, 0x05	; 5
    344a:	f1 05       	cpc	r31, r1
    344c:	9c f5       	brge	.+102    	; 0x34b4 <main+0x18f0>
    344e:	c7 57       	subi	r28, 0x77	; 119
    3450:	de 4f       	sbci	r29, 0xFE	; 254
    3452:	28 81       	ld	r18, Y
    3454:	39 81       	ldd	r19, Y+1	; 0x01
    3456:	c9 58       	subi	r28, 0x89	; 137
    3458:	d1 40       	sbci	r29, 0x01	; 1
    345a:	21 30       	cpi	r18, 0x01	; 1
    345c:	31 05       	cpc	r19, r1
    345e:	09 f4       	brne	.+2      	; 0x3462 <main+0x189e>
    3460:	25 c1       	rjmp	.+586    	; 0x36ac <main+0x1ae8>
    3462:	c7 57       	subi	r28, 0x77	; 119
    3464:	de 4f       	sbci	r29, 0xFE	; 254
    3466:	88 81       	ld	r24, Y
    3468:	99 81       	ldd	r25, Y+1	; 0x01
    346a:	c9 58       	subi	r28, 0x89	; 137
    346c:	d1 40       	sbci	r29, 0x01	; 1
    346e:	82 30       	cpi	r24, 0x02	; 2
    3470:	91 05       	cpc	r25, r1
    3472:	5c f4       	brge	.+22     	; 0x348a <main+0x18c6>
    3474:	c7 57       	subi	r28, 0x77	; 119
    3476:	de 4f       	sbci	r29, 0xFE	; 254
    3478:	e8 81       	ld	r30, Y
    347a:	f9 81       	ldd	r31, Y+1	; 0x01
    347c:	c9 58       	subi	r28, 0x89	; 137
    347e:	d1 40       	sbci	r29, 0x01	; 1
    3480:	30 97       	sbiw	r30, 0x00	; 0
    3482:	09 f4       	brne	.+2      	; 0x3486 <main+0x18c2>
    3484:	54 c0       	rjmp	.+168    	; 0x352e <main+0x196a>
    3486:	0c 94 ad 21 	jmp	0x435a	; 0x435a <main+0x2796>
    348a:	c7 57       	subi	r28, 0x77	; 119
    348c:	de 4f       	sbci	r29, 0xFE	; 254
    348e:	28 81       	ld	r18, Y
    3490:	39 81       	ldd	r19, Y+1	; 0x01
    3492:	c9 58       	subi	r28, 0x89	; 137
    3494:	d1 40       	sbci	r29, 0x01	; 1
    3496:	22 30       	cpi	r18, 0x02	; 2
    3498:	31 05       	cpc	r19, r1
    349a:	09 f4       	brne	.+2      	; 0x349e <main+0x18da>
    349c:	c7 c1       	rjmp	.+910    	; 0x382c <main+0x1c68>
    349e:	c7 57       	subi	r28, 0x77	; 119
    34a0:	de 4f       	sbci	r29, 0xFE	; 254
    34a2:	88 81       	ld	r24, Y
    34a4:	99 81       	ldd	r25, Y+1	; 0x01
    34a6:	c9 58       	subi	r28, 0x89	; 137
    34a8:	d1 40       	sbci	r29, 0x01	; 1
    34aa:	83 30       	cpi	r24, 0x03	; 3
    34ac:	91 05       	cpc	r25, r1
    34ae:	09 f4       	brne	.+2      	; 0x34b2 <main+0x18ee>
    34b0:	7d c2       	rjmp	.+1274   	; 0x39ac <main+0x1de8>
    34b2:	53 c7       	rjmp	.+3750   	; 0x435a <main+0x2796>
    34b4:	c7 57       	subi	r28, 0x77	; 119
    34b6:	de 4f       	sbci	r29, 0xFE	; 254
    34b8:	e8 81       	ld	r30, Y
    34ba:	f9 81       	ldd	r31, Y+1	; 0x01
    34bc:	c9 58       	subi	r28, 0x89	; 137
    34be:	d1 40       	sbci	r29, 0x01	; 1
    34c0:	e7 30       	cpi	r30, 0x07	; 7
    34c2:	f1 05       	cpc	r31, r1
    34c4:	09 f4       	brne	.+2      	; 0x34c8 <main+0x1904>
    34c6:	72 c5       	rjmp	.+2788   	; 0x3fac <main+0x23e8>
    34c8:	c7 57       	subi	r28, 0x77	; 119
    34ca:	de 4f       	sbci	r29, 0xFE	; 254
    34cc:	28 81       	ld	r18, Y
    34ce:	39 81       	ldd	r19, Y+1	; 0x01
    34d0:	c9 58       	subi	r28, 0x89	; 137
    34d2:	d1 40       	sbci	r29, 0x01	; 1
    34d4:	28 30       	cpi	r18, 0x08	; 8
    34d6:	31 05       	cpc	r19, r1
    34d8:	ac f4       	brge	.+42     	; 0x3504 <main+0x1940>
    34da:	c7 57       	subi	r28, 0x77	; 119
    34dc:	de 4f       	sbci	r29, 0xFE	; 254
    34de:	88 81       	ld	r24, Y
    34e0:	99 81       	ldd	r25, Y+1	; 0x01
    34e2:	c9 58       	subi	r28, 0x89	; 137
    34e4:	d1 40       	sbci	r29, 0x01	; 1
    34e6:	85 30       	cpi	r24, 0x05	; 5
    34e8:	91 05       	cpc	r25, r1
    34ea:	09 f4       	brne	.+2      	; 0x34ee <main+0x192a>
    34ec:	df c3       	rjmp	.+1982   	; 0x3cac <main+0x20e8>
    34ee:	c7 57       	subi	r28, 0x77	; 119
    34f0:	de 4f       	sbci	r29, 0xFE	; 254
    34f2:	e8 81       	ld	r30, Y
    34f4:	f9 81       	ldd	r31, Y+1	; 0x01
    34f6:	c9 58       	subi	r28, 0x89	; 137
    34f8:	d1 40       	sbci	r29, 0x01	; 1
    34fa:	e6 30       	cpi	r30, 0x06	; 6
    34fc:	f1 05       	cpc	r31, r1
    34fe:	09 f4       	brne	.+2      	; 0x3502 <main+0x193e>
    3500:	95 c4       	rjmp	.+2346   	; 0x3e2c <main+0x2268>
    3502:	2b c7       	rjmp	.+3670   	; 0x435a <main+0x2796>
    3504:	c7 57       	subi	r28, 0x77	; 119
    3506:	de 4f       	sbci	r29, 0xFE	; 254
    3508:	28 81       	ld	r18, Y
    350a:	39 81       	ldd	r19, Y+1	; 0x01
    350c:	c9 58       	subi	r28, 0x89	; 137
    350e:	d1 40       	sbci	r29, 0x01	; 1
    3510:	28 30       	cpi	r18, 0x08	; 8
    3512:	31 05       	cpc	r19, r1
    3514:	09 f4       	brne	.+2      	; 0x3518 <main+0x1954>
    3516:	0a c6       	rjmp	.+3092   	; 0x412c <main+0x2568>
    3518:	c7 57       	subi	r28, 0x77	; 119
    351a:	de 4f       	sbci	r29, 0xFE	; 254
    351c:	88 81       	ld	r24, Y
    351e:	99 81       	ldd	r25, Y+1	; 0x01
    3520:	c9 58       	subi	r28, 0x89	; 137
    3522:	d1 40       	sbci	r29, 0x01	; 1
    3524:	89 30       	cpi	r24, 0x09	; 9
    3526:	91 05       	cpc	r25, r1
    3528:	09 f4       	brne	.+2      	; 0x352c <main+0x1968>
    352a:	91 c6       	rjmp	.+3362   	; 0x424e <main+0x268a>
    352c:	16 c7       	rjmp	.+3628   	; 0x435a <main+0x2796>
	case 0:
		Lcd_vidSendCommand(0x82);
    352e:	82 e8       	ldi	r24, 0x82	; 130
    3530:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('0');
    3534:	80 e3       	ldi	r24, 0x30	; 48
    3536:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    353a:	fe 01       	movw	r30, r28
    353c:	ed 54       	subi	r30, 0x4D	; 77
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	aa ef       	ldi	r26, 0xFA	; 250
    3546:	b3 e4       	ldi	r27, 0x43	; 67
    3548:	80 83       	st	Z, r24
    354a:	91 83       	std	Z+1, r25	; 0x01
    354c:	a2 83       	std	Z+2, r26	; 0x02
    354e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3550:	8e 01       	movw	r16, r28
    3552:	01 55       	subi	r16, 0x51	; 81
    3554:	1f 4f       	sbci	r17, 0xFF	; 255
    3556:	fe 01       	movw	r30, r28
    3558:	ed 54       	subi	r30, 0x4D	; 77
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	60 81       	ld	r22, Z
    355e:	71 81       	ldd	r23, Z+1	; 0x01
    3560:	82 81       	ldd	r24, Z+2	; 0x02
    3562:	93 81       	ldd	r25, Z+3	; 0x03
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	4a ef       	ldi	r20, 0xFA	; 250
    356a:	54 e4       	ldi	r21, 0x44	; 68
    356c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	f8 01       	movw	r30, r16
    3576:	80 83       	st	Z, r24
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	a2 83       	std	Z+2, r26	; 0x02
    357c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    357e:	fe 01       	movw	r30, r28
    3580:	e1 55       	subi	r30, 0x51	; 81
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	60 81       	ld	r22, Z
    3586:	71 81       	ldd	r23, Z+1	; 0x01
    3588:	82 81       	ldd	r24, Z+2	; 0x02
    358a:	93 81       	ldd	r25, Z+3	; 0x03
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e8       	ldi	r20, 0x80	; 128
    3592:	5f e3       	ldi	r21, 0x3F	; 63
    3594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3598:	88 23       	and	r24, r24
    359a:	44 f4       	brge	.+16     	; 0x35ac <main+0x19e8>
		__ticks = 1;
    359c:	fe 01       	movw	r30, r28
    359e:	e3 55       	subi	r30, 0x53	; 83
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
    35aa:	64 c0       	rjmp	.+200    	; 0x3674 <main+0x1ab0>
	else if (__tmp > 65535)
    35ac:	fe 01       	movw	r30, r28
    35ae:	e1 55       	subi	r30, 0x51	; 81
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	3f ef       	ldi	r19, 0xFF	; 255
    35be:	4f e7       	ldi	r20, 0x7F	; 127
    35c0:	57 e4       	ldi	r21, 0x47	; 71
    35c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35c6:	18 16       	cp	r1, r24
    35c8:	0c f0       	brlt	.+2      	; 0x35cc <main+0x1a08>
    35ca:	43 c0       	rjmp	.+134    	; 0x3652 <main+0x1a8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35cc:	fe 01       	movw	r30, r28
    35ce:	ed 54       	subi	r30, 0x4D	; 77
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	60 81       	ld	r22, Z
    35d4:	71 81       	ldd	r23, Z+1	; 0x01
    35d6:	82 81       	ldd	r24, Z+2	; 0x02
    35d8:	93 81       	ldd	r25, Z+3	; 0x03
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	40 e2       	ldi	r20, 0x20	; 32
    35e0:	51 e4       	ldi	r21, 0x41	; 65
    35e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	8e 01       	movw	r16, r28
    35ec:	03 55       	subi	r16, 0x53	; 83
    35ee:	1f 4f       	sbci	r17, 0xFF	; 255
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	f8 01       	movw	r30, r16
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
    3602:	1f c0       	rjmp	.+62     	; 0x3642 <main+0x1a7e>
    3604:	fe 01       	movw	r30, r28
    3606:	e5 55       	subi	r30, 0x55	; 85
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	88 ec       	ldi	r24, 0xC8	; 200
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	80 83       	st	Z, r24
    3612:	fe 01       	movw	r30, r28
    3614:	e5 55       	subi	r30, 0x55	; 85
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	80 81       	ld	r24, Z
    361a:	91 81       	ldd	r25, Z+1	; 0x01
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	f1 f7       	brne	.-4      	; 0x361c <main+0x1a58>
    3620:	fe 01       	movw	r30, r28
    3622:	e5 55       	subi	r30, 0x55	; 85
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	91 83       	std	Z+1, r25	; 0x01
    3628:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362a:	de 01       	movw	r26, r28
    362c:	a3 55       	subi	r26, 0x53	; 83
    362e:	bf 4f       	sbci	r27, 0xFF	; 255
    3630:	fe 01       	movw	r30, r28
    3632:	e3 55       	subi	r30, 0x53	; 83
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	80 81       	ld	r24, Z
    3638:	91 81       	ldd	r25, Z+1	; 0x01
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	11 96       	adiw	r26, 0x01	; 1
    363e:	9c 93       	st	X, r25
    3640:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3642:	fe 01       	movw	r30, r28
    3644:	e3 55       	subi	r30, 0x53	; 83
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 81       	ld	r24, Z
    364a:	91 81       	ldd	r25, Z+1	; 0x01
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	d1 f6       	brne	.-76     	; 0x3604 <main+0x1a40>
    3650:	28 c0       	rjmp	.+80     	; 0x36a2 <main+0x1ade>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3652:	8e 01       	movw	r16, r28
    3654:	03 55       	subi	r16, 0x53	; 83
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
    3658:	fe 01       	movw	r30, r28
    365a:	e1 55       	subi	r30, 0x51	; 81
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	60 81       	ld	r22, Z
    3660:	71 81       	ldd	r23, Z+1	; 0x01
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	93 81       	ldd	r25, Z+3	; 0x03
    3666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	f8 01       	movw	r30, r16
    3670:	91 83       	std	Z+1, r25	; 0x01
    3672:	80 83       	st	Z, r24
    3674:	de 01       	movw	r26, r28
    3676:	a7 55       	subi	r26, 0x57	; 87
    3678:	bf 4f       	sbci	r27, 0xFF	; 255
    367a:	fe 01       	movw	r30, r28
    367c:	e3 55       	subi	r30, 0x53	; 83
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	80 81       	ld	r24, Z
    3682:	91 81       	ldd	r25, Z+1	; 0x01
    3684:	11 96       	adiw	r26, 0x01	; 1
    3686:	9c 93       	st	X, r25
    3688:	8e 93       	st	-X, r24
    368a:	fe 01       	movw	r30, r28
    368c:	e7 55       	subi	r30, 0x57	; 87
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	80 81       	ld	r24, Z
    3692:	91 81       	ldd	r25, Z+1	; 0x01
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	f1 f7       	brne	.-4      	; 0x3694 <main+0x1ad0>
    3698:	fe 01       	movw	r30, r28
    369a:	e7 55       	subi	r30, 0x57	; 87
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	91 83       	std	Z+1, r25	; 0x01
    36a0:	80 83       	st	Z, r24
		_delay_ms(500);
		operand2=0;
    36a2:	10 92 68 00 	sts	0x0068, r1
		key1=0;
    36a6:	10 92 69 00 	sts	0x0069, r1
    36aa:	57 c6       	rjmp	.+3246   	; 0x435a <main+0x2796>
		break;
	case 1:
		Lcd_vidSendCommand(0x82);
    36ac:	82 e8       	ldi	r24, 0x82	; 130
    36ae:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('1');
    36b2:	81 e3       	ldi	r24, 0x31	; 49
    36b4:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    36b8:	fe 01       	movw	r30, r28
    36ba:	eb 55       	subi	r30, 0x5B	; 91
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	aa ef       	ldi	r26, 0xFA	; 250
    36c4:	b3 e4       	ldi	r27, 0x43	; 67
    36c6:	80 83       	st	Z, r24
    36c8:	91 83       	std	Z+1, r25	; 0x01
    36ca:	a2 83       	std	Z+2, r26	; 0x02
    36cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ce:	8e 01       	movw	r16, r28
    36d0:	0f 55       	subi	r16, 0x5F	; 95
    36d2:	1f 4f       	sbci	r17, 0xFF	; 255
    36d4:	fe 01       	movw	r30, r28
    36d6:	eb 55       	subi	r30, 0x5B	; 91
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	60 81       	ld	r22, Z
    36dc:	71 81       	ldd	r23, Z+1	; 0x01
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4a ef       	ldi	r20, 0xFA	; 250
    36e8:	54 e4       	ldi	r21, 0x44	; 68
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	f8 01       	movw	r30, r16
    36f4:	80 83       	st	Z, r24
    36f6:	91 83       	std	Z+1, r25	; 0x01
    36f8:	a2 83       	std	Z+2, r26	; 0x02
    36fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36fc:	fe 01       	movw	r30, r28
    36fe:	ef 55       	subi	r30, 0x5F	; 95
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	60 81       	ld	r22, Z
    3704:	71 81       	ldd	r23, Z+1	; 0x01
    3706:	82 81       	ldd	r24, Z+2	; 0x02
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	40 e8       	ldi	r20, 0x80	; 128
    3710:	5f e3       	ldi	r21, 0x3F	; 63
    3712:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3716:	88 23       	and	r24, r24
    3718:	44 f4       	brge	.+16     	; 0x372a <main+0x1b66>
		__ticks = 1;
    371a:	fe 01       	movw	r30, r28
    371c:	e1 56       	subi	r30, 0x61	; 97
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	91 83       	std	Z+1, r25	; 0x01
    3726:	80 83       	st	Z, r24
    3728:	64 c0       	rjmp	.+200    	; 0x37f2 <main+0x1c2e>
	else if (__tmp > 65535)
    372a:	fe 01       	movw	r30, r28
    372c:	ef 55       	subi	r30, 0x5F	; 95
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	3f ef       	ldi	r19, 0xFF	; 255
    373c:	4f e7       	ldi	r20, 0x7F	; 127
    373e:	57 e4       	ldi	r21, 0x47	; 71
    3740:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3744:	18 16       	cp	r1, r24
    3746:	0c f0       	brlt	.+2      	; 0x374a <main+0x1b86>
    3748:	43 c0       	rjmp	.+134    	; 0x37d0 <main+0x1c0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374a:	fe 01       	movw	r30, r28
    374c:	eb 55       	subi	r30, 0x5B	; 91
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	60 81       	ld	r22, Z
    3752:	71 81       	ldd	r23, Z+1	; 0x01
    3754:	82 81       	ldd	r24, Z+2	; 0x02
    3756:	93 81       	ldd	r25, Z+3	; 0x03
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e2       	ldi	r20, 0x20	; 32
    375e:	51 e4       	ldi	r21, 0x41	; 65
    3760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	8e 01       	movw	r16, r28
    376a:	01 56       	subi	r16, 0x61	; 97
    376c:	1f 4f       	sbci	r17, 0xFF	; 255
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	f8 01       	movw	r30, r16
    377c:	91 83       	std	Z+1, r25	; 0x01
    377e:	80 83       	st	Z, r24
    3780:	1f c0       	rjmp	.+62     	; 0x37c0 <main+0x1bfc>
    3782:	fe 01       	movw	r30, r28
    3784:	e3 56       	subi	r30, 0x63	; 99
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	88 ec       	ldi	r24, 0xC8	; 200
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	91 83       	std	Z+1, r25	; 0x01
    378e:	80 83       	st	Z, r24
    3790:	fe 01       	movw	r30, r28
    3792:	e3 56       	subi	r30, 0x63	; 99
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	80 81       	ld	r24, Z
    3798:	91 81       	ldd	r25, Z+1	; 0x01
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <main+0x1bd6>
    379e:	fe 01       	movw	r30, r28
    37a0:	e3 56       	subi	r30, 0x63	; 99
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	91 83       	std	Z+1, r25	; 0x01
    37a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a8:	de 01       	movw	r26, r28
    37aa:	a1 56       	subi	r26, 0x61	; 97
    37ac:	bf 4f       	sbci	r27, 0xFF	; 255
    37ae:	fe 01       	movw	r30, r28
    37b0:	e1 56       	subi	r30, 0x61	; 97
    37b2:	ff 4f       	sbci	r31, 0xFF	; 255
    37b4:	80 81       	ld	r24, Z
    37b6:	91 81       	ldd	r25, Z+1	; 0x01
    37b8:	01 97       	sbiw	r24, 0x01	; 1
    37ba:	11 96       	adiw	r26, 0x01	; 1
    37bc:	9c 93       	st	X, r25
    37be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c0:	fe 01       	movw	r30, r28
    37c2:	e1 56       	subi	r30, 0x61	; 97
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	80 81       	ld	r24, Z
    37c8:	91 81       	ldd	r25, Z+1	; 0x01
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	d1 f6       	brne	.-76     	; 0x3782 <main+0x1bbe>
    37ce:	28 c0       	rjmp	.+80     	; 0x3820 <main+0x1c5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d0:	8e 01       	movw	r16, r28
    37d2:	01 56       	subi	r16, 0x61	; 97
    37d4:	1f 4f       	sbci	r17, 0xFF	; 255
    37d6:	fe 01       	movw	r30, r28
    37d8:	ef 55       	subi	r30, 0x5F	; 95
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	60 81       	ld	r22, Z
    37de:	71 81       	ldd	r23, Z+1	; 0x01
    37e0:	82 81       	ldd	r24, Z+2	; 0x02
    37e2:	93 81       	ldd	r25, Z+3	; 0x03
    37e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	f8 01       	movw	r30, r16
    37ee:	91 83       	std	Z+1, r25	; 0x01
    37f0:	80 83       	st	Z, r24
    37f2:	de 01       	movw	r26, r28
    37f4:	a5 56       	subi	r26, 0x65	; 101
    37f6:	bf 4f       	sbci	r27, 0xFF	; 255
    37f8:	fe 01       	movw	r30, r28
    37fa:	e1 56       	subi	r30, 0x61	; 97
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	80 81       	ld	r24, Z
    3800:	91 81       	ldd	r25, Z+1	; 0x01
    3802:	11 96       	adiw	r26, 0x01	; 1
    3804:	9c 93       	st	X, r25
    3806:	8e 93       	st	-X, r24
    3808:	fe 01       	movw	r30, r28
    380a:	e5 56       	subi	r30, 0x65	; 101
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 81       	ld	r24, Z
    3810:	91 81       	ldd	r25, Z+1	; 0x01
    3812:	01 97       	sbiw	r24, 0x01	; 1
    3814:	f1 f7       	brne	.-4      	; 0x3812 <main+0x1c4e>
    3816:	fe 01       	movw	r30, r28
    3818:	e5 56       	subi	r30, 0x65	; 101
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	91 83       	std	Z+1, r25	; 0x01
    381e:	80 83       	st	Z, r24
		_delay_ms(500);
		operand2=1;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    3826:	10 92 69 00 	sts	0x0069, r1
    382a:	97 c5       	rjmp	.+2862   	; 0x435a <main+0x2796>
		break;
	case 2:
		Lcd_vidSendCommand(0x82);
    382c:	82 e8       	ldi	r24, 0x82	; 130
    382e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('2');
    3832:	82 e3       	ldi	r24, 0x32	; 50
    3834:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    3838:	fe 01       	movw	r30, r28
    383a:	e9 56       	subi	r30, 0x69	; 105
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	aa ef       	ldi	r26, 0xFA	; 250
    3844:	b3 e4       	ldi	r27, 0x43	; 67
    3846:	80 83       	st	Z, r24
    3848:	91 83       	std	Z+1, r25	; 0x01
    384a:	a2 83       	std	Z+2, r26	; 0x02
    384c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    384e:	8e 01       	movw	r16, r28
    3850:	0d 56       	subi	r16, 0x6D	; 109
    3852:	1f 4f       	sbci	r17, 0xFF	; 255
    3854:	fe 01       	movw	r30, r28
    3856:	e9 56       	subi	r30, 0x69	; 105
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	60 81       	ld	r22, Z
    385c:	71 81       	ldd	r23, Z+1	; 0x01
    385e:	82 81       	ldd	r24, Z+2	; 0x02
    3860:	93 81       	ldd	r25, Z+3	; 0x03
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	4a ef       	ldi	r20, 0xFA	; 250
    3868:	54 e4       	ldi	r21, 0x44	; 68
    386a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	f8 01       	movw	r30, r16
    3874:	80 83       	st	Z, r24
    3876:	91 83       	std	Z+1, r25	; 0x01
    3878:	a2 83       	std	Z+2, r26	; 0x02
    387a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    387c:	fe 01       	movw	r30, r28
    387e:	ed 56       	subi	r30, 0x6D	; 109
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	60 81       	ld	r22, Z
    3884:	71 81       	ldd	r23, Z+1	; 0x01
    3886:	82 81       	ldd	r24, Z+2	; 0x02
    3888:	93 81       	ldd	r25, Z+3	; 0x03
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	40 e8       	ldi	r20, 0x80	; 128
    3890:	5f e3       	ldi	r21, 0x3F	; 63
    3892:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3896:	88 23       	and	r24, r24
    3898:	44 f4       	brge	.+16     	; 0x38aa <main+0x1ce6>
		__ticks = 1;
    389a:	fe 01       	movw	r30, r28
    389c:	ef 56       	subi	r30, 0x6F	; 111
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	91 83       	std	Z+1, r25	; 0x01
    38a6:	80 83       	st	Z, r24
    38a8:	64 c0       	rjmp	.+200    	; 0x3972 <main+0x1dae>
	else if (__tmp > 65535)
    38aa:	fe 01       	movw	r30, r28
    38ac:	ed 56       	subi	r30, 0x6D	; 109
    38ae:	ff 4f       	sbci	r31, 0xFF	; 255
    38b0:	60 81       	ld	r22, Z
    38b2:	71 81       	ldd	r23, Z+1	; 0x01
    38b4:	82 81       	ldd	r24, Z+2	; 0x02
    38b6:	93 81       	ldd	r25, Z+3	; 0x03
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	3f ef       	ldi	r19, 0xFF	; 255
    38bc:	4f e7       	ldi	r20, 0x7F	; 127
    38be:	57 e4       	ldi	r21, 0x47	; 71
    38c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38c4:	18 16       	cp	r1, r24
    38c6:	0c f0       	brlt	.+2      	; 0x38ca <main+0x1d06>
    38c8:	43 c0       	rjmp	.+134    	; 0x3950 <main+0x1d8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ca:	fe 01       	movw	r30, r28
    38cc:	e9 56       	subi	r30, 0x69	; 105
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	60 81       	ld	r22, Z
    38d2:	71 81       	ldd	r23, Z+1	; 0x01
    38d4:	82 81       	ldd	r24, Z+2	; 0x02
    38d6:	93 81       	ldd	r25, Z+3	; 0x03
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	40 e2       	ldi	r20, 0x20	; 32
    38de:	51 e4       	ldi	r21, 0x41	; 65
    38e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	8e 01       	movw	r16, r28
    38ea:	0f 56       	subi	r16, 0x6F	; 111
    38ec:	1f 4f       	sbci	r17, 0xFF	; 255
    38ee:	bc 01       	movw	r22, r24
    38f0:	cd 01       	movw	r24, r26
    38f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	f8 01       	movw	r30, r16
    38fc:	91 83       	std	Z+1, r25	; 0x01
    38fe:	80 83       	st	Z, r24
    3900:	1f c0       	rjmp	.+62     	; 0x3940 <main+0x1d7c>
    3902:	fe 01       	movw	r30, r28
    3904:	e1 57       	subi	r30, 0x71	; 113
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	88 ec       	ldi	r24, 0xC8	; 200
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	91 83       	std	Z+1, r25	; 0x01
    390e:	80 83       	st	Z, r24
    3910:	fe 01       	movw	r30, r28
    3912:	e1 57       	subi	r30, 0x71	; 113
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	80 81       	ld	r24, Z
    3918:	91 81       	ldd	r25, Z+1	; 0x01
    391a:	01 97       	sbiw	r24, 0x01	; 1
    391c:	f1 f7       	brne	.-4      	; 0x391a <main+0x1d56>
    391e:	fe 01       	movw	r30, r28
    3920:	e1 57       	subi	r30, 0x71	; 113
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	91 83       	std	Z+1, r25	; 0x01
    3926:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3928:	de 01       	movw	r26, r28
    392a:	af 56       	subi	r26, 0x6F	; 111
    392c:	bf 4f       	sbci	r27, 0xFF	; 255
    392e:	fe 01       	movw	r30, r28
    3930:	ef 56       	subi	r30, 0x6F	; 111
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	80 81       	ld	r24, Z
    3936:	91 81       	ldd	r25, Z+1	; 0x01
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	11 96       	adiw	r26, 0x01	; 1
    393c:	9c 93       	st	X, r25
    393e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3940:	fe 01       	movw	r30, r28
    3942:	ef 56       	subi	r30, 0x6F	; 111
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	80 81       	ld	r24, Z
    3948:	91 81       	ldd	r25, Z+1	; 0x01
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	d1 f6       	brne	.-76     	; 0x3902 <main+0x1d3e>
    394e:	28 c0       	rjmp	.+80     	; 0x39a0 <main+0x1ddc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3950:	8e 01       	movw	r16, r28
    3952:	0f 56       	subi	r16, 0x6F	; 111
    3954:	1f 4f       	sbci	r17, 0xFF	; 255
    3956:	fe 01       	movw	r30, r28
    3958:	ed 56       	subi	r30, 0x6D	; 109
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	f8 01       	movw	r30, r16
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	80 83       	st	Z, r24
    3972:	de 01       	movw	r26, r28
    3974:	a3 57       	subi	r26, 0x73	; 115
    3976:	bf 4f       	sbci	r27, 0xFF	; 255
    3978:	fe 01       	movw	r30, r28
    397a:	ef 56       	subi	r30, 0x6F	; 111
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	80 81       	ld	r24, Z
    3980:	91 81       	ldd	r25, Z+1	; 0x01
    3982:	11 96       	adiw	r26, 0x01	; 1
    3984:	9c 93       	st	X, r25
    3986:	8e 93       	st	-X, r24
    3988:	fe 01       	movw	r30, r28
    398a:	e3 57       	subi	r30, 0x73	; 115
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	80 81       	ld	r24, Z
    3990:	91 81       	ldd	r25, Z+1	; 0x01
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	f1 f7       	brne	.-4      	; 0x3992 <main+0x1dce>
    3996:	fe 01       	movw	r30, r28
    3998:	e3 57       	subi	r30, 0x73	; 115
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	91 83       	std	Z+1, r25	; 0x01
    399e:	80 83       	st	Z, r24
		_delay_ms(500);
		operand2=2;
    39a0:	82 e0       	ldi	r24, 0x02	; 2
    39a2:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    39a6:	10 92 69 00 	sts	0x0069, r1
    39aa:	d7 c4       	rjmp	.+2478   	; 0x435a <main+0x2796>
		break;
	case 3:
		Lcd_vidSendCommand(0x82);
    39ac:	82 e8       	ldi	r24, 0x82	; 130
    39ae:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('3');
    39b2:	83 e3       	ldi	r24, 0x33	; 51
    39b4:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    39b8:	fe 01       	movw	r30, r28
    39ba:	e7 57       	subi	r30, 0x77	; 119
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	aa ef       	ldi	r26, 0xFA	; 250
    39c4:	b3 e4       	ldi	r27, 0x43	; 67
    39c6:	80 83       	st	Z, r24
    39c8:	91 83       	std	Z+1, r25	; 0x01
    39ca:	a2 83       	std	Z+2, r26	; 0x02
    39cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ce:	8e 01       	movw	r16, r28
    39d0:	0b 57       	subi	r16, 0x7B	; 123
    39d2:	1f 4f       	sbci	r17, 0xFF	; 255
    39d4:	fe 01       	movw	r30, r28
    39d6:	e7 57       	subi	r30, 0x77	; 119
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	60 81       	ld	r22, Z
    39dc:	71 81       	ldd	r23, Z+1	; 0x01
    39de:	82 81       	ldd	r24, Z+2	; 0x02
    39e0:	93 81       	ldd	r25, Z+3	; 0x03
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	4a ef       	ldi	r20, 0xFA	; 250
    39e8:	54 e4       	ldi	r21, 0x44	; 68
    39ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	f8 01       	movw	r30, r16
    39f4:	80 83       	st	Z, r24
    39f6:	91 83       	std	Z+1, r25	; 0x01
    39f8:	a2 83       	std	Z+2, r26	; 0x02
    39fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39fc:	fe 01       	movw	r30, r28
    39fe:	eb 57       	subi	r30, 0x7B	; 123
    3a00:	ff 4f       	sbci	r31, 0xFF	; 255
    3a02:	60 81       	ld	r22, Z
    3a04:	71 81       	ldd	r23, Z+1	; 0x01
    3a06:	82 81       	ldd	r24, Z+2	; 0x02
    3a08:	93 81       	ldd	r25, Z+3	; 0x03
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	40 e8       	ldi	r20, 0x80	; 128
    3a10:	5f e3       	ldi	r21, 0x3F	; 63
    3a12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a16:	88 23       	and	r24, r24
    3a18:	44 f4       	brge	.+16     	; 0x3a2a <main+0x1e66>
		__ticks = 1;
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	ed 57       	subi	r30, 0x7D	; 125
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	91 83       	std	Z+1, r25	; 0x01
    3a26:	80 83       	st	Z, r24
    3a28:	64 c0       	rjmp	.+200    	; 0x3af2 <main+0x1f2e>
	else if (__tmp > 65535)
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	eb 57       	subi	r30, 0x7B	; 123
    3a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a30:	60 81       	ld	r22, Z
    3a32:	71 81       	ldd	r23, Z+1	; 0x01
    3a34:	82 81       	ldd	r24, Z+2	; 0x02
    3a36:	93 81       	ldd	r25, Z+3	; 0x03
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	3f ef       	ldi	r19, 0xFF	; 255
    3a3c:	4f e7       	ldi	r20, 0x7F	; 127
    3a3e:	57 e4       	ldi	r21, 0x47	; 71
    3a40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a44:	18 16       	cp	r1, r24
    3a46:	0c f0       	brlt	.+2      	; 0x3a4a <main+0x1e86>
    3a48:	43 c0       	rjmp	.+134    	; 0x3ad0 <main+0x1f0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	e7 57       	subi	r30, 0x77	; 119
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	60 81       	ld	r22, Z
    3a52:	71 81       	ldd	r23, Z+1	; 0x01
    3a54:	82 81       	ldd	r24, Z+2	; 0x02
    3a56:	93 81       	ldd	r25, Z+3	; 0x03
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 e2       	ldi	r20, 0x20	; 32
    3a5e:	51 e4       	ldi	r21, 0x41	; 65
    3a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	8e 01       	movw	r16, r28
    3a6a:	0d 57       	subi	r16, 0x7D	; 125
    3a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6e:	bc 01       	movw	r22, r24
    3a70:	cd 01       	movw	r24, r26
    3a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	f8 01       	movw	r30, r16
    3a7c:	91 83       	std	Z+1, r25	; 0x01
    3a7e:	80 83       	st	Z, r24
    3a80:	1f c0       	rjmp	.+62     	; 0x3ac0 <main+0x1efc>
    3a82:	fe 01       	movw	r30, r28
    3a84:	ef 57       	subi	r30, 0x7F	; 127
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	88 ec       	ldi	r24, 0xC8	; 200
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	91 83       	std	Z+1, r25	; 0x01
    3a8e:	80 83       	st	Z, r24
    3a90:	fe 01       	movw	r30, r28
    3a92:	ef 57       	subi	r30, 0x7F	; 127
    3a94:	ff 4f       	sbci	r31, 0xFF	; 255
    3a96:	80 81       	ld	r24, Z
    3a98:	91 81       	ldd	r25, Z+1	; 0x01
    3a9a:	01 97       	sbiw	r24, 0x01	; 1
    3a9c:	f1 f7       	brne	.-4      	; 0x3a9a <main+0x1ed6>
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	ef 57       	subi	r30, 0x7F	; 127
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa8:	de 01       	movw	r26, r28
    3aaa:	ad 57       	subi	r26, 0x7D	; 125
    3aac:	bf 4f       	sbci	r27, 0xFF	; 255
    3aae:	fe 01       	movw	r30, r28
    3ab0:	ed 57       	subi	r30, 0x7D	; 125
    3ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab4:	80 81       	ld	r24, Z
    3ab6:	91 81       	ldd	r25, Z+1	; 0x01
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	11 96       	adiw	r26, 0x01	; 1
    3abc:	9c 93       	st	X, r25
    3abe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	ed 57       	subi	r30, 0x7D	; 125
    3ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac6:	80 81       	ld	r24, Z
    3ac8:	91 81       	ldd	r25, Z+1	; 0x01
    3aca:	00 97       	sbiw	r24, 0x00	; 0
    3acc:	d1 f6       	brne	.-76     	; 0x3a82 <main+0x1ebe>
    3ace:	28 c0       	rjmp	.+80     	; 0x3b20 <main+0x1f5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad0:	8e 01       	movw	r16, r28
    3ad2:	0d 57       	subi	r16, 0x7D	; 125
    3ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	eb 57       	subi	r30, 0x7B	; 123
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	60 81       	ld	r22, Z
    3ade:	71 81       	ldd	r23, Z+1	; 0x01
    3ae0:	82 81       	ldd	r24, Z+2	; 0x02
    3ae2:	93 81       	ldd	r25, Z+3	; 0x03
    3ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	f8 01       	movw	r30, r16
    3aee:	91 83       	std	Z+1, r25	; 0x01
    3af0:	80 83       	st	Z, r24
    3af2:	de 01       	movw	r26, r28
    3af4:	a1 58       	subi	r26, 0x81	; 129
    3af6:	bf 4f       	sbci	r27, 0xFF	; 255
    3af8:	fe 01       	movw	r30, r28
    3afa:	ed 57       	subi	r30, 0x7D	; 125
    3afc:	ff 4f       	sbci	r31, 0xFF	; 255
    3afe:	80 81       	ld	r24, Z
    3b00:	91 81       	ldd	r25, Z+1	; 0x01
    3b02:	11 96       	adiw	r26, 0x01	; 1
    3b04:	9c 93       	st	X, r25
    3b06:	8e 93       	st	-X, r24
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e1 58       	subi	r30, 0x81	; 129
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	80 81       	ld	r24, Z
    3b10:	91 81       	ldd	r25, Z+1	; 0x01
    3b12:	01 97       	sbiw	r24, 0x01	; 1
    3b14:	f1 f7       	brne	.-4      	; 0x3b12 <main+0x1f4e>
    3b16:	fe 01       	movw	r30, r28
    3b18:	e1 58       	subi	r30, 0x81	; 129
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	80 83       	st	Z, r24
		_delay_ms(500);
		operand2=3;
    3b20:	83 e0       	ldi	r24, 0x03	; 3
    3b22:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    3b26:	10 92 69 00 	sts	0x0069, r1
    3b2a:	17 c4       	rjmp	.+2094   	; 0x435a <main+0x2796>
		break;
	case 4:
		Lcd_vidSendCommand(0x82);
    3b2c:	82 e8       	ldi	r24, 0x82	; 130
    3b2e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('4');
    3b32:	84 e3       	ldi	r24, 0x34	; 52
    3b34:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e5 58       	subi	r30, 0x85	; 133
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	aa ef       	ldi	r26, 0xFA	; 250
    3b44:	b3 e4       	ldi	r27, 0x43	; 67
    3b46:	80 83       	st	Z, r24
    3b48:	91 83       	std	Z+1, r25	; 0x01
    3b4a:	a2 83       	std	Z+2, r26	; 0x02
    3b4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b4e:	8e 01       	movw	r16, r28
    3b50:	09 58       	subi	r16, 0x89	; 137
    3b52:	1f 4f       	sbci	r17, 0xFF	; 255
    3b54:	fe 01       	movw	r30, r28
    3b56:	e5 58       	subi	r30, 0x85	; 133
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	60 81       	ld	r22, Z
    3b5c:	71 81       	ldd	r23, Z+1	; 0x01
    3b5e:	82 81       	ldd	r24, Z+2	; 0x02
    3b60:	93 81       	ldd	r25, Z+3	; 0x03
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	4a ef       	ldi	r20, 0xFA	; 250
    3b68:	54 e4       	ldi	r21, 0x44	; 68
    3b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	f8 01       	movw	r30, r16
    3b74:	80 83       	st	Z, r24
    3b76:	91 83       	std	Z+1, r25	; 0x01
    3b78:	a2 83       	std	Z+2, r26	; 0x02
    3b7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e9 58       	subi	r30, 0x89	; 137
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	60 81       	ld	r22, Z
    3b84:	71 81       	ldd	r23, Z+1	; 0x01
    3b86:	82 81       	ldd	r24, Z+2	; 0x02
    3b88:	93 81       	ldd	r25, Z+3	; 0x03
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	40 e8       	ldi	r20, 0x80	; 128
    3b90:	5f e3       	ldi	r21, 0x3F	; 63
    3b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b96:	88 23       	and	r24, r24
    3b98:	44 f4       	brge	.+16     	; 0x3baa <main+0x1fe6>
		__ticks = 1;
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	eb 58       	subi	r30, 0x8B	; 139
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	91 83       	std	Z+1, r25	; 0x01
    3ba6:	80 83       	st	Z, r24
    3ba8:	64 c0       	rjmp	.+200    	; 0x3c72 <main+0x20ae>
	else if (__tmp > 65535)
    3baa:	fe 01       	movw	r30, r28
    3bac:	e9 58       	subi	r30, 0x89	; 137
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	60 81       	ld	r22, Z
    3bb2:	71 81       	ldd	r23, Z+1	; 0x01
    3bb4:	82 81       	ldd	r24, Z+2	; 0x02
    3bb6:	93 81       	ldd	r25, Z+3	; 0x03
    3bb8:	20 e0       	ldi	r18, 0x00	; 0
    3bba:	3f ef       	ldi	r19, 0xFF	; 255
    3bbc:	4f e7       	ldi	r20, 0x7F	; 127
    3bbe:	57 e4       	ldi	r21, 0x47	; 71
    3bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bc4:	18 16       	cp	r1, r24
    3bc6:	0c f0       	brlt	.+2      	; 0x3bca <main+0x2006>
    3bc8:	43 c0       	rjmp	.+134    	; 0x3c50 <main+0x208c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bca:	fe 01       	movw	r30, r28
    3bcc:	e5 58       	subi	r30, 0x85	; 133
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	60 81       	ld	r22, Z
    3bd2:	71 81       	ldd	r23, Z+1	; 0x01
    3bd4:	82 81       	ldd	r24, Z+2	; 0x02
    3bd6:	93 81       	ldd	r25, Z+3	; 0x03
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	40 e2       	ldi	r20, 0x20	; 32
    3bde:	51 e4       	ldi	r21, 0x41	; 65
    3be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	8e 01       	movw	r16, r28
    3bea:	0b 58       	subi	r16, 0x8B	; 139
    3bec:	1f 4f       	sbci	r17, 0xFF	; 255
    3bee:	bc 01       	movw	r22, r24
    3bf0:	cd 01       	movw	r24, r26
    3bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	f8 01       	movw	r30, r16
    3bfc:	91 83       	std	Z+1, r25	; 0x01
    3bfe:	80 83       	st	Z, r24
    3c00:	1f c0       	rjmp	.+62     	; 0x3c40 <main+0x207c>
    3c02:	fe 01       	movw	r30, r28
    3c04:	ed 58       	subi	r30, 0x8D	; 141
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	88 ec       	ldi	r24, 0xC8	; 200
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	91 83       	std	Z+1, r25	; 0x01
    3c0e:	80 83       	st	Z, r24
    3c10:	fe 01       	movw	r30, r28
    3c12:	ed 58       	subi	r30, 0x8D	; 141
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	80 81       	ld	r24, Z
    3c18:	91 81       	ldd	r25, Z+1	; 0x01
    3c1a:	01 97       	sbiw	r24, 0x01	; 1
    3c1c:	f1 f7       	brne	.-4      	; 0x3c1a <main+0x2056>
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ed 58       	subi	r30, 0x8D	; 141
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	91 83       	std	Z+1, r25	; 0x01
    3c26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c28:	de 01       	movw	r26, r28
    3c2a:	ab 58       	subi	r26, 0x8B	; 139
    3c2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c2e:	fe 01       	movw	r30, r28
    3c30:	eb 58       	subi	r30, 0x8B	; 139
    3c32:	ff 4f       	sbci	r31, 0xFF	; 255
    3c34:	80 81       	ld	r24, Z
    3c36:	91 81       	ldd	r25, Z+1	; 0x01
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	11 96       	adiw	r26, 0x01	; 1
    3c3c:	9c 93       	st	X, r25
    3c3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c40:	fe 01       	movw	r30, r28
    3c42:	eb 58       	subi	r30, 0x8B	; 139
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	80 81       	ld	r24, Z
    3c48:	91 81       	ldd	r25, Z+1	; 0x01
    3c4a:	00 97       	sbiw	r24, 0x00	; 0
    3c4c:	d1 f6       	brne	.-76     	; 0x3c02 <main+0x203e>
    3c4e:	28 c0       	rjmp	.+80     	; 0x3ca0 <main+0x20dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c50:	8e 01       	movw	r16, r28
    3c52:	0b 58       	subi	r16, 0x8B	; 139
    3c54:	1f 4f       	sbci	r17, 0xFF	; 255
    3c56:	fe 01       	movw	r30, r28
    3c58:	e9 58       	subi	r30, 0x89	; 137
    3c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5c:	60 81       	ld	r22, Z
    3c5e:	71 81       	ldd	r23, Z+1	; 0x01
    3c60:	82 81       	ldd	r24, Z+2	; 0x02
    3c62:	93 81       	ldd	r25, Z+3	; 0x03
    3c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	f8 01       	movw	r30, r16
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	80 83       	st	Z, r24
    3c72:	de 01       	movw	r26, r28
    3c74:	af 58       	subi	r26, 0x8F	; 143
    3c76:	bf 4f       	sbci	r27, 0xFF	; 255
    3c78:	fe 01       	movw	r30, r28
    3c7a:	eb 58       	subi	r30, 0x8B	; 139
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	80 81       	ld	r24, Z
    3c80:	91 81       	ldd	r25, Z+1	; 0x01
    3c82:	11 96       	adiw	r26, 0x01	; 1
    3c84:	9c 93       	st	X, r25
    3c86:	8e 93       	st	-X, r24
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ef 58       	subi	r30, 0x8F	; 143
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <main+0x20ce>
    3c96:	fe 01       	movw	r30, r28
    3c98:	ef 58       	subi	r30, 0x8F	; 143
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	80 83       	st	Z, r24
		_delay_ms(500);
		operand2=4;
    3ca0:	84 e0       	ldi	r24, 0x04	; 4
    3ca2:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    3ca6:	10 92 69 00 	sts	0x0069, r1
    3caa:	57 c3       	rjmp	.+1710   	; 0x435a <main+0x2796>
		break;
	case 5:
		Lcd_vidSendCommand(0x82);
    3cac:	82 e8       	ldi	r24, 0x82	; 130
    3cae:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('5');
    3cb2:	85 e3       	ldi	r24, 0x35	; 53
    3cb4:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    3cb8:	fe 01       	movw	r30, r28
    3cba:	e3 59       	subi	r30, 0x93	; 147
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	80 e0       	ldi	r24, 0x00	; 0
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	aa ef       	ldi	r26, 0xFA	; 250
    3cc4:	b3 e4       	ldi	r27, 0x43	; 67
    3cc6:	80 83       	st	Z, r24
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	a2 83       	std	Z+2, r26	; 0x02
    3ccc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cce:	8e 01       	movw	r16, r28
    3cd0:	07 59       	subi	r16, 0x97	; 151
    3cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e3 59       	subi	r30, 0x93	; 147
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	60 81       	ld	r22, Z
    3cdc:	71 81       	ldd	r23, Z+1	; 0x01
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	93 81       	ldd	r25, Z+3	; 0x03
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	4a ef       	ldi	r20, 0xFA	; 250
    3ce8:	54 e4       	ldi	r21, 0x44	; 68
    3cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	f8 01       	movw	r30, r16
    3cf4:	80 83       	st	Z, r24
    3cf6:	91 83       	std	Z+1, r25	; 0x01
    3cf8:	a2 83       	std	Z+2, r26	; 0x02
    3cfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	e7 59       	subi	r30, 0x97	; 151
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	60 81       	ld	r22, Z
    3d04:	71 81       	ldd	r23, Z+1	; 0x01
    3d06:	82 81       	ldd	r24, Z+2	; 0x02
    3d08:	93 81       	ldd	r25, Z+3	; 0x03
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e8       	ldi	r20, 0x80	; 128
    3d10:	5f e3       	ldi	r21, 0x3F	; 63
    3d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d16:	88 23       	and	r24, r24
    3d18:	44 f4       	brge	.+16     	; 0x3d2a <main+0x2166>
		__ticks = 1;
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	e9 59       	subi	r30, 0x99	; 153
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	91 83       	std	Z+1, r25	; 0x01
    3d26:	80 83       	st	Z, r24
    3d28:	64 c0       	rjmp	.+200    	; 0x3df2 <main+0x222e>
	else if (__tmp > 65535)
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e7 59       	subi	r30, 0x97	; 151
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	60 81       	ld	r22, Z
    3d32:	71 81       	ldd	r23, Z+1	; 0x01
    3d34:	82 81       	ldd	r24, Z+2	; 0x02
    3d36:	93 81       	ldd	r25, Z+3	; 0x03
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	3f ef       	ldi	r19, 0xFF	; 255
    3d3c:	4f e7       	ldi	r20, 0x7F	; 127
    3d3e:	57 e4       	ldi	r21, 0x47	; 71
    3d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d44:	18 16       	cp	r1, r24
    3d46:	0c f0       	brlt	.+2      	; 0x3d4a <main+0x2186>
    3d48:	43 c0       	rjmp	.+134    	; 0x3dd0 <main+0x220c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	e3 59       	subi	r30, 0x93	; 147
    3d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d50:	60 81       	ld	r22, Z
    3d52:	71 81       	ldd	r23, Z+1	; 0x01
    3d54:	82 81       	ldd	r24, Z+2	; 0x02
    3d56:	93 81       	ldd	r25, Z+3	; 0x03
    3d58:	20 e0       	ldi	r18, 0x00	; 0
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	40 e2       	ldi	r20, 0x20	; 32
    3d5e:	51 e4       	ldi	r21, 0x41	; 65
    3d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	8e 01       	movw	r16, r28
    3d6a:	09 59       	subi	r16, 0x99	; 153
    3d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6e:	bc 01       	movw	r22, r24
    3d70:	cd 01       	movw	r24, r26
    3d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	f8 01       	movw	r30, r16
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	80 83       	st	Z, r24
    3d80:	1f c0       	rjmp	.+62     	; 0x3dc0 <main+0x21fc>
    3d82:	fe 01       	movw	r30, r28
    3d84:	eb 59       	subi	r30, 0x9B	; 155
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	88 ec       	ldi	r24, 0xC8	; 200
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	91 83       	std	Z+1, r25	; 0x01
    3d8e:	80 83       	st	Z, r24
    3d90:	fe 01       	movw	r30, r28
    3d92:	eb 59       	subi	r30, 0x9B	; 155
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	80 81       	ld	r24, Z
    3d98:	91 81       	ldd	r25, Z+1	; 0x01
    3d9a:	01 97       	sbiw	r24, 0x01	; 1
    3d9c:	f1 f7       	brne	.-4      	; 0x3d9a <main+0x21d6>
    3d9e:	fe 01       	movw	r30, r28
    3da0:	eb 59       	subi	r30, 0x9B	; 155
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	91 83       	std	Z+1, r25	; 0x01
    3da6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da8:	de 01       	movw	r26, r28
    3daa:	a9 59       	subi	r26, 0x99	; 153
    3dac:	bf 4f       	sbci	r27, 0xFF	; 255
    3dae:	fe 01       	movw	r30, r28
    3db0:	e9 59       	subi	r30, 0x99	; 153
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	80 81       	ld	r24, Z
    3db6:	91 81       	ldd	r25, Z+1	; 0x01
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	11 96       	adiw	r26, 0x01	; 1
    3dbc:	9c 93       	st	X, r25
    3dbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	e9 59       	subi	r30, 0x99	; 153
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	80 81       	ld	r24, Z
    3dc8:	91 81       	ldd	r25, Z+1	; 0x01
    3dca:	00 97       	sbiw	r24, 0x00	; 0
    3dcc:	d1 f6       	brne	.-76     	; 0x3d82 <main+0x21be>
    3dce:	28 c0       	rjmp	.+80     	; 0x3e20 <main+0x225c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd0:	8e 01       	movw	r16, r28
    3dd2:	09 59       	subi	r16, 0x99	; 153
    3dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	e7 59       	subi	r30, 0x97	; 151
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	60 81       	ld	r22, Z
    3dde:	71 81       	ldd	r23, Z+1	; 0x01
    3de0:	82 81       	ldd	r24, Z+2	; 0x02
    3de2:	93 81       	ldd	r25, Z+3	; 0x03
    3de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	f8 01       	movw	r30, r16
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	80 83       	st	Z, r24
    3df2:	de 01       	movw	r26, r28
    3df4:	ad 59       	subi	r26, 0x9D	; 157
    3df6:	bf 4f       	sbci	r27, 0xFF	; 255
    3df8:	fe 01       	movw	r30, r28
    3dfa:	e9 59       	subi	r30, 0x99	; 153
    3dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfe:	80 81       	ld	r24, Z
    3e00:	91 81       	ldd	r25, Z+1	; 0x01
    3e02:	11 96       	adiw	r26, 0x01	; 1
    3e04:	9c 93       	st	X, r25
    3e06:	8e 93       	st	-X, r24
    3e08:	fe 01       	movw	r30, r28
    3e0a:	ed 59       	subi	r30, 0x9D	; 157
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	80 81       	ld	r24, Z
    3e10:	91 81       	ldd	r25, Z+1	; 0x01
    3e12:	01 97       	sbiw	r24, 0x01	; 1
    3e14:	f1 f7       	brne	.-4      	; 0x3e12 <main+0x224e>
    3e16:	fe 01       	movw	r30, r28
    3e18:	ed 59       	subi	r30, 0x9D	; 157
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	91 83       	std	Z+1, r25	; 0x01
    3e1e:	80 83       	st	Z, r24
		_delay_ms(500);
		operand2=5;
    3e20:	85 e0       	ldi	r24, 0x05	; 5
    3e22:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    3e26:	10 92 69 00 	sts	0x0069, r1
    3e2a:	97 c2       	rjmp	.+1326   	; 0x435a <main+0x2796>
		break;
	case 6:
		Lcd_vidSendCommand(0x82);
    3e2c:	82 e8       	ldi	r24, 0x82	; 130
    3e2e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('6');
    3e32:	86 e3       	ldi	r24, 0x36	; 54
    3e34:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e1 5a       	subi	r30, 0xA1	; 161
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	aa ef       	ldi	r26, 0xFA	; 250
    3e44:	b3 e4       	ldi	r27, 0x43	; 67
    3e46:	80 83       	st	Z, r24
    3e48:	91 83       	std	Z+1, r25	; 0x01
    3e4a:	a2 83       	std	Z+2, r26	; 0x02
    3e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e4e:	8e 01       	movw	r16, r28
    3e50:	05 5a       	subi	r16, 0xA5	; 165
    3e52:	1f 4f       	sbci	r17, 0xFF	; 255
    3e54:	fe 01       	movw	r30, r28
    3e56:	e1 5a       	subi	r30, 0xA1	; 161
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	60 81       	ld	r22, Z
    3e5c:	71 81       	ldd	r23, Z+1	; 0x01
    3e5e:	82 81       	ldd	r24, Z+2	; 0x02
    3e60:	93 81       	ldd	r25, Z+3	; 0x03
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	4a ef       	ldi	r20, 0xFA	; 250
    3e68:	54 e4       	ldi	r21, 0x44	; 68
    3e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	f8 01       	movw	r30, r16
    3e74:	80 83       	st	Z, r24
    3e76:	91 83       	std	Z+1, r25	; 0x01
    3e78:	a2 83       	std	Z+2, r26	; 0x02
    3e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e5 5a       	subi	r30, 0xA5	; 165
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e8       	ldi	r20, 0x80	; 128
    3e90:	5f e3       	ldi	r21, 0x3F	; 63
    3e92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e96:	88 23       	and	r24, r24
    3e98:	44 f4       	brge	.+16     	; 0x3eaa <main+0x22e6>
		__ticks = 1;
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	e7 5a       	subi	r30, 0xA7	; 167
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	91 83       	std	Z+1, r25	; 0x01
    3ea6:	80 83       	st	Z, r24
    3ea8:	64 c0       	rjmp	.+200    	; 0x3f72 <main+0x23ae>
	else if (__tmp > 65535)
    3eaa:	fe 01       	movw	r30, r28
    3eac:	e5 5a       	subi	r30, 0xA5	; 165
    3eae:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb0:	60 81       	ld	r22, Z
    3eb2:	71 81       	ldd	r23, Z+1	; 0x01
    3eb4:	82 81       	ldd	r24, Z+2	; 0x02
    3eb6:	93 81       	ldd	r25, Z+3	; 0x03
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	3f ef       	ldi	r19, 0xFF	; 255
    3ebc:	4f e7       	ldi	r20, 0x7F	; 127
    3ebe:	57 e4       	ldi	r21, 0x47	; 71
    3ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ec4:	18 16       	cp	r1, r24
    3ec6:	0c f0       	brlt	.+2      	; 0x3eca <main+0x2306>
    3ec8:	43 c0       	rjmp	.+134    	; 0x3f50 <main+0x238c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eca:	fe 01       	movw	r30, r28
    3ecc:	e1 5a       	subi	r30, 0xA1	; 161
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	60 81       	ld	r22, Z
    3ed2:	71 81       	ldd	r23, Z+1	; 0x01
    3ed4:	82 81       	ldd	r24, Z+2	; 0x02
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e2       	ldi	r20, 0x20	; 32
    3ede:	51 e4       	ldi	r21, 0x41	; 65
    3ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	8e 01       	movw	r16, r28
    3eea:	07 5a       	subi	r16, 0xA7	; 167
    3eec:	1f 4f       	sbci	r17, 0xFF	; 255
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	f8 01       	movw	r30, r16
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	80 83       	st	Z, r24
    3f00:	1f c0       	rjmp	.+62     	; 0x3f40 <main+0x237c>
    3f02:	fe 01       	movw	r30, r28
    3f04:	e9 5a       	subi	r30, 0xA9	; 169
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	88 ec       	ldi	r24, 0xC8	; 200
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	91 83       	std	Z+1, r25	; 0x01
    3f0e:	80 83       	st	Z, r24
    3f10:	fe 01       	movw	r30, r28
    3f12:	e9 5a       	subi	r30, 0xA9	; 169
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	f1 f7       	brne	.-4      	; 0x3f1a <main+0x2356>
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e9 5a       	subi	r30, 0xA9	; 169
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f28:	de 01       	movw	r26, r28
    3f2a:	a7 5a       	subi	r26, 0xA7	; 167
    3f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e7 5a       	subi	r30, 0xA7	; 167
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	80 81       	ld	r24, Z
    3f36:	91 81       	ldd	r25, Z+1	; 0x01
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	11 96       	adiw	r26, 0x01	; 1
    3f3c:	9c 93       	st	X, r25
    3f3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f40:	fe 01       	movw	r30, r28
    3f42:	e7 5a       	subi	r30, 0xA7	; 167
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	80 81       	ld	r24, Z
    3f48:	91 81       	ldd	r25, Z+1	; 0x01
    3f4a:	00 97       	sbiw	r24, 0x00	; 0
    3f4c:	d1 f6       	brne	.-76     	; 0x3f02 <main+0x233e>
    3f4e:	28 c0       	rjmp	.+80     	; 0x3fa0 <main+0x23dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f50:	8e 01       	movw	r16, r28
    3f52:	07 5a       	subi	r16, 0xA7	; 167
    3f54:	1f 4f       	sbci	r17, 0xFF	; 255
    3f56:	fe 01       	movw	r30, r28
    3f58:	e5 5a       	subi	r30, 0xA5	; 165
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	60 81       	ld	r22, Z
    3f5e:	71 81       	ldd	r23, Z+1	; 0x01
    3f60:	82 81       	ldd	r24, Z+2	; 0x02
    3f62:	93 81       	ldd	r25, Z+3	; 0x03
    3f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	f8 01       	movw	r30, r16
    3f6e:	91 83       	std	Z+1, r25	; 0x01
    3f70:	80 83       	st	Z, r24
    3f72:	de 01       	movw	r26, r28
    3f74:	ab 5a       	subi	r26, 0xAB	; 171
    3f76:	bf 4f       	sbci	r27, 0xFF	; 255
    3f78:	fe 01       	movw	r30, r28
    3f7a:	e7 5a       	subi	r30, 0xA7	; 167
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	80 81       	ld	r24, Z
    3f80:	91 81       	ldd	r25, Z+1	; 0x01
    3f82:	11 96       	adiw	r26, 0x01	; 1
    3f84:	9c 93       	st	X, r25
    3f86:	8e 93       	st	-X, r24
    3f88:	fe 01       	movw	r30, r28
    3f8a:	eb 5a       	subi	r30, 0xAB	; 171
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01
    3f92:	01 97       	sbiw	r24, 0x01	; 1
    3f94:	f1 f7       	brne	.-4      	; 0x3f92 <main+0x23ce>
    3f96:	fe 01       	movw	r30, r28
    3f98:	eb 5a       	subi	r30, 0xAB	; 171
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	91 83       	std	Z+1, r25	; 0x01
    3f9e:	80 83       	st	Z, r24
		_delay_ms(500);
		operand2=6;
    3fa0:	86 e0       	ldi	r24, 0x06	; 6
    3fa2:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    3fa6:	10 92 69 00 	sts	0x0069, r1
    3faa:	d7 c1       	rjmp	.+942    	; 0x435a <main+0x2796>
		break;
	case 7:
		Lcd_vidSendCommand(0x82);
    3fac:	82 e8       	ldi	r24, 0x82	; 130
    3fae:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('7');
    3fb2:	87 e3       	ldi	r24, 0x37	; 55
    3fb4:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    3fb8:	fe 01       	movw	r30, r28
    3fba:	ef 5a       	subi	r30, 0xAF	; 175
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	aa ef       	ldi	r26, 0xFA	; 250
    3fc4:	b3 e4       	ldi	r27, 0x43	; 67
    3fc6:	80 83       	st	Z, r24
    3fc8:	91 83       	std	Z+1, r25	; 0x01
    3fca:	a2 83       	std	Z+2, r26	; 0x02
    3fcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fce:	8e 01       	movw	r16, r28
    3fd0:	03 5b       	subi	r16, 0xB3	; 179
    3fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	ef 5a       	subi	r30, 0xAF	; 175
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	60 81       	ld	r22, Z
    3fdc:	71 81       	ldd	r23, Z+1	; 0x01
    3fde:	82 81       	ldd	r24, Z+2	; 0x02
    3fe0:	93 81       	ldd	r25, Z+3	; 0x03
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	4a ef       	ldi	r20, 0xFA	; 250
    3fe8:	54 e4       	ldi	r21, 0x44	; 68
    3fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fee:	dc 01       	movw	r26, r24
    3ff0:	cb 01       	movw	r24, r22
    3ff2:	f8 01       	movw	r30, r16
    3ff4:	80 83       	st	Z, r24
    3ff6:	91 83       	std	Z+1, r25	; 0x01
    3ff8:	a2 83       	std	Z+2, r26	; 0x02
    3ffa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e3 5b       	subi	r30, 0xB3	; 179
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	60 81       	ld	r22, Z
    4004:	71 81       	ldd	r23, Z+1	; 0x01
    4006:	82 81       	ldd	r24, Z+2	; 0x02
    4008:	93 81       	ldd	r25, Z+3	; 0x03
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e8       	ldi	r20, 0x80	; 128
    4010:	5f e3       	ldi	r21, 0x3F	; 63
    4012:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4016:	88 23       	and	r24, r24
    4018:	44 f4       	brge	.+16     	; 0x402a <main+0x2466>
		__ticks = 1;
    401a:	fe 01       	movw	r30, r28
    401c:	e5 5b       	subi	r30, 0xB5	; 181
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	81 e0       	ldi	r24, 0x01	; 1
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	91 83       	std	Z+1, r25	; 0x01
    4026:	80 83       	st	Z, r24
    4028:	64 c0       	rjmp	.+200    	; 0x40f2 <main+0x252e>
	else if (__tmp > 65535)
    402a:	fe 01       	movw	r30, r28
    402c:	e3 5b       	subi	r30, 0xB3	; 179
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	60 81       	ld	r22, Z
    4032:	71 81       	ldd	r23, Z+1	; 0x01
    4034:	82 81       	ldd	r24, Z+2	; 0x02
    4036:	93 81       	ldd	r25, Z+3	; 0x03
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	3f ef       	ldi	r19, 0xFF	; 255
    403c:	4f e7       	ldi	r20, 0x7F	; 127
    403e:	57 e4       	ldi	r21, 0x47	; 71
    4040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4044:	18 16       	cp	r1, r24
    4046:	0c f0       	brlt	.+2      	; 0x404a <main+0x2486>
    4048:	43 c0       	rjmp	.+134    	; 0x40d0 <main+0x250c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    404a:	fe 01       	movw	r30, r28
    404c:	ef 5a       	subi	r30, 0xAF	; 175
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	60 81       	ld	r22, Z
    4052:	71 81       	ldd	r23, Z+1	; 0x01
    4054:	82 81       	ldd	r24, Z+2	; 0x02
    4056:	93 81       	ldd	r25, Z+3	; 0x03
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	40 e2       	ldi	r20, 0x20	; 32
    405e:	51 e4       	ldi	r21, 0x41	; 65
    4060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	8e 01       	movw	r16, r28
    406a:	05 5b       	subi	r16, 0xB5	; 181
    406c:	1f 4f       	sbci	r17, 0xFF	; 255
    406e:	bc 01       	movw	r22, r24
    4070:	cd 01       	movw	r24, r26
    4072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	f8 01       	movw	r30, r16
    407c:	91 83       	std	Z+1, r25	; 0x01
    407e:	80 83       	st	Z, r24
    4080:	1f c0       	rjmp	.+62     	; 0x40c0 <main+0x24fc>
    4082:	fe 01       	movw	r30, r28
    4084:	e7 5b       	subi	r30, 0xB7	; 183
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	88 ec       	ldi	r24, 0xC8	; 200
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	91 83       	std	Z+1, r25	; 0x01
    408e:	80 83       	st	Z, r24
    4090:	fe 01       	movw	r30, r28
    4092:	e7 5b       	subi	r30, 0xB7	; 183
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	80 81       	ld	r24, Z
    4098:	91 81       	ldd	r25, Z+1	; 0x01
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	f1 f7       	brne	.-4      	; 0x409a <main+0x24d6>
    409e:	fe 01       	movw	r30, r28
    40a0:	e7 5b       	subi	r30, 0xB7	; 183
    40a2:	ff 4f       	sbci	r31, 0xFF	; 255
    40a4:	91 83       	std	Z+1, r25	; 0x01
    40a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40a8:	de 01       	movw	r26, r28
    40aa:	a5 5b       	subi	r26, 0xB5	; 181
    40ac:	bf 4f       	sbci	r27, 0xFF	; 255
    40ae:	fe 01       	movw	r30, r28
    40b0:	e5 5b       	subi	r30, 0xB5	; 181
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	80 81       	ld	r24, Z
    40b6:	91 81       	ldd	r25, Z+1	; 0x01
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	11 96       	adiw	r26, 0x01	; 1
    40bc:	9c 93       	st	X, r25
    40be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c0:	fe 01       	movw	r30, r28
    40c2:	e5 5b       	subi	r30, 0xB5	; 181
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	80 81       	ld	r24, Z
    40c8:	91 81       	ldd	r25, Z+1	; 0x01
    40ca:	00 97       	sbiw	r24, 0x00	; 0
    40cc:	d1 f6       	brne	.-76     	; 0x4082 <main+0x24be>
    40ce:	28 c0       	rjmp	.+80     	; 0x4120 <main+0x255c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d0:	8e 01       	movw	r16, r28
    40d2:	05 5b       	subi	r16, 0xB5	; 181
    40d4:	1f 4f       	sbci	r17, 0xFF	; 255
    40d6:	fe 01       	movw	r30, r28
    40d8:	e3 5b       	subi	r30, 0xB3	; 179
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	60 81       	ld	r22, Z
    40de:	71 81       	ldd	r23, Z+1	; 0x01
    40e0:	82 81       	ldd	r24, Z+2	; 0x02
    40e2:	93 81       	ldd	r25, Z+3	; 0x03
    40e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	f8 01       	movw	r30, r16
    40ee:	91 83       	std	Z+1, r25	; 0x01
    40f0:	80 83       	st	Z, r24
    40f2:	de 01       	movw	r26, r28
    40f4:	a9 5b       	subi	r26, 0xB9	; 185
    40f6:	bf 4f       	sbci	r27, 0xFF	; 255
    40f8:	fe 01       	movw	r30, r28
    40fa:	e5 5b       	subi	r30, 0xB5	; 181
    40fc:	ff 4f       	sbci	r31, 0xFF	; 255
    40fe:	80 81       	ld	r24, Z
    4100:	91 81       	ldd	r25, Z+1	; 0x01
    4102:	11 96       	adiw	r26, 0x01	; 1
    4104:	9c 93       	st	X, r25
    4106:	8e 93       	st	-X, r24
    4108:	fe 01       	movw	r30, r28
    410a:	e9 5b       	subi	r30, 0xB9	; 185
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 81       	ld	r24, Z
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	f1 f7       	brne	.-4      	; 0x4112 <main+0x254e>
    4116:	fe 01       	movw	r30, r28
    4118:	e9 5b       	subi	r30, 0xB9	; 185
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	91 83       	std	Z+1, r25	; 0x01
    411e:	80 83       	st	Z, r24
		_delay_ms(500);
		operand2=7;
    4120:	87 e0       	ldi	r24, 0x07	; 7
    4122:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    4126:	10 92 69 00 	sts	0x0069, r1
    412a:	17 c1       	rjmp	.+558    	; 0x435a <main+0x2796>
		break;
	case 8:
		Lcd_vidSendCommand(0x82);
    412c:	82 e8       	ldi	r24, 0x82	; 130
    412e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('8');
    4132:	88 e3       	ldi	r24, 0x38	; 56
    4134:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    4138:	fe 01       	movw	r30, r28
    413a:	ed 5b       	subi	r30, 0xBD	; 189
    413c:	ff 4f       	sbci	r31, 0xFF	; 255
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	aa ef       	ldi	r26, 0xFA	; 250
    4144:	b3 e4       	ldi	r27, 0x43	; 67
    4146:	80 83       	st	Z, r24
    4148:	91 83       	std	Z+1, r25	; 0x01
    414a:	a2 83       	std	Z+2, r26	; 0x02
    414c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    414e:	8e 01       	movw	r16, r28
    4150:	01 5c       	subi	r16, 0xC1	; 193
    4152:	1f 4f       	sbci	r17, 0xFF	; 255
    4154:	fe 01       	movw	r30, r28
    4156:	ed 5b       	subi	r30, 0xBD	; 189
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	60 81       	ld	r22, Z
    415c:	71 81       	ldd	r23, Z+1	; 0x01
    415e:	82 81       	ldd	r24, Z+2	; 0x02
    4160:	93 81       	ldd	r25, Z+3	; 0x03
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	4a ef       	ldi	r20, 0xFA	; 250
    4168:	54 e4       	ldi	r21, 0x44	; 68
    416a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	f8 01       	movw	r30, r16
    4174:	80 83       	st	Z, r24
    4176:	91 83       	std	Z+1, r25	; 0x01
    4178:	a2 83       	std	Z+2, r26	; 0x02
    417a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    417c:	fe 01       	movw	r30, r28
    417e:	ff 96       	adiw	r30, 0x3f	; 63
    4180:	60 81       	ld	r22, Z
    4182:	71 81       	ldd	r23, Z+1	; 0x01
    4184:	82 81       	ldd	r24, Z+2	; 0x02
    4186:	93 81       	ldd	r25, Z+3	; 0x03
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	40 e8       	ldi	r20, 0x80	; 128
    418e:	5f e3       	ldi	r21, 0x3F	; 63
    4190:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4194:	88 23       	and	r24, r24
    4196:	2c f4       	brge	.+10     	; 0x41a2 <main+0x25de>
		__ticks = 1;
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	9e af       	std	Y+62, r25	; 0x3e
    419e:	8d af       	std	Y+61, r24	; 0x3d
    41a0:	46 c0       	rjmp	.+140    	; 0x422e <main+0x266a>
	else if (__tmp > 65535)
    41a2:	fe 01       	movw	r30, r28
    41a4:	ff 96       	adiw	r30, 0x3f	; 63
    41a6:	60 81       	ld	r22, Z
    41a8:	71 81       	ldd	r23, Z+1	; 0x01
    41aa:	82 81       	ldd	r24, Z+2	; 0x02
    41ac:	93 81       	ldd	r25, Z+3	; 0x03
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	3f ef       	ldi	r19, 0xFF	; 255
    41b2:	4f e7       	ldi	r20, 0x7F	; 127
    41b4:	57 e4       	ldi	r21, 0x47	; 71
    41b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41ba:	18 16       	cp	r1, r24
    41bc:	64 f5       	brge	.+88     	; 0x4216 <main+0x2652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41be:	fe 01       	movw	r30, r28
    41c0:	ed 5b       	subi	r30, 0xBD	; 189
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	60 81       	ld	r22, Z
    41c6:	71 81       	ldd	r23, Z+1	; 0x01
    41c8:	82 81       	ldd	r24, Z+2	; 0x02
    41ca:	93 81       	ldd	r25, Z+3	; 0x03
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e2       	ldi	r20, 0x20	; 32
    41d2:	51 e4       	ldi	r21, 0x41	; 65
    41d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	bc 01       	movw	r22, r24
    41de:	cd 01       	movw	r24, r26
    41e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	9e af       	std	Y+62, r25	; 0x3e
    41ea:	8d af       	std	Y+61, r24	; 0x3d
    41ec:	0f c0       	rjmp	.+30     	; 0x420c <main+0x2648>
    41ee:	88 ec       	ldi	r24, 0xC8	; 200
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	9c af       	std	Y+60, r25	; 0x3c
    41f4:	8b af       	std	Y+59, r24	; 0x3b
    41f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    41f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    41fa:	01 97       	sbiw	r24, 0x01	; 1
    41fc:	f1 f7       	brne	.-4      	; 0x41fa <main+0x2636>
    41fe:	9c af       	std	Y+60, r25	; 0x3c
    4200:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4202:	8d ad       	ldd	r24, Y+61	; 0x3d
    4204:	9e ad       	ldd	r25, Y+62	; 0x3e
    4206:	01 97       	sbiw	r24, 0x01	; 1
    4208:	9e af       	std	Y+62, r25	; 0x3e
    420a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    420c:	8d ad       	ldd	r24, Y+61	; 0x3d
    420e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4210:	00 97       	sbiw	r24, 0x00	; 0
    4212:	69 f7       	brne	.-38     	; 0x41ee <main+0x262a>
    4214:	16 c0       	rjmp	.+44     	; 0x4242 <main+0x267e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4216:	fe 01       	movw	r30, r28
    4218:	ff 96       	adiw	r30, 0x3f	; 63
    421a:	60 81       	ld	r22, Z
    421c:	71 81       	ldd	r23, Z+1	; 0x01
    421e:	82 81       	ldd	r24, Z+2	; 0x02
    4220:	93 81       	ldd	r25, Z+3	; 0x03
    4222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4226:	dc 01       	movw	r26, r24
    4228:	cb 01       	movw	r24, r22
    422a:	9e af       	std	Y+62, r25	; 0x3e
    422c:	8d af       	std	Y+61, r24	; 0x3d
    422e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4230:	9e ad       	ldd	r25, Y+62	; 0x3e
    4232:	9a af       	std	Y+58, r25	; 0x3a
    4234:	89 af       	std	Y+57, r24	; 0x39
    4236:	89 ad       	ldd	r24, Y+57	; 0x39
    4238:	9a ad       	ldd	r25, Y+58	; 0x3a
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	f1 f7       	brne	.-4      	; 0x423a <main+0x2676>
    423e:	9a af       	std	Y+58, r25	; 0x3a
    4240:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(500);
		operand2=8;
    4242:	88 e0       	ldi	r24, 0x08	; 8
    4244:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    4248:	10 92 69 00 	sts	0x0069, r1
    424c:	86 c0       	rjmp	.+268    	; 0x435a <main+0x2796>
		break;
	case 9:
		Lcd_vidSendCommand(0x82);
    424e:	82 e8       	ldi	r24, 0x82	; 130
    4250:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('9');
    4254:	89 e3       	ldi	r24, 0x39	; 57
    4256:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	aa ef       	ldi	r26, 0xFA	; 250
    4260:	b3 e4       	ldi	r27, 0x43	; 67
    4262:	8d ab       	std	Y+53, r24	; 0x35
    4264:	9e ab       	std	Y+54, r25	; 0x36
    4266:	af ab       	std	Y+55, r26	; 0x37
    4268:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    426a:	6d a9       	ldd	r22, Y+53	; 0x35
    426c:	7e a9       	ldd	r23, Y+54	; 0x36
    426e:	8f a9       	ldd	r24, Y+55	; 0x37
    4270:	98 ad       	ldd	r25, Y+56	; 0x38
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	4a ef       	ldi	r20, 0xFA	; 250
    4278:	54 e4       	ldi	r21, 0x44	; 68
    427a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427e:	dc 01       	movw	r26, r24
    4280:	cb 01       	movw	r24, r22
    4282:	89 ab       	std	Y+49, r24	; 0x31
    4284:	9a ab       	std	Y+50, r25	; 0x32
    4286:	ab ab       	std	Y+51, r26	; 0x33
    4288:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    428a:	69 a9       	ldd	r22, Y+49	; 0x31
    428c:	7a a9       	ldd	r23, Y+50	; 0x32
    428e:	8b a9       	ldd	r24, Y+51	; 0x33
    4290:	9c a9       	ldd	r25, Y+52	; 0x34
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	40 e8       	ldi	r20, 0x80	; 128
    4298:	5f e3       	ldi	r21, 0x3F	; 63
    429a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    429e:	88 23       	and	r24, r24
    42a0:	2c f4       	brge	.+10     	; 0x42ac <main+0x26e8>
		__ticks = 1;
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	98 ab       	std	Y+48, r25	; 0x30
    42a8:	8f a7       	std	Y+47, r24	; 0x2f
    42aa:	3f c0       	rjmp	.+126    	; 0x432a <main+0x2766>
	else if (__tmp > 65535)
    42ac:	69 a9       	ldd	r22, Y+49	; 0x31
    42ae:	7a a9       	ldd	r23, Y+50	; 0x32
    42b0:	8b a9       	ldd	r24, Y+51	; 0x33
    42b2:	9c a9       	ldd	r25, Y+52	; 0x34
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	3f ef       	ldi	r19, 0xFF	; 255
    42b8:	4f e7       	ldi	r20, 0x7F	; 127
    42ba:	57 e4       	ldi	r21, 0x47	; 71
    42bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42c0:	18 16       	cp	r1, r24
    42c2:	4c f5       	brge	.+82     	; 0x4316 <main+0x2752>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c4:	6d a9       	ldd	r22, Y+53	; 0x35
    42c6:	7e a9       	ldd	r23, Y+54	; 0x36
    42c8:	8f a9       	ldd	r24, Y+55	; 0x37
    42ca:	98 ad       	ldd	r25, Y+56	; 0x38
    42cc:	20 e0       	ldi	r18, 0x00	; 0
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	40 e2       	ldi	r20, 0x20	; 32
    42d2:	51 e4       	ldi	r21, 0x41	; 65
    42d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	bc 01       	movw	r22, r24
    42de:	cd 01       	movw	r24, r26
    42e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	98 ab       	std	Y+48, r25	; 0x30
    42ea:	8f a7       	std	Y+47, r24	; 0x2f
    42ec:	0f c0       	rjmp	.+30     	; 0x430c <main+0x2748>
    42ee:	88 ec       	ldi	r24, 0xC8	; 200
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	9e a7       	std	Y+46, r25	; 0x2e
    42f4:	8d a7       	std	Y+45, r24	; 0x2d
    42f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    42f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    42fa:	01 97       	sbiw	r24, 0x01	; 1
    42fc:	f1 f7       	brne	.-4      	; 0x42fa <main+0x2736>
    42fe:	9e a7       	std	Y+46, r25	; 0x2e
    4300:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4302:	8f a5       	ldd	r24, Y+47	; 0x2f
    4304:	98 a9       	ldd	r25, Y+48	; 0x30
    4306:	01 97       	sbiw	r24, 0x01	; 1
    4308:	98 ab       	std	Y+48, r25	; 0x30
    430a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    430c:	8f a5       	ldd	r24, Y+47	; 0x2f
    430e:	98 a9       	ldd	r25, Y+48	; 0x30
    4310:	00 97       	sbiw	r24, 0x00	; 0
    4312:	69 f7       	brne	.-38     	; 0x42ee <main+0x272a>
    4314:	14 c0       	rjmp	.+40     	; 0x433e <main+0x277a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4316:	69 a9       	ldd	r22, Y+49	; 0x31
    4318:	7a a9       	ldd	r23, Y+50	; 0x32
    431a:	8b a9       	ldd	r24, Y+51	; 0x33
    431c:	9c a9       	ldd	r25, Y+52	; 0x34
    431e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	98 ab       	std	Y+48, r25	; 0x30
    4328:	8f a7       	std	Y+47, r24	; 0x2f
    432a:	8f a5       	ldd	r24, Y+47	; 0x2f
    432c:	98 a9       	ldd	r25, Y+48	; 0x30
    432e:	9c a7       	std	Y+44, r25	; 0x2c
    4330:	8b a7       	std	Y+43, r24	; 0x2b
    4332:	8b a5       	ldd	r24, Y+43	; 0x2b
    4334:	9c a5       	ldd	r25, Y+44	; 0x2c
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	f1 f7       	brne	.-4      	; 0x4336 <main+0x2772>
    433a:	9c a7       	std	Y+44, r25	; 0x2c
    433c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		operand2=9;
    433e:	89 e0       	ldi	r24, 0x09	; 9
    4340:	80 93 68 00 	sts	0x0068, r24
		key1=0;
    4344:	10 92 69 00 	sts	0x0069, r1
    4348:	08 c0       	rjmp	.+16     	; 0x435a <main+0x2796>
		break;
	}
	}
	else if(key1==0xFF){
    434a:	80 91 69 00 	lds	r24, 0x0069
    434e:	8f 3f       	cpi	r24, 0xFF	; 255
    4350:	21 f4       	brne	.+8      	; 0x435a <main+0x2796>
		PORTD=0xFF;
    4352:	e2 e3       	ldi	r30, 0x32	; 50
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	8f ef       	ldi	r24, 0xFF	; 255
    4358:	80 83       	st	Z, r24
    435a:	80 e0       	ldi	r24, 0x00	; 0
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	aa ef       	ldi	r26, 0xFA	; 250
    4360:	b3 e4       	ldi	r27, 0x43	; 67
    4362:	8f a3       	std	Y+39, r24	; 0x27
    4364:	98 a7       	std	Y+40, r25	; 0x28
    4366:	a9 a7       	std	Y+41, r26	; 0x29
    4368:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    436a:	6f a1       	ldd	r22, Y+39	; 0x27
    436c:	78 a5       	ldd	r23, Y+40	; 0x28
    436e:	89 a5       	ldd	r24, Y+41	; 0x29
    4370:	9a a5       	ldd	r25, Y+42	; 0x2a
    4372:	20 e0       	ldi	r18, 0x00	; 0
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	4a ef       	ldi	r20, 0xFA	; 250
    4378:	54 e4       	ldi	r21, 0x44	; 68
    437a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    437e:	dc 01       	movw	r26, r24
    4380:	cb 01       	movw	r24, r22
    4382:	8b a3       	std	Y+35, r24	; 0x23
    4384:	9c a3       	std	Y+36, r25	; 0x24
    4386:	ad a3       	std	Y+37, r26	; 0x25
    4388:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    438a:	6b a1       	ldd	r22, Y+35	; 0x23
    438c:	7c a1       	ldd	r23, Y+36	; 0x24
    438e:	8d a1       	ldd	r24, Y+37	; 0x25
    4390:	9e a1       	ldd	r25, Y+38	; 0x26
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	40 e8       	ldi	r20, 0x80	; 128
    4398:	5f e3       	ldi	r21, 0x3F	; 63
    439a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    439e:	88 23       	and	r24, r24
    43a0:	2c f4       	brge	.+10     	; 0x43ac <main+0x27e8>
		__ticks = 1;
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	9a a3       	std	Y+34, r25	; 0x22
    43a8:	89 a3       	std	Y+33, r24	; 0x21
    43aa:	3f c0       	rjmp	.+126    	; 0x442a <main+0x2866>
	else if (__tmp > 65535)
    43ac:	6b a1       	ldd	r22, Y+35	; 0x23
    43ae:	7c a1       	ldd	r23, Y+36	; 0x24
    43b0:	8d a1       	ldd	r24, Y+37	; 0x25
    43b2:	9e a1       	ldd	r25, Y+38	; 0x26
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	3f ef       	ldi	r19, 0xFF	; 255
    43b8:	4f e7       	ldi	r20, 0x7F	; 127
    43ba:	57 e4       	ldi	r21, 0x47	; 71
    43bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43c0:	18 16       	cp	r1, r24
    43c2:	4c f5       	brge	.+82     	; 0x4416 <main+0x2852>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43c4:	6f a1       	ldd	r22, Y+39	; 0x27
    43c6:	78 a5       	ldd	r23, Y+40	; 0x28
    43c8:	89 a5       	ldd	r24, Y+41	; 0x29
    43ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    43cc:	20 e0       	ldi	r18, 0x00	; 0
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	40 e2       	ldi	r20, 0x20	; 32
    43d2:	51 e4       	ldi	r21, 0x41	; 65
    43d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d8:	dc 01       	movw	r26, r24
    43da:	cb 01       	movw	r24, r22
    43dc:	bc 01       	movw	r22, r24
    43de:	cd 01       	movw	r24, r26
    43e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e4:	dc 01       	movw	r26, r24
    43e6:	cb 01       	movw	r24, r22
    43e8:	9a a3       	std	Y+34, r25	; 0x22
    43ea:	89 a3       	std	Y+33, r24	; 0x21
    43ec:	0f c0       	rjmp	.+30     	; 0x440c <main+0x2848>
    43ee:	88 ec       	ldi	r24, 0xC8	; 200
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	98 a3       	std	Y+32, r25	; 0x20
    43f4:	8f 8f       	std	Y+31, r24	; 0x1f
    43f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43f8:	98 a1       	ldd	r25, Y+32	; 0x20
    43fa:	01 97       	sbiw	r24, 0x01	; 1
    43fc:	f1 f7       	brne	.-4      	; 0x43fa <main+0x2836>
    43fe:	98 a3       	std	Y+32, r25	; 0x20
    4400:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4402:	89 a1       	ldd	r24, Y+33	; 0x21
    4404:	9a a1       	ldd	r25, Y+34	; 0x22
    4406:	01 97       	sbiw	r24, 0x01	; 1
    4408:	9a a3       	std	Y+34, r25	; 0x22
    440a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    440c:	89 a1       	ldd	r24, Y+33	; 0x21
    440e:	9a a1       	ldd	r25, Y+34	; 0x22
    4410:	00 97       	sbiw	r24, 0x00	; 0
    4412:	69 f7       	brne	.-38     	; 0x43ee <main+0x282a>
    4414:	14 c0       	rjmp	.+40     	; 0x443e <main+0x287a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4416:	6b a1       	ldd	r22, Y+35	; 0x23
    4418:	7c a1       	ldd	r23, Y+36	; 0x24
    441a:	8d a1       	ldd	r24, Y+37	; 0x25
    441c:	9e a1       	ldd	r25, Y+38	; 0x26
    441e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4422:	dc 01       	movw	r26, r24
    4424:	cb 01       	movw	r24, r22
    4426:	9a a3       	std	Y+34, r25	; 0x22
    4428:	89 a3       	std	Y+33, r24	; 0x21
    442a:	89 a1       	ldd	r24, Y+33	; 0x21
    442c:	9a a1       	ldd	r25, Y+34	; 0x22
    442e:	9e 8f       	std	Y+30, r25	; 0x1e
    4430:	8d 8f       	std	Y+29, r24	; 0x1d
    4432:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4434:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4436:	01 97       	sbiw	r24, 0x01	; 1
    4438:	f1 f7       	brne	.-4      	; 0x4436 <main+0x2872>
    443a:	9e 8f       	std	Y+30, r25	; 0x1e
    443c:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	_delay_ms(500);
	key2=Keypad_u8GetKey();
    443e:	0e 94 41 08 	call	0x1082	; 0x1082 <Keypad_u8GetKey>
    4442:	80 93 6d 00 	sts	0x006D, r24
	if(key2!=0xFF){
    4446:	80 91 6d 00 	lds	r24, 0x006D
    444a:	8f 3f       	cpi	r24, 0xFF	; 255
    444c:	09 f4       	brne	.+2      	; 0x4450 <main+0x288c>
    444e:	fb c0       	rjmp	.+502    	; 0x4646 <main+0x2a82>
	if(key2=='='){
    4450:	80 91 6d 00 	lds	r24, 0x006D
    4454:	8d 33       	cpi	r24, 0x3D	; 61
    4456:	11 f0       	breq	.+4      	; 0x445c <main+0x2898>
    4458:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <main+0x28>
			result=key*key1;
		}
		else if(operator=='/'){
			result=key/key1;
		}*/
		Lcd_vidSendCommand(0x83);
    445c:	83 e8       	ldi	r24, 0x83	; 131
    445e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar('=');
    4462:	8d e3       	ldi	r24, 0x3D	; 61
    4464:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    4468:	80 e0       	ldi	r24, 0x00	; 0
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	a8 e4       	ldi	r26, 0x48	; 72
    446e:	b3 e4       	ldi	r27, 0x43	; 67
    4470:	89 8f       	std	Y+25, r24	; 0x19
    4472:	9a 8f       	std	Y+26, r25	; 0x1a
    4474:	ab 8f       	std	Y+27, r26	; 0x1b
    4476:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4478:	69 8d       	ldd	r22, Y+25	; 0x19
    447a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    447c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    447e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	4a ef       	ldi	r20, 0xFA	; 250
    4486:	54 e4       	ldi	r21, 0x44	; 68
    4488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	8d 8b       	std	Y+21, r24	; 0x15
    4492:	9e 8b       	std	Y+22, r25	; 0x16
    4494:	af 8b       	std	Y+23, r26	; 0x17
    4496:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4498:	6d 89       	ldd	r22, Y+21	; 0x15
    449a:	7e 89       	ldd	r23, Y+22	; 0x16
    449c:	8f 89       	ldd	r24, Y+23	; 0x17
    449e:	98 8d       	ldd	r25, Y+24	; 0x18
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	40 e8       	ldi	r20, 0x80	; 128
    44a6:	5f e3       	ldi	r21, 0x3F	; 63
    44a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44ac:	88 23       	and	r24, r24
    44ae:	2c f4       	brge	.+10     	; 0x44ba <main+0x28f6>
		__ticks = 1;
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	9c 8b       	std	Y+20, r25	; 0x14
    44b6:	8b 8b       	std	Y+19, r24	; 0x13
    44b8:	3f c0       	rjmp	.+126    	; 0x4538 <main+0x2974>
	else if (__tmp > 65535)
    44ba:	6d 89       	ldd	r22, Y+21	; 0x15
    44bc:	7e 89       	ldd	r23, Y+22	; 0x16
    44be:	8f 89       	ldd	r24, Y+23	; 0x17
    44c0:	98 8d       	ldd	r25, Y+24	; 0x18
    44c2:	20 e0       	ldi	r18, 0x00	; 0
    44c4:	3f ef       	ldi	r19, 0xFF	; 255
    44c6:	4f e7       	ldi	r20, 0x7F	; 127
    44c8:	57 e4       	ldi	r21, 0x47	; 71
    44ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44ce:	18 16       	cp	r1, r24
    44d0:	4c f5       	brge	.+82     	; 0x4524 <main+0x2960>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44d2:	69 8d       	ldd	r22, Y+25	; 0x19
    44d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44da:	20 e0       	ldi	r18, 0x00	; 0
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	40 e2       	ldi	r20, 0x20	; 32
    44e0:	51 e4       	ldi	r21, 0x41	; 65
    44e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44e6:	dc 01       	movw	r26, r24
    44e8:	cb 01       	movw	r24, r22
    44ea:	bc 01       	movw	r22, r24
    44ec:	cd 01       	movw	r24, r26
    44ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	9c 8b       	std	Y+20, r25	; 0x14
    44f8:	8b 8b       	std	Y+19, r24	; 0x13
    44fa:	0f c0       	rjmp	.+30     	; 0x451a <main+0x2956>
    44fc:	88 ec       	ldi	r24, 0xC8	; 200
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	9a 8b       	std	Y+18, r25	; 0x12
    4502:	89 8b       	std	Y+17, r24	; 0x11
    4504:	89 89       	ldd	r24, Y+17	; 0x11
    4506:	9a 89       	ldd	r25, Y+18	; 0x12
    4508:	01 97       	sbiw	r24, 0x01	; 1
    450a:	f1 f7       	brne	.-4      	; 0x4508 <main+0x2944>
    450c:	9a 8b       	std	Y+18, r25	; 0x12
    450e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4510:	8b 89       	ldd	r24, Y+19	; 0x13
    4512:	9c 89       	ldd	r25, Y+20	; 0x14
    4514:	01 97       	sbiw	r24, 0x01	; 1
    4516:	9c 8b       	std	Y+20, r25	; 0x14
    4518:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    451a:	8b 89       	ldd	r24, Y+19	; 0x13
    451c:	9c 89       	ldd	r25, Y+20	; 0x14
    451e:	00 97       	sbiw	r24, 0x00	; 0
    4520:	69 f7       	brne	.-38     	; 0x44fc <main+0x2938>
    4522:	14 c0       	rjmp	.+40     	; 0x454c <main+0x2988>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4524:	6d 89       	ldd	r22, Y+21	; 0x15
    4526:	7e 89       	ldd	r23, Y+22	; 0x16
    4528:	8f 89       	ldd	r24, Y+23	; 0x17
    452a:	98 8d       	ldd	r25, Y+24	; 0x18
    452c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4530:	dc 01       	movw	r26, r24
    4532:	cb 01       	movw	r24, r22
    4534:	9c 8b       	std	Y+20, r25	; 0x14
    4536:	8b 8b       	std	Y+19, r24	; 0x13
    4538:	8b 89       	ldd	r24, Y+19	; 0x13
    453a:	9c 89       	ldd	r25, Y+20	; 0x14
    453c:	98 8b       	std	Y+16, r25	; 0x10
    453e:	8f 87       	std	Y+15, r24	; 0x0f
    4540:	8f 85       	ldd	r24, Y+15	; 0x0f
    4542:	98 89       	ldd	r25, Y+16	; 0x10
    4544:	01 97       	sbiw	r24, 0x01	; 1
    4546:	f1 f7       	brne	.-4      	; 0x4544 <main+0x2980>
    4548:	98 8b       	std	Y+16, r25	; 0x10
    454a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		Lcd_vidSendCommand(0x84);
    454c:	84 e8       	ldi	r24, 0x84	; 132
    454e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Lcd_vidSendCommand>
		Lcd_vidWriteChar(result+'0');
    4552:	80 91 6c 00 	lds	r24, 0x006C
    4556:	80 5d       	subi	r24, 0xD0	; 208
    4558:	0e 94 45 0b 	call	0x168a	; 0x168a <Lcd_vidWriteChar>
    455c:	80 e0       	ldi	r24, 0x00	; 0
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	aa ef       	ldi	r26, 0xFA	; 250
    4562:	b3 e4       	ldi	r27, 0x43	; 67
    4564:	8b 87       	std	Y+11, r24	; 0x0b
    4566:	9c 87       	std	Y+12, r25	; 0x0c
    4568:	ad 87       	std	Y+13, r26	; 0x0d
    456a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456c:	6b 85       	ldd	r22, Y+11	; 0x0b
    456e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4570:	8d 85       	ldd	r24, Y+13	; 0x0d
    4572:	9e 85       	ldd	r25, Y+14	; 0x0e
    4574:	20 e0       	ldi	r18, 0x00	; 0
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	4a ef       	ldi	r20, 0xFA	; 250
    457a:	54 e4       	ldi	r21, 0x44	; 68
    457c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4580:	dc 01       	movw	r26, r24
    4582:	cb 01       	movw	r24, r22
    4584:	8f 83       	std	Y+7, r24	; 0x07
    4586:	98 87       	std	Y+8, r25	; 0x08
    4588:	a9 87       	std	Y+9, r26	; 0x09
    458a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    458c:	6f 81       	ldd	r22, Y+7	; 0x07
    458e:	78 85       	ldd	r23, Y+8	; 0x08
    4590:	89 85       	ldd	r24, Y+9	; 0x09
    4592:	9a 85       	ldd	r25, Y+10	; 0x0a
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	40 e8       	ldi	r20, 0x80	; 128
    459a:	5f e3       	ldi	r21, 0x3F	; 63
    459c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45a0:	88 23       	and	r24, r24
    45a2:	2c f4       	brge	.+10     	; 0x45ae <main+0x29ea>
		__ticks = 1;
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	9e 83       	std	Y+6, r25	; 0x06
    45aa:	8d 83       	std	Y+5, r24	; 0x05
    45ac:	40 c0       	rjmp	.+128    	; 0x462e <main+0x2a6a>
	else if (__tmp > 65535)
    45ae:	6f 81       	ldd	r22, Y+7	; 0x07
    45b0:	78 85       	ldd	r23, Y+8	; 0x08
    45b2:	89 85       	ldd	r24, Y+9	; 0x09
    45b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	3f ef       	ldi	r19, 0xFF	; 255
    45ba:	4f e7       	ldi	r20, 0x7F	; 127
    45bc:	57 e4       	ldi	r21, 0x47	; 71
    45be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45c2:	18 16       	cp	r1, r24
    45c4:	54 f5       	brge	.+84     	; 0x461a <main+0x2a56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    45ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    45cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	40 e2       	ldi	r20, 0x20	; 32
    45d4:	51 e4       	ldi	r21, 0x41	; 65
    45d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	bc 01       	movw	r22, r24
    45e0:	cd 01       	movw	r24, r26
    45e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	9e 83       	std	Y+6, r25	; 0x06
    45ec:	8d 83       	std	Y+5, r24	; 0x05
    45ee:	0f c0       	rjmp	.+30     	; 0x460e <main+0x2a4a>
    45f0:	88 ec       	ldi	r24, 0xC8	; 200
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	9c 83       	std	Y+4, r25	; 0x04
    45f6:	8b 83       	std	Y+3, r24	; 0x03
    45f8:	8b 81       	ldd	r24, Y+3	; 0x03
    45fa:	9c 81       	ldd	r25, Y+4	; 0x04
    45fc:	01 97       	sbiw	r24, 0x01	; 1
    45fe:	f1 f7       	brne	.-4      	; 0x45fc <main+0x2a38>
    4600:	9c 83       	std	Y+4, r25	; 0x04
    4602:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4604:	8d 81       	ldd	r24, Y+5	; 0x05
    4606:	9e 81       	ldd	r25, Y+6	; 0x06
    4608:	01 97       	sbiw	r24, 0x01	; 1
    460a:	9e 83       	std	Y+6, r25	; 0x06
    460c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    460e:	8d 81       	ldd	r24, Y+5	; 0x05
    4610:	9e 81       	ldd	r25, Y+6	; 0x06
    4612:	00 97       	sbiw	r24, 0x00	; 0
    4614:	69 f7       	brne	.-38     	; 0x45f0 <main+0x2a2c>
    4616:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    461a:	6f 81       	ldd	r22, Y+7	; 0x07
    461c:	78 85       	ldd	r23, Y+8	; 0x08
    461e:	89 85       	ldd	r24, Y+9	; 0x09
    4620:	9a 85       	ldd	r25, Y+10	; 0x0a
    4622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4626:	dc 01       	movw	r26, r24
    4628:	cb 01       	movw	r24, r22
    462a:	9e 83       	std	Y+6, r25	; 0x06
    462c:	8d 83       	std	Y+5, r24	; 0x05
    462e:	8d 81       	ldd	r24, Y+5	; 0x05
    4630:	9e 81       	ldd	r25, Y+6	; 0x06
    4632:	9a 83       	std	Y+2, r25	; 0x02
    4634:	89 83       	std	Y+1, r24	; 0x01
    4636:	89 81       	ldd	r24, Y+1	; 0x01
    4638:	9a 81       	ldd	r25, Y+2	; 0x02
    463a:	01 97       	sbiw	r24, 0x01	; 1
    463c:	f1 f7       	brne	.-4      	; 0x463a <main+0x2a76>
    463e:	9a 83       	std	Y+2, r25	; 0x02
    4640:	89 83       	std	Y+1, r24	; 0x01
    4642:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <main+0x28>
		_delay_ms(500);
	}
	}
	else if(key2==0xFF){
    4646:	80 91 6d 00 	lds	r24, 0x006D
    464a:	8f 3f       	cpi	r24, 0xFF	; 255
    464c:	11 f0       	breq	.+4      	; 0x4652 <main+0x2a8e>
    464e:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <main+0x28>
		PORTD=0xFF;
    4652:	e2 e3       	ldi	r30, 0x32	; 50
    4654:	f0 e0       	ldi	r31, 0x00	; 0
    4656:	8f ef       	ldi	r24, 0xFF	; 255
    4658:	80 83       	st	Z, r24
    465a:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <main+0x28>

0000465e <__udivmodqi4>:
    465e:	99 1b       	sub	r25, r25
    4660:	79 e0       	ldi	r23, 0x09	; 9
    4662:	04 c0       	rjmp	.+8      	; 0x466c <__udivmodqi4_ep>

00004664 <__udivmodqi4_loop>:
    4664:	99 1f       	adc	r25, r25
    4666:	96 17       	cp	r25, r22
    4668:	08 f0       	brcs	.+2      	; 0x466c <__udivmodqi4_ep>
    466a:	96 1b       	sub	r25, r22

0000466c <__udivmodqi4_ep>:
    466c:	88 1f       	adc	r24, r24
    466e:	7a 95       	dec	r23
    4670:	c9 f7       	brne	.-14     	; 0x4664 <__udivmodqi4_loop>
    4672:	80 95       	com	r24
    4674:	08 95       	ret

00004676 <__prologue_saves__>:
    4676:	2f 92       	push	r2
    4678:	3f 92       	push	r3
    467a:	4f 92       	push	r4
    467c:	5f 92       	push	r5
    467e:	6f 92       	push	r6
    4680:	7f 92       	push	r7
    4682:	8f 92       	push	r8
    4684:	9f 92       	push	r9
    4686:	af 92       	push	r10
    4688:	bf 92       	push	r11
    468a:	cf 92       	push	r12
    468c:	df 92       	push	r13
    468e:	ef 92       	push	r14
    4690:	ff 92       	push	r15
    4692:	0f 93       	push	r16
    4694:	1f 93       	push	r17
    4696:	cf 93       	push	r28
    4698:	df 93       	push	r29
    469a:	cd b7       	in	r28, 0x3d	; 61
    469c:	de b7       	in	r29, 0x3e	; 62
    469e:	ca 1b       	sub	r28, r26
    46a0:	db 0b       	sbc	r29, r27
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	f8 94       	cli
    46a6:	de bf       	out	0x3e, r29	; 62
    46a8:	0f be       	out	0x3f, r0	; 63
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	09 94       	ijmp

000046ae <__epilogue_restores__>:
    46ae:	2a 88       	ldd	r2, Y+18	; 0x12
    46b0:	39 88       	ldd	r3, Y+17	; 0x11
    46b2:	48 88       	ldd	r4, Y+16	; 0x10
    46b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    46b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    46b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    46ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    46bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    46be:	aa 84       	ldd	r10, Y+10	; 0x0a
    46c0:	b9 84       	ldd	r11, Y+9	; 0x09
    46c2:	c8 84       	ldd	r12, Y+8	; 0x08
    46c4:	df 80       	ldd	r13, Y+7	; 0x07
    46c6:	ee 80       	ldd	r14, Y+6	; 0x06
    46c8:	fd 80       	ldd	r15, Y+5	; 0x05
    46ca:	0c 81       	ldd	r16, Y+4	; 0x04
    46cc:	1b 81       	ldd	r17, Y+3	; 0x03
    46ce:	aa 81       	ldd	r26, Y+2	; 0x02
    46d0:	b9 81       	ldd	r27, Y+1	; 0x01
    46d2:	ce 0f       	add	r28, r30
    46d4:	d1 1d       	adc	r29, r1
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	f8 94       	cli
    46da:	de bf       	out	0x3e, r29	; 62
    46dc:	0f be       	out	0x3f, r0	; 63
    46de:	cd bf       	out	0x3d, r28	; 61
    46e0:	ed 01       	movw	r28, r26
    46e2:	08 95       	ret

000046e4 <_exit>:
    46e4:	f8 94       	cli

000046e6 <__stop_program>:
    46e6:	ff cf       	rjmp	.-2      	; 0x46e6 <__stop_program>
