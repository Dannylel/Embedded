
First_Real_Life_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000db0  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a77  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 34 04 	call	0x868	; 0x868 <main>
  64:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Dio_vidSetPinDir>:
#include"../Lib/Std_types.h"
#include"../Lib/Bit_math.h"
#include"Dio_Priv.h"
#include"Dio_int.h"

void Dio_vidSetPinDir(u8 Pin, u8 Dir){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <Dio_vidSetPinDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <Dio_vidSetPinDir+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <Dio_vidSetPinDir+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8b 83       	std	Y+3, r24	; 0x03
  7c:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
  7e:	8b 81       	ldd	r24, Y+3	; 0x03
  80:	86 95       	lsr	r24
  82:	86 95       	lsr	r24
  84:	86 95       	lsr	r24
  86:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	87 70       	andi	r24, 0x07	; 7
  8c:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	3e 83       	std	Y+6, r19	; 0x06
  96:	2d 83       	std	Y+5, r18	; 0x05
  98:	8d 81       	ldd	r24, Y+5	; 0x05
  9a:	9e 81       	ldd	r25, Y+6	; 0x06
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 05       	cpc	r25, r1
  a0:	09 f4       	brne	.+2      	; 0xa4 <Dio_vidSetPinDir+0x38>
  a2:	43 c0       	rjmp	.+134    	; 0x12a <Dio_vidSetPinDir+0xbe>
  a4:	2d 81       	ldd	r18, Y+5	; 0x05
  a6:	3e 81       	ldd	r19, Y+6	; 0x06
  a8:	22 30       	cpi	r18, 0x02	; 2
  aa:	31 05       	cpc	r19, r1
  ac:	2c f4       	brge	.+10     	; 0xb8 <Dio_vidSetPinDir+0x4c>
  ae:	8d 81       	ldd	r24, Y+5	; 0x05
  b0:	9e 81       	ldd	r25, Y+6	; 0x06
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	71 f0       	breq	.+28     	; 0xd2 <Dio_vidSetPinDir+0x66>
  b6:	bc c0       	rjmp	.+376    	; 0x230 <Dio_vidSetPinDir+0x1c4>
  b8:	2d 81       	ldd	r18, Y+5	; 0x05
  ba:	3e 81       	ldd	r19, Y+6	; 0x06
  bc:	22 30       	cpi	r18, 0x02	; 2
  be:	31 05       	cpc	r19, r1
  c0:	09 f4       	brne	.+2      	; 0xc4 <Dio_vidSetPinDir+0x58>
  c2:	5f c0       	rjmp	.+190    	; 0x182 <Dio_vidSetPinDir+0x116>
  c4:	8d 81       	ldd	r24, Y+5	; 0x05
  c6:	9e 81       	ldd	r25, Y+6	; 0x06
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	91 05       	cpc	r25, r1
  cc:	09 f4       	brne	.+2      	; 0xd0 <Dio_vidSetPinDir+0x64>
  ce:	85 c0       	rjmp	.+266    	; 0x1da <Dio_vidSetPinDir+0x16e>
  d0:	af c0       	rjmp	.+350    	; 0x230 <Dio_vidSetPinDir+0x1c4>
	case 0:	//DDRA
		if(Dir==1){
  d2:	8c 81       	ldd	r24, Y+4	; 0x04
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	a1 f4       	brne	.+40     	; 0x100 <Dio_vidSetPinDir+0x94>
			SET_BIT(DDRA.Byte,PinLoc);
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <Dio_vidSetPinDir+0x8a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <Dio_vidSetPinDir+0x86>
  fa:	84 2b       	or	r24, r20
  fc:	8c 93       	st	X, r24
  fe:	98 c0       	rjmp	.+304    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRA.Byte,PinLoc);
 100:	aa e3       	ldi	r26, 0x3A	; 58
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	ea e3       	ldi	r30, 0x3A	; 58
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	48 2f       	mov	r20, r24
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <Dio_vidSetPinDir+0xb2>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <Dio_vidSetPinDir+0xae>
 122:	80 95       	com	r24
 124:	84 23       	and	r24, r20
 126:	8c 93       	st	X, r24
 128:	83 c0       	rjmp	.+262    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 1:	//DDRB
		if(Dir==1){
 12a:	8c 81       	ldd	r24, Y+4	; 0x04
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	a1 f4       	brne	.+40     	; 0x158 <Dio_vidSetPinDir+0xec>
			SET_BIT(DDRB.Byte,PinLoc);
 130:	a7 e3       	ldi	r26, 0x37	; 55
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e7 e3       	ldi	r30, 0x37	; 55
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	48 2f       	mov	r20, r24
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 2e       	mov	r0, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <Dio_vidSetPinDir+0xe2>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <Dio_vidSetPinDir+0xde>
 152:	84 2b       	or	r24, r20
 154:	8c 93       	st	X, r24
 156:	6c c0       	rjmp	.+216    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRB.Byte,PinLoc);
 158:	a7 e3       	ldi	r26, 0x37	; 55
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e7 e3       	ldi	r30, 0x37	; 55
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	48 2f       	mov	r20, r24
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 2e       	mov	r0, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <Dio_vidSetPinDir+0x10a>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <Dio_vidSetPinDir+0x106>
 17a:	80 95       	com	r24
 17c:	84 23       	and	r24, r20
 17e:	8c 93       	st	X, r24
 180:	57 c0       	rjmp	.+174    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 2:	//DDRC
		if(Dir==1){
 182:	8c 81       	ldd	r24, Y+4	; 0x04
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	a1 f4       	brne	.+40     	; 0x1b0 <Dio_vidSetPinDir+0x144>
			SET_BIT(DDRC.Byte,PinLoc);
 188:	a4 e3       	ldi	r26, 0x34	; 52
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	e4 e3       	ldi	r30, 0x34	; 52
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	48 2f       	mov	r20, r24
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 2e       	mov	r0, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <Dio_vidSetPinDir+0x13a>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <Dio_vidSetPinDir+0x136>
 1aa:	84 2b       	or	r24, r20
 1ac:	8c 93       	st	X, r24
 1ae:	40 c0       	rjmp	.+128    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRC.Byte,PinLoc);
 1b0:	a4 e3       	ldi	r26, 0x34	; 52
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e4 e3       	ldi	r30, 0x34	; 52
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	48 2f       	mov	r20, r24
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	28 2f       	mov	r18, r24
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 2e       	mov	r0, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <Dio_vidSetPinDir+0x162>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <Dio_vidSetPinDir+0x15e>
 1d2:	80 95       	com	r24
 1d4:	84 23       	and	r24, r20
 1d6:	8c 93       	st	X, r24
 1d8:	2b c0       	rjmp	.+86     	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 3:	//DDRD
		if(Dir==1){
 1da:	8c 81       	ldd	r24, Y+4	; 0x04
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	a1 f4       	brne	.+40     	; 0x208 <Dio_vidSetPinDir+0x19c>
			SET_BIT(DDRD.Byte,PinLoc);
 1e0:	a1 e3       	ldi	r26, 0x31	; 49
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e1 e3       	ldi	r30, 0x31	; 49
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	48 2f       	mov	r20, r24
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 2e       	mov	r0, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <Dio_vidSetPinDir+0x192>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <Dio_vidSetPinDir+0x18e>
 202:	84 2b       	or	r24, r20
 204:	8c 93       	st	X, r24
 206:	14 c0       	rjmp	.+40     	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRD.Byte,PinLoc);
 208:	a1 e3       	ldi	r26, 0x31	; 49
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e1 e3       	ldi	r30, 0x31	; 49
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	48 2f       	mov	r20, r24
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 2e       	mov	r0, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <Dio_vidSetPinDir+0x1ba>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <Dio_vidSetPinDir+0x1b6>
 22a:	80 95       	com	r24
 22c:	84 23       	and	r24, r20
 22e:	8c 93       	st	X, r24
		}
		break;
	}
}
 230:	26 96       	adiw	r28, 0x06	; 6
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin, u8 Val){
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	00 d0       	rcall	.+0      	; 0x248 <Dio_vidSetPinVal+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <Dio_vidSetPinVal+0x8>
 24a:	00 d0       	rcall	.+0      	; 0x24c <Dio_vidSetPinVal+0xa>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	8b 83       	std	Y+3, r24	; 0x03
 252:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	86 95       	lsr	r24
 258:	86 95       	lsr	r24
 25a:	86 95       	lsr	r24
 25c:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	87 70       	andi	r24, 0x07	; 7
 262:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	3e 83       	std	Y+6, r19	; 0x06
 26c:	2d 83       	std	Y+5, r18	; 0x05
 26e:	8d 81       	ldd	r24, Y+5	; 0x05
 270:	9e 81       	ldd	r25, Y+6	; 0x06
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	91 05       	cpc	r25, r1
 276:	09 f4       	brne	.+2      	; 0x27a <Dio_vidSetPinVal+0x38>
 278:	43 c0       	rjmp	.+134    	; 0x300 <Dio_vidSetPinVal+0xbe>
 27a:	2d 81       	ldd	r18, Y+5	; 0x05
 27c:	3e 81       	ldd	r19, Y+6	; 0x06
 27e:	22 30       	cpi	r18, 0x02	; 2
 280:	31 05       	cpc	r19, r1
 282:	2c f4       	brge	.+10     	; 0x28e <Dio_vidSetPinVal+0x4c>
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	71 f0       	breq	.+28     	; 0x2a8 <Dio_vidSetPinVal+0x66>
 28c:	bc c0       	rjmp	.+376    	; 0x406 <Dio_vidSetPinVal+0x1c4>
 28e:	2d 81       	ldd	r18, Y+5	; 0x05
 290:	3e 81       	ldd	r19, Y+6	; 0x06
 292:	22 30       	cpi	r18, 0x02	; 2
 294:	31 05       	cpc	r19, r1
 296:	09 f4       	brne	.+2      	; 0x29a <Dio_vidSetPinVal+0x58>
 298:	5f c0       	rjmp	.+190    	; 0x358 <Dio_vidSetPinVal+0x116>
 29a:	8d 81       	ldd	r24, Y+5	; 0x05
 29c:	9e 81       	ldd	r25, Y+6	; 0x06
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	91 05       	cpc	r25, r1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <Dio_vidSetPinVal+0x64>
 2a4:	85 c0       	rjmp	.+266    	; 0x3b0 <Dio_vidSetPinVal+0x16e>
 2a6:	af c0       	rjmp	.+350    	; 0x406 <Dio_vidSetPinVal+0x1c4>
	case 0:
		if(Val ==1)
 2a8:	8c 81       	ldd	r24, Y+4	; 0x04
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <Dio_vidSetPinVal+0x94>
						{
						SET_BIT(PORTA.Byte , PinLoc);
 2ae:	ab e3       	ldi	r26, 0x3B	; 59
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	eb e3       	ldi	r30, 0x3B	; 59
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	48 2f       	mov	r20, r24
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 2e       	mov	r0, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <Dio_vidSetPinVal+0x8a>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <Dio_vidSetPinVal+0x86>
 2d0:	84 2b       	or	r24, r20
 2d2:	8c 93       	st	X, r24
 2d4:	98 c0       	rjmp	.+304    	; 0x406 <Dio_vidSetPinVal+0x1c4>
						}
					else
						{
						CLR_BIT(PORTA.Byte , PinLoc);
 2d6:	ab e3       	ldi	r26, 0x3B	; 59
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	eb e3       	ldi	r30, 0x3B	; 59
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <Dio_vidSetPinVal+0xb2>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <Dio_vidSetPinVal+0xae>
 2f8:	80 95       	com	r24
 2fa:	84 23       	and	r24, r20
 2fc:	8c 93       	st	X, r24
 2fe:	83 c0       	rjmp	.+262    	; 0x406 <Dio_vidSetPinVal+0x1c4>
						}
					break;
				case 1: //PORTB
					if(Val ==1)
 300:	8c 81       	ldd	r24, Y+4	; 0x04
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	a1 f4       	brne	.+40     	; 0x32e <Dio_vidSetPinVal+0xec>
						{
						SET_BIT(PORTB.Byte , PinLoc);
 306:	a8 e3       	ldi	r26, 0x38	; 56
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e8 e3       	ldi	r30, 0x38	; 56
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	48 2f       	mov	r20, r24
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	28 2f       	mov	r18, r24
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 2e       	mov	r0, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <Dio_vidSetPinVal+0xe2>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <Dio_vidSetPinVal+0xde>
 328:	84 2b       	or	r24, r20
 32a:	8c 93       	st	X, r24
 32c:	6c c0       	rjmp	.+216    	; 0x406 <Dio_vidSetPinVal+0x1c4>
						}
					else
						{
						CLR_BIT(PORTB.Byte , PinLoc);
 32e:	a8 e3       	ldi	r26, 0x38	; 56
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	e8 e3       	ldi	r30, 0x38	; 56
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	48 2f       	mov	r20, r24
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 2e       	mov	r0, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <Dio_vidSetPinVal+0x10a>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <Dio_vidSetPinVal+0x106>
 350:	80 95       	com	r24
 352:	84 23       	and	r24, r20
 354:	8c 93       	st	X, r24
 356:	57 c0       	rjmp	.+174    	; 0x406 <Dio_vidSetPinVal+0x1c4>
						}
					break;
				case 2: //PORTC
					if(Val ==1)
 358:	8c 81       	ldd	r24, Y+4	; 0x04
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	a1 f4       	brne	.+40     	; 0x386 <Dio_vidSetPinVal+0x144>
						{
						SET_BIT(PORTC.Byte , PinLoc);
 35e:	a5 e3       	ldi	r26, 0x35	; 53
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	e5 e3       	ldi	r30, 0x35	; 53
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	48 2f       	mov	r20, r24
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 2e       	mov	r0, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <Dio_vidSetPinVal+0x13a>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <Dio_vidSetPinVal+0x136>
 380:	84 2b       	or	r24, r20
 382:	8c 93       	st	X, r24
 384:	40 c0       	rjmp	.+128    	; 0x406 <Dio_vidSetPinVal+0x1c4>
						}
					else
						{
						CLR_BIT(PORTC.Byte , PinLoc);
 386:	a5 e3       	ldi	r26, 0x35	; 53
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	e5 e3       	ldi	r30, 0x35	; 53
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	48 2f       	mov	r20, r24
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 2e       	mov	r0, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Dio_vidSetPinVal+0x162>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <Dio_vidSetPinVal+0x15e>
 3a8:	80 95       	com	r24
 3aa:	84 23       	and	r24, r20
 3ac:	8c 93       	st	X, r24
 3ae:	2b c0       	rjmp	.+86     	; 0x406 <Dio_vidSetPinVal+0x1c4>
						}
					break;
				case 3: //PORTD
					if(Val ==1)
 3b0:	8c 81       	ldd	r24, Y+4	; 0x04
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	a1 f4       	brne	.+40     	; 0x3de <Dio_vidSetPinVal+0x19c>
						{
						SET_BIT(PORTD.Byte , PinLoc);
 3b6:	a2 e3       	ldi	r26, 0x32	; 50
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	e2 e3       	ldi	r30, 0x32	; 50
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	48 2f       	mov	r20, r24
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Dio_vidSetPinVal+0x192>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <Dio_vidSetPinVal+0x18e>
 3d8:	84 2b       	or	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	14 c0       	rjmp	.+40     	; 0x406 <Dio_vidSetPinVal+0x1c4>
						}
					else
						{
						CLR_BIT(PORTD.Byte , PinLoc);
 3de:	a2 e3       	ldi	r26, 0x32	; 50
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e2 e3       	ldi	r30, 0x32	; 50
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <Dio_vidSetPinVal+0x1ba>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <Dio_vidSetPinVal+0x1b6>
 400:	80 95       	com	r24
 402:	84 23       	and	r24, r20
 404:	8c 93       	st	X, r24
						}
					break;
			}
		}
 406:	26 96       	adiw	r28, 0x06	; 6
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	cf 91       	pop	r28
 414:	df 91       	pop	r29
 416:	08 95       	ret

00000418 <Dio_u8GetPinVal>:

		u8 Dio_u8GetPinVal(u8 pin)
		{
 418:	df 93       	push	r29
 41a:	cf 93       	push	r28
 41c:	00 d0       	rcall	.+0      	; 0x41e <Dio_u8GetPinVal+0x6>
 41e:	00 d0       	rcall	.+0      	; 0x420 <Dio_u8GetPinVal+0x8>
 420:	00 d0       	rcall	.+0      	; 0x422 <Dio_u8GetPinVal+0xa>
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
 426:	8c 83       	std	Y+4, r24	; 0x04
			u8 PortId;
			u8 PinLoc;
			u8 PinVal = 0;
 428:	19 82       	std	Y+1, r1	; 0x01

			if (pin > 31)
 42a:	8c 81       	ldd	r24, Y+4	; 0x04
 42c:	80 32       	cpi	r24, 0x20	; 32
 42e:	18 f0       	brcs	.+6      	; 0x436 <Dio_u8GetPinVal+0x1e>
			{
				PinVal = DIO_u8INVALED_PIN_NUM;
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	89 83       	std	Y+1, r24	; 0x01
 434:	6f c0       	rjmp	.+222    	; 0x514 <Dio_u8GetPinVal+0xfc>
			}
			else
			{
				PortId = pin/8;
 436:	8c 81       	ldd	r24, Y+4	; 0x04
 438:	86 95       	lsr	r24
 43a:	86 95       	lsr	r24
 43c:	86 95       	lsr	r24
 43e:	8b 83       	std	Y+3, r24	; 0x03
				PinLoc = pin%8;
 440:	8c 81       	ldd	r24, Y+4	; 0x04
 442:	87 70       	andi	r24, 0x07	; 7
 444:	8a 83       	std	Y+2, r24	; 0x02
				switch(PortId)
 446:	8b 81       	ldd	r24, Y+3	; 0x03
 448:	28 2f       	mov	r18, r24
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	3e 83       	std	Y+6, r19	; 0x06
 44e:	2d 83       	std	Y+5, r18	; 0x05
 450:	4d 81       	ldd	r20, Y+5	; 0x05
 452:	5e 81       	ldd	r21, Y+6	; 0x06
 454:	41 30       	cpi	r20, 0x01	; 1
 456:	51 05       	cpc	r21, r1
 458:	41 f1       	breq	.+80     	; 0x4aa <Dio_u8GetPinVal+0x92>
 45a:	8d 81       	ldd	r24, Y+5	; 0x05
 45c:	9e 81       	ldd	r25, Y+6	; 0x06
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	91 05       	cpc	r25, r1
 462:	34 f4       	brge	.+12     	; 0x470 <Dio_u8GetPinVal+0x58>
 464:	2d 81       	ldd	r18, Y+5	; 0x05
 466:	3e 81       	ldd	r19, Y+6	; 0x06
 468:	21 15       	cp	r18, r1
 46a:	31 05       	cpc	r19, r1
 46c:	61 f0       	breq	.+24     	; 0x486 <Dio_u8GetPinVal+0x6e>
 46e:	52 c0       	rjmp	.+164    	; 0x514 <Dio_u8GetPinVal+0xfc>
 470:	4d 81       	ldd	r20, Y+5	; 0x05
 472:	5e 81       	ldd	r21, Y+6	; 0x06
 474:	42 30       	cpi	r20, 0x02	; 2
 476:	51 05       	cpc	r21, r1
 478:	51 f1       	breq	.+84     	; 0x4ce <Dio_u8GetPinVal+0xb6>
 47a:	8d 81       	ldd	r24, Y+5	; 0x05
 47c:	9e 81       	ldd	r25, Y+6	; 0x06
 47e:	83 30       	cpi	r24, 0x03	; 3
 480:	91 05       	cpc	r25, r1
 482:	b9 f1       	breq	.+110    	; 0x4f2 <Dio_u8GetPinVal+0xda>
 484:	47 c0       	rjmp	.+142    	; 0x514 <Dio_u8GetPinVal+0xfc>
				{
					case 0: //PINA
						PinVal = GET_BIT(PINA.Byte , PinLoc);
 486:	e9 e3       	ldi	r30, 0x39	; 57
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	28 2f       	mov	r18, r24
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	88 2f       	mov	r24, r24
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	a9 01       	movw	r20, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <Dio_u8GetPinVal+0x86>
 49a:	55 95       	asr	r21
 49c:	47 95       	ror	r20
 49e:	8a 95       	dec	r24
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <Dio_u8GetPinVal+0x82>
 4a2:	ca 01       	movw	r24, r20
 4a4:	81 70       	andi	r24, 0x01	; 1
 4a6:	89 83       	std	Y+1, r24	; 0x01
 4a8:	35 c0       	rjmp	.+106    	; 0x514 <Dio_u8GetPinVal+0xfc>
					break;

					case 1: //PINB
						PinVal = GET_BIT(PINB.Byte , PinLoc);
 4aa:	e6 e3       	ldi	r30, 0x36	; 54
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	88 2f       	mov	r24, r24
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	a9 01       	movw	r20, r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <Dio_u8GetPinVal+0xaa>
 4be:	55 95       	asr	r21
 4c0:	47 95       	ror	r20
 4c2:	8a 95       	dec	r24
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <Dio_u8GetPinVal+0xa6>
 4c6:	ca 01       	movw	r24, r20
 4c8:	81 70       	andi	r24, 0x01	; 1
 4ca:	89 83       	std	Y+1, r24	; 0x01
 4cc:	23 c0       	rjmp	.+70     	; 0x514 <Dio_u8GetPinVal+0xfc>
					break;

					case 2: //PINC
						PinVal = GET_BIT(PINC.Byte , PinLoc);
 4ce:	e3 e3       	ldi	r30, 0x33	; 51
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	88 2f       	mov	r24, r24
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	a9 01       	movw	r20, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <Dio_u8GetPinVal+0xce>
 4e2:	55 95       	asr	r21
 4e4:	47 95       	ror	r20
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <Dio_u8GetPinVal+0xca>
 4ea:	ca 01       	movw	r24, r20
 4ec:	81 70       	andi	r24, 0x01	; 1
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	11 c0       	rjmp	.+34     	; 0x514 <Dio_u8GetPinVal+0xfc>
					break;

					case 3: //PIND
						PinVal = GET_BIT(PIND.Byte , PinLoc);
 4f2:	e0 e3       	ldi	r30, 0x30	; 48
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	88 2f       	mov	r24, r24
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	a9 01       	movw	r20, r18
 504:	02 c0       	rjmp	.+4      	; 0x50a <Dio_u8GetPinVal+0xf2>
 506:	55 95       	asr	r21
 508:	47 95       	ror	r20
 50a:	8a 95       	dec	r24
 50c:	e2 f7       	brpl	.-8      	; 0x506 <Dio_u8GetPinVal+0xee>
 50e:	ca 01       	movw	r24, r20
 510:	81 70       	andi	r24, 0x01	; 1
 512:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
			}
			return PinVal;
 514:	89 81       	ldd	r24, Y+1	; 0x01

		}
 516:	26 96       	adiw	r28, 0x06	; 6
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	cf 91       	pop	r28
 524:	df 91       	pop	r29
 526:	08 95       	ret

00000528 <Led_vidInit>:
#include"Dio_int.h"
#include"LED_cfg.h"
#include<avr/io.h>
#include "LED_int.h"

void Led_vidInit(u8 Led_id){
 528:	df 93       	push	r29
 52a:	cf 93       	push	r28
 52c:	00 d0       	rcall	.+0      	; 0x52e <Led_vidInit+0x6>
 52e:	0f 92       	push	r0
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
 534:	89 83       	std	Y+1, r24	; 0x01
	switch(Led_id){
 536:	89 81       	ldd	r24, Y+1	; 0x01
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	3b 83       	std	Y+3, r19	; 0x03
 53e:	2a 83       	std	Y+2, r18	; 0x02
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	9b 81       	ldd	r25, Y+3	; 0x03
 544:	84 30       	cpi	r24, 0x04	; 4
 546:	91 05       	cpc	r25, r1
 548:	c9 f1       	breq	.+114    	; 0x5bc <Led_vidInit+0x94>
 54a:	2a 81       	ldd	r18, Y+2	; 0x02
 54c:	3b 81       	ldd	r19, Y+3	; 0x03
 54e:	25 30       	cpi	r18, 0x05	; 5
 550:	31 05       	cpc	r19, r1
 552:	84 f4       	brge	.+32     	; 0x574 <Led_vidInit+0x4c>
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	9b 81       	ldd	r25, Y+3	; 0x03
 558:	82 30       	cpi	r24, 0x02	; 2
 55a:	91 05       	cpc	r25, r1
 55c:	29 f1       	breq	.+74     	; 0x5a8 <Led_vidInit+0x80>
 55e:	2a 81       	ldd	r18, Y+2	; 0x02
 560:	3b 81       	ldd	r19, Y+3	; 0x03
 562:	23 30       	cpi	r18, 0x03	; 3
 564:	31 05       	cpc	r19, r1
 566:	2c f5       	brge	.+74     	; 0x5b2 <Led_vidInit+0x8a>
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	9b 81       	ldd	r25, Y+3	; 0x03
 56c:	81 30       	cpi	r24, 0x01	; 1
 56e:	91 05       	cpc	r25, r1
 570:	b1 f0       	breq	.+44     	; 0x59e <Led_vidInit+0x76>
 572:	3c c0       	rjmp	.+120    	; 0x5ec <Led_vidInit+0xc4>
 574:	2a 81       	ldd	r18, Y+2	; 0x02
 576:	3b 81       	ldd	r19, Y+3	; 0x03
 578:	26 30       	cpi	r18, 0x06	; 6
 57a:	31 05       	cpc	r19, r1
 57c:	49 f1       	breq	.+82     	; 0x5d0 <Led_vidInit+0xa8>
 57e:	8a 81       	ldd	r24, Y+2	; 0x02
 580:	9b 81       	ldd	r25, Y+3	; 0x03
 582:	86 30       	cpi	r24, 0x06	; 6
 584:	91 05       	cpc	r25, r1
 586:	fc f0       	brlt	.+62     	; 0x5c6 <Led_vidInit+0x9e>
 588:	2a 81       	ldd	r18, Y+2	; 0x02
 58a:	3b 81       	ldd	r19, Y+3	; 0x03
 58c:	27 30       	cpi	r18, 0x07	; 7
 58e:	31 05       	cpc	r19, r1
 590:	21 f1       	breq	.+72     	; 0x5da <Led_vidInit+0xb2>
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	9b 81       	ldd	r25, Y+3	; 0x03
 596:	88 30       	cpi	r24, 0x08	; 8
 598:	91 05       	cpc	r25, r1
 59a:	21 f1       	breq	.+72     	; 0x5e4 <Led_vidInit+0xbc>
 59c:	27 c0       	rjmp	.+78     	; 0x5ec <Led_vidInit+0xc4>
	case 1:
		Dio_vidSetPinDir(LED_u8ID_1,DIO_u8HIGH);	//Setting 1st 2 pins
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 5a6:	22 c0       	rjmp	.+68     	; 0x5ec <Led_vidInit+0xc4>
		break;
	case 2:
		Dio_vidSetPinDir(LED_u8ID_2,DIO_u8HIGH);	//of PORTA to output
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 5b0:	1d c0       	rjmp	.+58     	; 0x5ec <Led_vidInit+0xc4>
		break;
	case 3:
		Dio_vidSetPinDir(LED_u8ID_3,DIO_u8HIGH);	//Setting 2nd 2 pins
 5b2:	8a e0       	ldi	r24, 0x0A	; 10
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 5ba:	18 c0       	rjmp	.+48     	; 0x5ec <Led_vidInit+0xc4>
		break;
	case 4:
		Dio_vidSetPinDir(LED_u8ID_4,DIO_u8HIGH);	//of PORTB to output
 5bc:	8b e0       	ldi	r24, 0x0B	; 11
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 5c4:	13 c0       	rjmp	.+38     	; 0x5ec <Led_vidInit+0xc4>
		break;
	case 5:
		Dio_vidSetPinDir(LED_u8ID_5,DIO_u8HIGH);	//Setting 3rd 2 pins
 5c6:	84 e1       	ldi	r24, 0x14	; 20
 5c8:	61 e0       	ldi	r22, 0x01	; 1
 5ca:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 5ce:	0e c0       	rjmp	.+28     	; 0x5ec <Led_vidInit+0xc4>
		break;
	case 6:
		Dio_vidSetPinDir(LED_u8ID_6,DIO_u8HIGH);	//of PORTC to output
 5d0:	85 e1       	ldi	r24, 0x15	; 21
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 5d8:	09 c0       	rjmp	.+18     	; 0x5ec <Led_vidInit+0xc4>
		break;
	case 7:
		Dio_vidSetPinDir(LED_u8ID_7,DIO_u8HIGH);	//Setting 4th 2 pins
 5da:	8e e1       	ldi	r24, 0x1E	; 30
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <Led_vidInit+0xc4>
		break;
	case 8:
		Dio_vidSetPinDir(LED_u8ID_8,DIO_u8HIGH);	//of PORTD to output
 5e4:	8f e1       	ldi	r24, 0x1F	; 31
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
		break;
	}
}
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	cf 91       	pop	r28
 5f4:	df 91       	pop	r29
 5f6:	08 95       	ret

000005f8 <Led_vidTurnOn>:
void Led_vidTurnOn(u8 Led_id){
 5f8:	df 93       	push	r29
 5fa:	cf 93       	push	r28
 5fc:	00 d0       	rcall	.+0      	; 0x5fe <Led_vidTurnOn+0x6>
 5fe:	0f 92       	push	r0
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
 604:	89 83       	std	Y+1, r24	; 0x01
	switch(Led_id){
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	3b 83       	std	Y+3, r19	; 0x03
 60e:	2a 83       	std	Y+2, r18	; 0x02
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	9b 81       	ldd	r25, Y+3	; 0x03
 614:	84 30       	cpi	r24, 0x04	; 4
 616:	91 05       	cpc	r25, r1
 618:	c9 f1       	breq	.+114    	; 0x68c <Led_vidTurnOn+0x94>
 61a:	2a 81       	ldd	r18, Y+2	; 0x02
 61c:	3b 81       	ldd	r19, Y+3	; 0x03
 61e:	25 30       	cpi	r18, 0x05	; 5
 620:	31 05       	cpc	r19, r1
 622:	84 f4       	brge	.+32     	; 0x644 <Led_vidTurnOn+0x4c>
 624:	8a 81       	ldd	r24, Y+2	; 0x02
 626:	9b 81       	ldd	r25, Y+3	; 0x03
 628:	82 30       	cpi	r24, 0x02	; 2
 62a:	91 05       	cpc	r25, r1
 62c:	29 f1       	breq	.+74     	; 0x678 <Led_vidTurnOn+0x80>
 62e:	2a 81       	ldd	r18, Y+2	; 0x02
 630:	3b 81       	ldd	r19, Y+3	; 0x03
 632:	23 30       	cpi	r18, 0x03	; 3
 634:	31 05       	cpc	r19, r1
 636:	2c f5       	brge	.+74     	; 0x682 <Led_vidTurnOn+0x8a>
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	9b 81       	ldd	r25, Y+3	; 0x03
 63c:	81 30       	cpi	r24, 0x01	; 1
 63e:	91 05       	cpc	r25, r1
 640:	b1 f0       	breq	.+44     	; 0x66e <Led_vidTurnOn+0x76>
 642:	3c c0       	rjmp	.+120    	; 0x6bc <Led_vidTurnOn+0xc4>
 644:	2a 81       	ldd	r18, Y+2	; 0x02
 646:	3b 81       	ldd	r19, Y+3	; 0x03
 648:	26 30       	cpi	r18, 0x06	; 6
 64a:	31 05       	cpc	r19, r1
 64c:	49 f1       	breq	.+82     	; 0x6a0 <Led_vidTurnOn+0xa8>
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	9b 81       	ldd	r25, Y+3	; 0x03
 652:	86 30       	cpi	r24, 0x06	; 6
 654:	91 05       	cpc	r25, r1
 656:	fc f0       	brlt	.+62     	; 0x696 <Led_vidTurnOn+0x9e>
 658:	2a 81       	ldd	r18, Y+2	; 0x02
 65a:	3b 81       	ldd	r19, Y+3	; 0x03
 65c:	27 30       	cpi	r18, 0x07	; 7
 65e:	31 05       	cpc	r19, r1
 660:	21 f1       	breq	.+72     	; 0x6aa <Led_vidTurnOn+0xb2>
 662:	8a 81       	ldd	r24, Y+2	; 0x02
 664:	9b 81       	ldd	r25, Y+3	; 0x03
 666:	88 30       	cpi	r24, 0x08	; 8
 668:	91 05       	cpc	r25, r1
 66a:	21 f1       	breq	.+72     	; 0x6b4 <Led_vidTurnOn+0xbc>
 66c:	27 c0       	rjmp	.+78     	; 0x6bc <Led_vidTurnOn+0xc4>
	case 1:
		Dio_vidSetPinVal(LED_u8ID_1,DIO_u8HIGH);
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 676:	22 c0       	rjmp	.+68     	; 0x6bc <Led_vidTurnOn+0xc4>
		break;
	case 2:
		Dio_vidSetPinVal(LED_u8ID_2,DIO_u8HIGH);
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	61 e0       	ldi	r22, 0x01	; 1
 67c:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 680:	1d c0       	rjmp	.+58     	; 0x6bc <Led_vidTurnOn+0xc4>
		break;
	case 3:
		Dio_vidSetPinVal(LED_u8ID_3,DIO_u8HIGH);
 682:	8a e0       	ldi	r24, 0x0A	; 10
 684:	61 e0       	ldi	r22, 0x01	; 1
 686:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 68a:	18 c0       	rjmp	.+48     	; 0x6bc <Led_vidTurnOn+0xc4>
		break;
	case 4:
		Dio_vidSetPinVal(LED_u8ID_4,DIO_u8HIGH);
 68c:	8b e0       	ldi	r24, 0x0B	; 11
 68e:	61 e0       	ldi	r22, 0x01	; 1
 690:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 694:	13 c0       	rjmp	.+38     	; 0x6bc <Led_vidTurnOn+0xc4>
		break;
	case 5:
		Dio_vidSetPinVal(LED_u8ID_5,DIO_u8HIGH);
 696:	84 e1       	ldi	r24, 0x14	; 20
 698:	61 e0       	ldi	r22, 0x01	; 1
 69a:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 69e:	0e c0       	rjmp	.+28     	; 0x6bc <Led_vidTurnOn+0xc4>
		break;
	case 6:
		Dio_vidSetPinVal(LED_u8ID_6,DIO_u8HIGH);
 6a0:	85 e1       	ldi	r24, 0x15	; 21
 6a2:	61 e0       	ldi	r22, 0x01	; 1
 6a4:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 6a8:	09 c0       	rjmp	.+18     	; 0x6bc <Led_vidTurnOn+0xc4>
		break;
	case 7:
		Dio_vidSetPinVal(LED_u8ID_7,DIO_u8HIGH);
 6aa:	8e e1       	ldi	r24, 0x1E	; 30
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 6b2:	04 c0       	rjmp	.+8      	; 0x6bc <Led_vidTurnOn+0xc4>
		break;
	case 8:
		Dio_vidSetPinVal(LED_u8ID_8,DIO_u8HIGH);
 6b4:	8f e1       	ldi	r24, 0x1F	; 31
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
		break;
	}
}
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	cf 91       	pop	r28
 6c4:	df 91       	pop	r29
 6c6:	08 95       	ret

000006c8 <Led_vidTurnOff>:

void Led_vidTurnOff(u8 Led_id){
 6c8:	df 93       	push	r29
 6ca:	cf 93       	push	r28
 6cc:	00 d0       	rcall	.+0      	; 0x6ce <Led_vidTurnOff+0x6>
 6ce:	0f 92       	push	r0
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Led_id){
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	28 2f       	mov	r18, r24
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	3b 83       	std	Y+3, r19	; 0x03
 6de:	2a 83       	std	Y+2, r18	; 0x02
 6e0:	8a 81       	ldd	r24, Y+2	; 0x02
 6e2:	9b 81       	ldd	r25, Y+3	; 0x03
 6e4:	84 30       	cpi	r24, 0x04	; 4
 6e6:	91 05       	cpc	r25, r1
 6e8:	c9 f1       	breq	.+114    	; 0x75c <Led_vidTurnOff+0x94>
 6ea:	2a 81       	ldd	r18, Y+2	; 0x02
 6ec:	3b 81       	ldd	r19, Y+3	; 0x03
 6ee:	25 30       	cpi	r18, 0x05	; 5
 6f0:	31 05       	cpc	r19, r1
 6f2:	84 f4       	brge	.+32     	; 0x714 <Led_vidTurnOff+0x4c>
 6f4:	8a 81       	ldd	r24, Y+2	; 0x02
 6f6:	9b 81       	ldd	r25, Y+3	; 0x03
 6f8:	82 30       	cpi	r24, 0x02	; 2
 6fa:	91 05       	cpc	r25, r1
 6fc:	29 f1       	breq	.+74     	; 0x748 <Led_vidTurnOff+0x80>
 6fe:	2a 81       	ldd	r18, Y+2	; 0x02
 700:	3b 81       	ldd	r19, Y+3	; 0x03
 702:	23 30       	cpi	r18, 0x03	; 3
 704:	31 05       	cpc	r19, r1
 706:	2c f5       	brge	.+74     	; 0x752 <Led_vidTurnOff+0x8a>
 708:	8a 81       	ldd	r24, Y+2	; 0x02
 70a:	9b 81       	ldd	r25, Y+3	; 0x03
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	91 05       	cpc	r25, r1
 710:	b1 f0       	breq	.+44     	; 0x73e <Led_vidTurnOff+0x76>
 712:	3c c0       	rjmp	.+120    	; 0x78c <Led_vidTurnOff+0xc4>
 714:	2a 81       	ldd	r18, Y+2	; 0x02
 716:	3b 81       	ldd	r19, Y+3	; 0x03
 718:	26 30       	cpi	r18, 0x06	; 6
 71a:	31 05       	cpc	r19, r1
 71c:	49 f1       	breq	.+82     	; 0x770 <Led_vidTurnOff+0xa8>
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	9b 81       	ldd	r25, Y+3	; 0x03
 722:	86 30       	cpi	r24, 0x06	; 6
 724:	91 05       	cpc	r25, r1
 726:	fc f0       	brlt	.+62     	; 0x766 <Led_vidTurnOff+0x9e>
 728:	2a 81       	ldd	r18, Y+2	; 0x02
 72a:	3b 81       	ldd	r19, Y+3	; 0x03
 72c:	27 30       	cpi	r18, 0x07	; 7
 72e:	31 05       	cpc	r19, r1
 730:	21 f1       	breq	.+72     	; 0x77a <Led_vidTurnOff+0xb2>
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	9b 81       	ldd	r25, Y+3	; 0x03
 736:	88 30       	cpi	r24, 0x08	; 8
 738:	91 05       	cpc	r25, r1
 73a:	21 f1       	breq	.+72     	; 0x784 <Led_vidTurnOff+0xbc>
 73c:	27 c0       	rjmp	.+78     	; 0x78c <Led_vidTurnOff+0xc4>
	case 1:
		Dio_vidSetPinVal(LED_u8ID_1,DIO_u8LOW);
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 746:	22 c0       	rjmp	.+68     	; 0x78c <Led_vidTurnOff+0xc4>
		break;
	case 2:
		Dio_vidSetPinVal(LED_u8ID_2,DIO_u8LOW);
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 750:	1d c0       	rjmp	.+58     	; 0x78c <Led_vidTurnOff+0xc4>
		break;
	case 3:
		Dio_vidSetPinVal(LED_u8ID_3,DIO_u8LOW);
 752:	8a e0       	ldi	r24, 0x0A	; 10
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 75a:	18 c0       	rjmp	.+48     	; 0x78c <Led_vidTurnOff+0xc4>
		break;
	case 4:
		Dio_vidSetPinVal(LED_u8ID_4,DIO_u8LOW);
 75c:	8b e0       	ldi	r24, 0x0B	; 11
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 764:	13 c0       	rjmp	.+38     	; 0x78c <Led_vidTurnOff+0xc4>
		break;
	case 5:
		Dio_vidSetPinVal(LED_u8ID_5,DIO_u8LOW);
 766:	84 e1       	ldi	r24, 0x14	; 20
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 76e:	0e c0       	rjmp	.+28     	; 0x78c <Led_vidTurnOff+0xc4>
		break;
	case 6:
		Dio_vidSetPinVal(LED_u8ID_6,DIO_u8LOW);
 770:	85 e1       	ldi	r24, 0x15	; 21
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 778:	09 c0       	rjmp	.+18     	; 0x78c <Led_vidTurnOff+0xc4>
		break;
	case 7:
		Dio_vidSetPinVal(LED_u8ID_7,DIO_u8LOW);
 77a:	8e e1       	ldi	r24, 0x1E	; 30
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 782:	04 c0       	rjmp	.+8      	; 0x78c <Led_vidTurnOff+0xc4>
		break;
	case 8:
		Dio_vidSetPinVal(LED_u8ID_8,DIO_u8LOW);
 784:	8f e1       	ldi	r24, 0x1F	; 31
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
		break;
	}
}
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	0f 90       	pop	r0
 792:	cf 91       	pop	r28
 794:	df 91       	pop	r29
 796:	08 95       	ret

00000798 <Uart_vidInit>:

#include"Uart_int.h"
#include"Uart_priv.h"
#include"Uart_cfg.h"

void Uart_vidInit(void){
 798:	df 93       	push	r29
 79a:	cf 93       	push	r28
 79c:	0f 92       	push	r0
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
	u8 Temp_u8UcsrcData;	//Temp variable to set UCSRC config


	SET_BIT(UCSRB,4); //RX enabled
 7a2:	aa e2       	ldi	r26, 0x2A	; 42
 7a4:	b0 e0       	ldi	r27, 0x00	; 0
 7a6:	ea e2       	ldi	r30, 0x2A	; 42
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	80 61       	ori	r24, 0x10	; 16
 7ae:	8c 93       	st	X, r24
	SET_BIT(UCSRB,3); //TX enabled
 7b0:	aa e2       	ldi	r26, 0x2A	; 42
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	ea e2       	ldi	r30, 0x2A	; 42
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	88 60       	ori	r24, 0x08	; 8
 7bc:	8c 93       	st	X, r24
	Temp_u8UcsrcData=0;
 7be:	19 82       	std	Y+1, r1	; 0x01
	CLR_BIT(UCSRB,2); //Character size: 8
 7c0:	aa e2       	ldi	r26, 0x2A	; 42
 7c2:	b0 e0       	ldi	r27, 0x00	; 0
 7c4:	ea e2       	ldi	r30, 0x2A	; 42
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	8b 7f       	andi	r24, 0xFB	; 251
 7cc:	8c 93       	st	X, r24

	SET_BIT(Temp_u8UcsrcData,2);//Character size: 8 in UCSRC
 7ce:	89 81       	ldd	r24, Y+1	; 0x01
 7d0:	84 60       	ori	r24, 0x04	; 4
 7d2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Temp_u8UcsrcData,1);//Character size: 8 in UCSRC
 7d4:	89 81       	ldd	r24, Y+1	; 0x01
 7d6:	82 60       	ori	r24, 0x02	; 2
 7d8:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(Temp_u8UcsrcData,6); //Asynchronous     in UCSRC
 7da:	89 81       	ldd	r24, Y+1	; 0x01
 7dc:	8f 7b       	andi	r24, 0xBF	; 191
 7de:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp_u8UcsrcData,5); //Parity Disabled  in UCSRC
 7e0:	89 81       	ldd	r24, Y+1	; 0x01
 7e2:	8f 7d       	andi	r24, 0xDF	; 223
 7e4:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp_u8UcsrcData,4); //Parity Disabled  in UCSRC
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	8f 7e       	andi	r24, 0xEF	; 239
 7ea:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp_u8UcsrcData,3); //1 stop bit       in UCSRC
 7ec:	89 81       	ldd	r24, Y+1	; 0x01
 7ee:	87 7f       	andi	r24, 0xF7	; 247
 7f0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Temp_u8UcsrcData,7); //7th bit set to 1 indicating we chose to use UCSRC using URSEL register select
 7f2:	89 81       	ldd	r24, Y+1	; 0x01
 7f4:	80 68       	ori	r24, 0x80	; 128
 7f6:	89 83       	std	Y+1, r24	; 0x01

	UCSRC=Temp_u8UcsrcData; //Writing UCSRC configuration
 7f8:	e0 e4       	ldi	r30, 0x40	; 64
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	80 83       	st	Z, r24

	UBRRH=0;	//Set BaudRate to 9600
 800:	e0 e4       	ldi	r30, 0x40	; 64
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	10 82       	st	Z, r1
	UBRRL=51;	//Set BaudRate to 9600
 806:	e9 e2       	ldi	r30, 0x29	; 41
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	83 e3       	ldi	r24, 0x33	; 51
 80c:	80 83       	st	Z, r24
}
 80e:	0f 90       	pop	r0
 810:	cf 91       	pop	r28
 812:	df 91       	pop	r29
 814:	08 95       	ret

00000816 <Uart_vidSendByte>:

void Uart_vidSendByte(u8 Byte){
 816:	df 93       	push	r29
 818:	cf 93       	push	r28
 81a:	0f 92       	push	r0
 81c:	cd b7       	in	r28, 0x3d	; 61
 81e:	de b7       	in	r29, 0x3e	; 62
 820:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(UCSRA,5)==0);	//Waiting for the UDRE flag
 822:	eb e2       	ldi	r30, 0x2B	; 43
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	82 95       	swap	r24
 82a:	86 95       	lsr	r24
 82c:	87 70       	andi	r24, 0x07	; 7
 82e:	88 2f       	mov	r24, r24
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	81 70       	andi	r24, 0x01	; 1
 834:	90 70       	andi	r25, 0x00	; 0
 836:	00 97       	sbiw	r24, 0x00	; 0
 838:	a1 f3       	breq	.-24     	; 0x822 <Uart_vidSendByte+0xc>
	UDR = Byte;		//Update UDR register with new data to send
 83a:	ec e2       	ldi	r30, 0x2C	; 44
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	89 81       	ldd	r24, Y+1	; 0x01
 840:	80 83       	st	Z, r24

}
 842:	0f 90       	pop	r0
 844:	cf 91       	pop	r28
 846:	df 91       	pop	r29
 848:	08 95       	ret

0000084a <Uart_u8ReceiveByte>:

u8 Uart_u8ReceiveByte(void){
 84a:	df 93       	push	r29
 84c:	cf 93       	push	r28
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62

	while(GET_BIT(UCSRA,7)==0); //Waiting for RX flag
 852:	eb e2       	ldi	r30, 0x2B	; 43
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	88 23       	and	r24, r24
 85a:	dc f7       	brge	.-10     	; 0x852 <Uart_u8ReceiveByte+0x8>
	return UDR;		//Read UDR Received Byte
 85c:	ec e2       	ldi	r30, 0x2C	; 44
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
}
 862:	cf 91       	pop	r28
 864:	df 91       	pop	r29
 866:	08 95       	ret

00000868 <main>:
#include<util/delay.h>
#include"Uart_int.h"
#include"Led_int.h"


int main(void){
 868:	df 93       	push	r29
 86a:	cf 93       	push	r28
 86c:	0f 92       	push	r0
 86e:	cd b7       	in	r28, 0x3d	; 61
 870:	de b7       	in	r29, 0x3e	; 62

	u8 ReceivedData;
	Uart_vidInit();
 872:	0e 94 cc 03 	call	0x798	; 0x798 <Uart_vidInit>

	Dio_vidSetPinDir(DIO_u8PIN_23,DIO_u8OUTPUT);
 876:	87 e1       	ldi	r24, 0x17	; 23
 878:	61 e0       	ldi	r22, 0x01	; 1
 87a:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
	Dio_vidSetPinDir(DIO_u8PIN_22,DIO_u8OUTPUT);
 87e:	86 e1       	ldi	r24, 0x16	; 22
 880:	61 e0       	ldi	r22, 0x01	; 1
 882:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
	while(1){
		ReceivedData=Uart_u8ReceiveByte();
 886:	0e 94 25 04 	call	0x84a	; 0x84a <Uart_u8ReceiveByte>
 88a:	89 83       	std	Y+1, r24	; 0x01
		if(ReceivedData=='r'){
 88c:	89 81       	ldd	r24, Y+1	; 0x01
 88e:	82 37       	cpi	r24, 0x72	; 114
 890:	49 f4       	brne	.+18     	; 0x8a4 <main+0x3c>

			Dio_vidSetPinVal(DIO_u8PIN_23,DIO_u8HIGH);
 892:	87 e1       	ldi	r24, 0x17	; 23
 894:	61 e0       	ldi	r22, 0x01	; 1
 896:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_22,DIO_u8LOW);
 89a:	86 e1       	ldi	r24, 0x16	; 22
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 8a2:	f1 cf       	rjmp	.-30     	; 0x886 <main+0x1e>

		}
		else if(ReceivedData=='g'){
 8a4:	89 81       	ldd	r24, Y+1	; 0x01
 8a6:	87 36       	cpi	r24, 0x67	; 103
 8a8:	71 f7       	brne	.-36     	; 0x886 <main+0x1e>
			Dio_vidSetPinVal(DIO_u8PIN_22,DIO_u8HIGH);
 8aa:	86 e1       	ldi	r24, 0x16	; 22
 8ac:	61 e0       	ldi	r22, 0x01	; 1
 8ae:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_23,DIO_u8LOW);
 8b2:	87 e1       	ldi	r24, 0x17	; 23
 8b4:	60 e0       	ldi	r22, 0x00	; 0
 8b6:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 8ba:	e5 cf       	rjmp	.-54     	; 0x886 <main+0x1e>

000008bc <_exit>:
 8bc:	f8 94       	cli

000008be <__stop_program>:
 8be:	ff cf       	rjmp	.-2      	; 0x8be <__stop_program>
