
Uart_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000cd8  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000968  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ac 03 	call	0x758	; 0x758 <main>
  64:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Dio_vidSetPinDir>:
#include"../Lib/Std_types.h"
#include"../Lib/Bit_math.h"
#include"../DIO_Driver/Dio_int.h"
#include<avr/io.h>

void Dio_vidSetPinDir(u8 Pin, u8 Dir){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <Dio_vidSetPinDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <Dio_vidSetPinDir+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <Dio_vidSetPinDir+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8b 83       	std	Y+3, r24	; 0x03
  7c:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
  7e:	8b 81       	ldd	r24, Y+3	; 0x03
  80:	86 95       	lsr	r24
  82:	86 95       	lsr	r24
  84:	86 95       	lsr	r24
  86:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	87 70       	andi	r24, 0x07	; 7
  8c:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	3e 83       	std	Y+6, r19	; 0x06
  96:	2d 83       	std	Y+5, r18	; 0x05
  98:	8d 81       	ldd	r24, Y+5	; 0x05
  9a:	9e 81       	ldd	r25, Y+6	; 0x06
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 05       	cpc	r25, r1
  a0:	09 f4       	brne	.+2      	; 0xa4 <Dio_vidSetPinDir+0x38>
  a2:	43 c0       	rjmp	.+134    	; 0x12a <Dio_vidSetPinDir+0xbe>
  a4:	2d 81       	ldd	r18, Y+5	; 0x05
  a6:	3e 81       	ldd	r19, Y+6	; 0x06
  a8:	22 30       	cpi	r18, 0x02	; 2
  aa:	31 05       	cpc	r19, r1
  ac:	2c f4       	brge	.+10     	; 0xb8 <Dio_vidSetPinDir+0x4c>
  ae:	8d 81       	ldd	r24, Y+5	; 0x05
  b0:	9e 81       	ldd	r25, Y+6	; 0x06
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	71 f0       	breq	.+28     	; 0xd2 <Dio_vidSetPinDir+0x66>
  b6:	bc c0       	rjmp	.+376    	; 0x230 <Dio_vidSetPinDir+0x1c4>
  b8:	2d 81       	ldd	r18, Y+5	; 0x05
  ba:	3e 81       	ldd	r19, Y+6	; 0x06
  bc:	22 30       	cpi	r18, 0x02	; 2
  be:	31 05       	cpc	r19, r1
  c0:	09 f4       	brne	.+2      	; 0xc4 <Dio_vidSetPinDir+0x58>
  c2:	5f c0       	rjmp	.+190    	; 0x182 <Dio_vidSetPinDir+0x116>
  c4:	8d 81       	ldd	r24, Y+5	; 0x05
  c6:	9e 81       	ldd	r25, Y+6	; 0x06
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	91 05       	cpc	r25, r1
  cc:	09 f4       	brne	.+2      	; 0xd0 <Dio_vidSetPinDir+0x64>
  ce:	85 c0       	rjmp	.+266    	; 0x1da <Dio_vidSetPinDir+0x16e>
  d0:	af c0       	rjmp	.+350    	; 0x230 <Dio_vidSetPinDir+0x1c4>
	case 0:
		if(Dir==1){
  d2:	8c 81       	ldd	r24, Y+4	; 0x04
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	a1 f4       	brne	.+40     	; 0x100 <Dio_vidSetPinDir+0x94>
			SET_BIT(DDRA,PinLoc);
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <Dio_vidSetPinDir+0x8a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <Dio_vidSetPinDir+0x86>
  fa:	84 2b       	or	r24, r20
  fc:	8c 93       	st	X, r24
  fe:	98 c0       	rjmp	.+304    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRA,PinLoc);
 100:	aa e3       	ldi	r26, 0x3A	; 58
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	ea e3       	ldi	r30, 0x3A	; 58
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	48 2f       	mov	r20, r24
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <Dio_vidSetPinDir+0xb2>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <Dio_vidSetPinDir+0xae>
 122:	80 95       	com	r24
 124:	84 23       	and	r24, r20
 126:	8c 93       	st	X, r24
 128:	83 c0       	rjmp	.+262    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 1:
		if(Dir==1){
 12a:	8c 81       	ldd	r24, Y+4	; 0x04
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	a1 f4       	brne	.+40     	; 0x158 <Dio_vidSetPinDir+0xec>
			SET_BIT(DDRB,PinLoc);
 130:	a7 e3       	ldi	r26, 0x37	; 55
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e7 e3       	ldi	r30, 0x37	; 55
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	48 2f       	mov	r20, r24
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 2e       	mov	r0, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <Dio_vidSetPinDir+0xe2>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <Dio_vidSetPinDir+0xde>
 152:	84 2b       	or	r24, r20
 154:	8c 93       	st	X, r24
 156:	6c c0       	rjmp	.+216    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRB,PinLoc);
 158:	a7 e3       	ldi	r26, 0x37	; 55
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e7 e3       	ldi	r30, 0x37	; 55
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	48 2f       	mov	r20, r24
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 2e       	mov	r0, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <Dio_vidSetPinDir+0x10a>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <Dio_vidSetPinDir+0x106>
 17a:	80 95       	com	r24
 17c:	84 23       	and	r24, r20
 17e:	8c 93       	st	X, r24
 180:	57 c0       	rjmp	.+174    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 2:
		if(Dir==1){
 182:	8c 81       	ldd	r24, Y+4	; 0x04
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	a1 f4       	brne	.+40     	; 0x1b0 <Dio_vidSetPinDir+0x144>
			SET_BIT(DDRC,PinLoc);
 188:	a4 e3       	ldi	r26, 0x34	; 52
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	e4 e3       	ldi	r30, 0x34	; 52
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	48 2f       	mov	r20, r24
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 2e       	mov	r0, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <Dio_vidSetPinDir+0x13a>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <Dio_vidSetPinDir+0x136>
 1aa:	84 2b       	or	r24, r20
 1ac:	8c 93       	st	X, r24
 1ae:	40 c0       	rjmp	.+128    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRC,PinLoc);
 1b0:	a4 e3       	ldi	r26, 0x34	; 52
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e4 e3       	ldi	r30, 0x34	; 52
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	48 2f       	mov	r20, r24
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	28 2f       	mov	r18, r24
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 2e       	mov	r0, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <Dio_vidSetPinDir+0x162>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <Dio_vidSetPinDir+0x15e>
 1d2:	80 95       	com	r24
 1d4:	84 23       	and	r24, r20
 1d6:	8c 93       	st	X, r24
 1d8:	2b c0       	rjmp	.+86     	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 3:
		if(Dir==1){
 1da:	8c 81       	ldd	r24, Y+4	; 0x04
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	a1 f4       	brne	.+40     	; 0x208 <Dio_vidSetPinDir+0x19c>
			SET_BIT(DDRD,PinLoc);
 1e0:	a1 e3       	ldi	r26, 0x31	; 49
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e1 e3       	ldi	r30, 0x31	; 49
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	48 2f       	mov	r20, r24
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 2e       	mov	r0, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <Dio_vidSetPinDir+0x192>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <Dio_vidSetPinDir+0x18e>
 202:	84 2b       	or	r24, r20
 204:	8c 93       	st	X, r24
 206:	14 c0       	rjmp	.+40     	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRD,PinLoc);
 208:	a1 e3       	ldi	r26, 0x31	; 49
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e1 e3       	ldi	r30, 0x31	; 49
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	48 2f       	mov	r20, r24
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 2e       	mov	r0, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <Dio_vidSetPinDir+0x1ba>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <Dio_vidSetPinDir+0x1b6>
 22a:	80 95       	com	r24
 22c:	84 23       	and	r24, r20
 22e:	8c 93       	st	X, r24
		}
		break;
	}
}
 230:	26 96       	adiw	r28, 0x06	; 6
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin, u8 Val){
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	00 d0       	rcall	.+0      	; 0x248 <Dio_vidSetPinVal+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <Dio_vidSetPinVal+0x8>
 24a:	00 d0       	rcall	.+0      	; 0x24c <Dio_vidSetPinVal+0xa>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	8b 83       	std	Y+3, r24	; 0x03
 252:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	86 95       	lsr	r24
 258:	86 95       	lsr	r24
 25a:	86 95       	lsr	r24
 25c:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	87 70       	andi	r24, 0x07	; 7
 262:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	3e 83       	std	Y+6, r19	; 0x06
 26c:	2d 83       	std	Y+5, r18	; 0x05
 26e:	8d 81       	ldd	r24, Y+5	; 0x05
 270:	9e 81       	ldd	r25, Y+6	; 0x06
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	91 05       	cpc	r25, r1
 276:	09 f4       	brne	.+2      	; 0x27a <Dio_vidSetPinVal+0x38>
 278:	43 c0       	rjmp	.+134    	; 0x300 <Dio_vidSetPinVal+0xbe>
 27a:	2d 81       	ldd	r18, Y+5	; 0x05
 27c:	3e 81       	ldd	r19, Y+6	; 0x06
 27e:	22 30       	cpi	r18, 0x02	; 2
 280:	31 05       	cpc	r19, r1
 282:	2c f4       	brge	.+10     	; 0x28e <Dio_vidSetPinVal+0x4c>
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	71 f0       	breq	.+28     	; 0x2a8 <Dio_vidSetPinVal+0x66>
 28c:	bc c0       	rjmp	.+376    	; 0x406 <Dio_vidSetPinVal+0x1c4>
 28e:	2d 81       	ldd	r18, Y+5	; 0x05
 290:	3e 81       	ldd	r19, Y+6	; 0x06
 292:	22 30       	cpi	r18, 0x02	; 2
 294:	31 05       	cpc	r19, r1
 296:	09 f4       	brne	.+2      	; 0x29a <Dio_vidSetPinVal+0x58>
 298:	5f c0       	rjmp	.+190    	; 0x358 <Dio_vidSetPinVal+0x116>
 29a:	8d 81       	ldd	r24, Y+5	; 0x05
 29c:	9e 81       	ldd	r25, Y+6	; 0x06
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	91 05       	cpc	r25, r1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <Dio_vidSetPinVal+0x64>
 2a4:	85 c0       	rjmp	.+266    	; 0x3b0 <Dio_vidSetPinVal+0x16e>
 2a6:	af c0       	rjmp	.+350    	; 0x406 <Dio_vidSetPinVal+0x1c4>
	case 0:
		if(Val==1){
 2a8:	8c 81       	ldd	r24, Y+4	; 0x04
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <Dio_vidSetPinVal+0x94>
			SET_BIT(PORTA,PinLoc);
 2ae:	ab e3       	ldi	r26, 0x3B	; 59
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	eb e3       	ldi	r30, 0x3B	; 59
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	48 2f       	mov	r20, r24
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 2e       	mov	r0, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <Dio_vidSetPinVal+0x8a>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <Dio_vidSetPinVal+0x86>
 2d0:	84 2b       	or	r24, r20
 2d2:	8c 93       	st	X, r24
 2d4:	98 c0       	rjmp	.+304    	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTA,PinLoc);
 2d6:	ab e3       	ldi	r26, 0x3B	; 59
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	eb e3       	ldi	r30, 0x3B	; 59
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <Dio_vidSetPinVal+0xb2>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <Dio_vidSetPinVal+0xae>
 2f8:	80 95       	com	r24
 2fa:	84 23       	and	r24, r20
 2fc:	8c 93       	st	X, r24
 2fe:	83 c0       	rjmp	.+262    	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 1:
		if(Val==1){
 300:	8c 81       	ldd	r24, Y+4	; 0x04
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	a1 f4       	brne	.+40     	; 0x32e <Dio_vidSetPinVal+0xec>
			SET_BIT(PORTB,PinLoc);
 306:	a8 e3       	ldi	r26, 0x38	; 56
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e8 e3       	ldi	r30, 0x38	; 56
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	48 2f       	mov	r20, r24
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	28 2f       	mov	r18, r24
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 2e       	mov	r0, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <Dio_vidSetPinVal+0xe2>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <Dio_vidSetPinVal+0xde>
 328:	84 2b       	or	r24, r20
 32a:	8c 93       	st	X, r24
 32c:	6c c0       	rjmp	.+216    	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTB,PinLoc);
 32e:	a8 e3       	ldi	r26, 0x38	; 56
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	e8 e3       	ldi	r30, 0x38	; 56
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	48 2f       	mov	r20, r24
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 2e       	mov	r0, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <Dio_vidSetPinVal+0x10a>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <Dio_vidSetPinVal+0x106>
 350:	80 95       	com	r24
 352:	84 23       	and	r24, r20
 354:	8c 93       	st	X, r24
 356:	57 c0       	rjmp	.+174    	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 2:
		if(Val==1){
 358:	8c 81       	ldd	r24, Y+4	; 0x04
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	a1 f4       	brne	.+40     	; 0x386 <Dio_vidSetPinVal+0x144>
			SET_BIT(PORTC,PinLoc);
 35e:	a5 e3       	ldi	r26, 0x35	; 53
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	e5 e3       	ldi	r30, 0x35	; 53
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	48 2f       	mov	r20, r24
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 2e       	mov	r0, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <Dio_vidSetPinVal+0x13a>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <Dio_vidSetPinVal+0x136>
 380:	84 2b       	or	r24, r20
 382:	8c 93       	st	X, r24
 384:	40 c0       	rjmp	.+128    	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTC,PinLoc);
 386:	a5 e3       	ldi	r26, 0x35	; 53
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	e5 e3       	ldi	r30, 0x35	; 53
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	48 2f       	mov	r20, r24
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 2e       	mov	r0, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Dio_vidSetPinVal+0x162>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <Dio_vidSetPinVal+0x15e>
 3a8:	80 95       	com	r24
 3aa:	84 23       	and	r24, r20
 3ac:	8c 93       	st	X, r24
 3ae:	2b c0       	rjmp	.+86     	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 3:
		if(Val==1){
 3b0:	8c 81       	ldd	r24, Y+4	; 0x04
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	a1 f4       	brne	.+40     	; 0x3de <Dio_vidSetPinVal+0x19c>
			SET_BIT(PORTD,PinLoc);
 3b6:	a2 e3       	ldi	r26, 0x32	; 50
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	e2 e3       	ldi	r30, 0x32	; 50
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	48 2f       	mov	r20, r24
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Dio_vidSetPinVal+0x192>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <Dio_vidSetPinVal+0x18e>
 3d8:	84 2b       	or	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	14 c0       	rjmp	.+40     	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTD,PinLoc);
 3de:	a2 e3       	ldi	r26, 0x32	; 50
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e2 e3       	ldi	r30, 0x32	; 50
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <Dio_vidSetPinVal+0x1ba>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <Dio_vidSetPinVal+0x1b6>
 400:	80 95       	com	r24
 402:	84 23       	and	r24, r20
 404:	8c 93       	st	X, r24
		}
		break;
	}
}
 406:	26 96       	adiw	r28, 0x06	; 6
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	cf 91       	pop	r28
 414:	df 91       	pop	r29
 416:	08 95       	ret

00000418 <Led_vidInit>:
#include"Dio_int.h"
#include"LED_cfg.h"
#include<avr/io.h>
#include "LED_int.h"

void Led_vidInit(u8 Led_id){
 418:	df 93       	push	r29
 41a:	cf 93       	push	r28
 41c:	00 d0       	rcall	.+0      	; 0x41e <Led_vidInit+0x6>
 41e:	0f 92       	push	r0
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	89 83       	std	Y+1, r24	; 0x01
	switch(Led_id){
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	3b 83       	std	Y+3, r19	; 0x03
 42e:	2a 83       	std	Y+2, r18	; 0x02
 430:	8a 81       	ldd	r24, Y+2	; 0x02
 432:	9b 81       	ldd	r25, Y+3	; 0x03
 434:	84 30       	cpi	r24, 0x04	; 4
 436:	91 05       	cpc	r25, r1
 438:	c9 f1       	breq	.+114    	; 0x4ac <Led_vidInit+0x94>
 43a:	2a 81       	ldd	r18, Y+2	; 0x02
 43c:	3b 81       	ldd	r19, Y+3	; 0x03
 43e:	25 30       	cpi	r18, 0x05	; 5
 440:	31 05       	cpc	r19, r1
 442:	84 f4       	brge	.+32     	; 0x464 <Led_vidInit+0x4c>
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	9b 81       	ldd	r25, Y+3	; 0x03
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	91 05       	cpc	r25, r1
 44c:	29 f1       	breq	.+74     	; 0x498 <Led_vidInit+0x80>
 44e:	2a 81       	ldd	r18, Y+2	; 0x02
 450:	3b 81       	ldd	r19, Y+3	; 0x03
 452:	23 30       	cpi	r18, 0x03	; 3
 454:	31 05       	cpc	r19, r1
 456:	2c f5       	brge	.+74     	; 0x4a2 <Led_vidInit+0x8a>
 458:	8a 81       	ldd	r24, Y+2	; 0x02
 45a:	9b 81       	ldd	r25, Y+3	; 0x03
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	91 05       	cpc	r25, r1
 460:	b1 f0       	breq	.+44     	; 0x48e <Led_vidInit+0x76>
 462:	3c c0       	rjmp	.+120    	; 0x4dc <Led_vidInit+0xc4>
 464:	2a 81       	ldd	r18, Y+2	; 0x02
 466:	3b 81       	ldd	r19, Y+3	; 0x03
 468:	26 30       	cpi	r18, 0x06	; 6
 46a:	31 05       	cpc	r19, r1
 46c:	49 f1       	breq	.+82     	; 0x4c0 <Led_vidInit+0xa8>
 46e:	8a 81       	ldd	r24, Y+2	; 0x02
 470:	9b 81       	ldd	r25, Y+3	; 0x03
 472:	86 30       	cpi	r24, 0x06	; 6
 474:	91 05       	cpc	r25, r1
 476:	fc f0       	brlt	.+62     	; 0x4b6 <Led_vidInit+0x9e>
 478:	2a 81       	ldd	r18, Y+2	; 0x02
 47a:	3b 81       	ldd	r19, Y+3	; 0x03
 47c:	27 30       	cpi	r18, 0x07	; 7
 47e:	31 05       	cpc	r19, r1
 480:	21 f1       	breq	.+72     	; 0x4ca <Led_vidInit+0xb2>
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	9b 81       	ldd	r25, Y+3	; 0x03
 486:	88 30       	cpi	r24, 0x08	; 8
 488:	91 05       	cpc	r25, r1
 48a:	21 f1       	breq	.+72     	; 0x4d4 <Led_vidInit+0xbc>
 48c:	27 c0       	rjmp	.+78     	; 0x4dc <Led_vidInit+0xc4>
	case 1:
		Dio_vidSetPinDir(LED_u8ID_1,DIO_u8HIGH);	//Setting 1st 2 pins
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 496:	22 c0       	rjmp	.+68     	; 0x4dc <Led_vidInit+0xc4>
		break;
	case 2:
		Dio_vidSetPinDir(LED_u8ID_2,DIO_u8HIGH);	//of PORTA to output
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 4a0:	1d c0       	rjmp	.+58     	; 0x4dc <Led_vidInit+0xc4>
		break;
	case 3:
		Dio_vidSetPinDir(LED_u8ID_3,DIO_u8HIGH);	//Setting 2nd 2 pins
 4a2:	8a e0       	ldi	r24, 0x0A	; 10
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 4aa:	18 c0       	rjmp	.+48     	; 0x4dc <Led_vidInit+0xc4>
		break;
	case 4:
		Dio_vidSetPinDir(LED_u8ID_4,DIO_u8HIGH);	//of PORTB to output
 4ac:	8b e0       	ldi	r24, 0x0B	; 11
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 4b4:	13 c0       	rjmp	.+38     	; 0x4dc <Led_vidInit+0xc4>
		break;
	case 5:
		Dio_vidSetPinDir(LED_u8ID_5,DIO_u8HIGH);	//Setting 3rd 2 pins
 4b6:	84 e1       	ldi	r24, 0x14	; 20
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 4be:	0e c0       	rjmp	.+28     	; 0x4dc <Led_vidInit+0xc4>
		break;
	case 6:
		Dio_vidSetPinDir(LED_u8ID_6,DIO_u8HIGH);	//of PORTC to output
 4c0:	85 e1       	ldi	r24, 0x15	; 21
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 4c8:	09 c0       	rjmp	.+18     	; 0x4dc <Led_vidInit+0xc4>
		break;
	case 7:
		Dio_vidSetPinDir(LED_u8ID_7,DIO_u8HIGH);	//Setting 4th 2 pins
 4ca:	8e e1       	ldi	r24, 0x1E	; 30
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <Led_vidInit+0xc4>
		break;
	case 8:
		Dio_vidSetPinDir(LED_u8ID_8,DIO_u8HIGH);	//of PORTD to output
 4d4:	8f e1       	ldi	r24, 0x1F	; 31
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
		break;
	}
}
 4dc:	0f 90       	pop	r0
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	cf 91       	pop	r28
 4e4:	df 91       	pop	r29
 4e6:	08 95       	ret

000004e8 <Led_vidTurnOn>:
void Led_vidTurnOn(u8 Led_id){
 4e8:	df 93       	push	r29
 4ea:	cf 93       	push	r28
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <Led_vidTurnOn+0x6>
 4ee:	0f 92       	push	r0
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	89 83       	std	Y+1, r24	; 0x01
	switch(Led_id){
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	3b 83       	std	Y+3, r19	; 0x03
 4fe:	2a 83       	std	Y+2, r18	; 0x02
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	9b 81       	ldd	r25, Y+3	; 0x03
 504:	84 30       	cpi	r24, 0x04	; 4
 506:	91 05       	cpc	r25, r1
 508:	c9 f1       	breq	.+114    	; 0x57c <Led_vidTurnOn+0x94>
 50a:	2a 81       	ldd	r18, Y+2	; 0x02
 50c:	3b 81       	ldd	r19, Y+3	; 0x03
 50e:	25 30       	cpi	r18, 0x05	; 5
 510:	31 05       	cpc	r19, r1
 512:	84 f4       	brge	.+32     	; 0x534 <Led_vidTurnOn+0x4c>
 514:	8a 81       	ldd	r24, Y+2	; 0x02
 516:	9b 81       	ldd	r25, Y+3	; 0x03
 518:	82 30       	cpi	r24, 0x02	; 2
 51a:	91 05       	cpc	r25, r1
 51c:	29 f1       	breq	.+74     	; 0x568 <Led_vidTurnOn+0x80>
 51e:	2a 81       	ldd	r18, Y+2	; 0x02
 520:	3b 81       	ldd	r19, Y+3	; 0x03
 522:	23 30       	cpi	r18, 0x03	; 3
 524:	31 05       	cpc	r19, r1
 526:	2c f5       	brge	.+74     	; 0x572 <Led_vidTurnOn+0x8a>
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	9b 81       	ldd	r25, Y+3	; 0x03
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	91 05       	cpc	r25, r1
 530:	b1 f0       	breq	.+44     	; 0x55e <Led_vidTurnOn+0x76>
 532:	3c c0       	rjmp	.+120    	; 0x5ac <Led_vidTurnOn+0xc4>
 534:	2a 81       	ldd	r18, Y+2	; 0x02
 536:	3b 81       	ldd	r19, Y+3	; 0x03
 538:	26 30       	cpi	r18, 0x06	; 6
 53a:	31 05       	cpc	r19, r1
 53c:	49 f1       	breq	.+82     	; 0x590 <Led_vidTurnOn+0xa8>
 53e:	8a 81       	ldd	r24, Y+2	; 0x02
 540:	9b 81       	ldd	r25, Y+3	; 0x03
 542:	86 30       	cpi	r24, 0x06	; 6
 544:	91 05       	cpc	r25, r1
 546:	fc f0       	brlt	.+62     	; 0x586 <Led_vidTurnOn+0x9e>
 548:	2a 81       	ldd	r18, Y+2	; 0x02
 54a:	3b 81       	ldd	r19, Y+3	; 0x03
 54c:	27 30       	cpi	r18, 0x07	; 7
 54e:	31 05       	cpc	r19, r1
 550:	21 f1       	breq	.+72     	; 0x59a <Led_vidTurnOn+0xb2>
 552:	8a 81       	ldd	r24, Y+2	; 0x02
 554:	9b 81       	ldd	r25, Y+3	; 0x03
 556:	88 30       	cpi	r24, 0x08	; 8
 558:	91 05       	cpc	r25, r1
 55a:	21 f1       	breq	.+72     	; 0x5a4 <Led_vidTurnOn+0xbc>
 55c:	27 c0       	rjmp	.+78     	; 0x5ac <Led_vidTurnOn+0xc4>
	case 1:
		Dio_vidSetPinVal(LED_u8ID_1,DIO_u8HIGH);
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	61 e0       	ldi	r22, 0x01	; 1
 562:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 566:	22 c0       	rjmp	.+68     	; 0x5ac <Led_vidTurnOn+0xc4>
		break;
	case 2:
		Dio_vidSetPinVal(LED_u8ID_2,DIO_u8HIGH);
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 570:	1d c0       	rjmp	.+58     	; 0x5ac <Led_vidTurnOn+0xc4>
		break;
	case 3:
		Dio_vidSetPinVal(LED_u8ID_3,DIO_u8HIGH);
 572:	8a e0       	ldi	r24, 0x0A	; 10
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 57a:	18 c0       	rjmp	.+48     	; 0x5ac <Led_vidTurnOn+0xc4>
		break;
	case 4:
		Dio_vidSetPinVal(LED_u8ID_4,DIO_u8HIGH);
 57c:	8b e0       	ldi	r24, 0x0B	; 11
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 584:	13 c0       	rjmp	.+38     	; 0x5ac <Led_vidTurnOn+0xc4>
		break;
	case 5:
		Dio_vidSetPinVal(LED_u8ID_5,DIO_u8HIGH);
 586:	84 e1       	ldi	r24, 0x14	; 20
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 58e:	0e c0       	rjmp	.+28     	; 0x5ac <Led_vidTurnOn+0xc4>
		break;
	case 6:
		Dio_vidSetPinVal(LED_u8ID_6,DIO_u8HIGH);
 590:	85 e1       	ldi	r24, 0x15	; 21
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 598:	09 c0       	rjmp	.+18     	; 0x5ac <Led_vidTurnOn+0xc4>
		break;
	case 7:
		Dio_vidSetPinVal(LED_u8ID_7,DIO_u8HIGH);
 59a:	8e e1       	ldi	r24, 0x1E	; 30
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <Led_vidTurnOn+0xc4>
		break;
	case 8:
		Dio_vidSetPinVal(LED_u8ID_8,DIO_u8HIGH);
 5a4:	8f e1       	ldi	r24, 0x1F	; 31
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
		break;
	}
}
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	cf 91       	pop	r28
 5b4:	df 91       	pop	r29
 5b6:	08 95       	ret

000005b8 <Led_vidTurnOff>:

void Led_vidTurnOff(u8 Led_id){
 5b8:	df 93       	push	r29
 5ba:	cf 93       	push	r28
 5bc:	00 d0       	rcall	.+0      	; 0x5be <Led_vidTurnOff+0x6>
 5be:	0f 92       	push	r0
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	89 83       	std	Y+1, r24	; 0x01
	switch(Led_id){
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	28 2f       	mov	r18, r24
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	3b 83       	std	Y+3, r19	; 0x03
 5ce:	2a 83       	std	Y+2, r18	; 0x02
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	9b 81       	ldd	r25, Y+3	; 0x03
 5d4:	84 30       	cpi	r24, 0x04	; 4
 5d6:	91 05       	cpc	r25, r1
 5d8:	c9 f1       	breq	.+114    	; 0x64c <Led_vidTurnOff+0x94>
 5da:	2a 81       	ldd	r18, Y+2	; 0x02
 5dc:	3b 81       	ldd	r19, Y+3	; 0x03
 5de:	25 30       	cpi	r18, 0x05	; 5
 5e0:	31 05       	cpc	r19, r1
 5e2:	84 f4       	brge	.+32     	; 0x604 <Led_vidTurnOff+0x4c>
 5e4:	8a 81       	ldd	r24, Y+2	; 0x02
 5e6:	9b 81       	ldd	r25, Y+3	; 0x03
 5e8:	82 30       	cpi	r24, 0x02	; 2
 5ea:	91 05       	cpc	r25, r1
 5ec:	29 f1       	breq	.+74     	; 0x638 <Led_vidTurnOff+0x80>
 5ee:	2a 81       	ldd	r18, Y+2	; 0x02
 5f0:	3b 81       	ldd	r19, Y+3	; 0x03
 5f2:	23 30       	cpi	r18, 0x03	; 3
 5f4:	31 05       	cpc	r19, r1
 5f6:	2c f5       	brge	.+74     	; 0x642 <Led_vidTurnOff+0x8a>
 5f8:	8a 81       	ldd	r24, Y+2	; 0x02
 5fa:	9b 81       	ldd	r25, Y+3	; 0x03
 5fc:	81 30       	cpi	r24, 0x01	; 1
 5fe:	91 05       	cpc	r25, r1
 600:	b1 f0       	breq	.+44     	; 0x62e <Led_vidTurnOff+0x76>
 602:	3c c0       	rjmp	.+120    	; 0x67c <Led_vidTurnOff+0xc4>
 604:	2a 81       	ldd	r18, Y+2	; 0x02
 606:	3b 81       	ldd	r19, Y+3	; 0x03
 608:	26 30       	cpi	r18, 0x06	; 6
 60a:	31 05       	cpc	r19, r1
 60c:	49 f1       	breq	.+82     	; 0x660 <Led_vidTurnOff+0xa8>
 60e:	8a 81       	ldd	r24, Y+2	; 0x02
 610:	9b 81       	ldd	r25, Y+3	; 0x03
 612:	86 30       	cpi	r24, 0x06	; 6
 614:	91 05       	cpc	r25, r1
 616:	fc f0       	brlt	.+62     	; 0x656 <Led_vidTurnOff+0x9e>
 618:	2a 81       	ldd	r18, Y+2	; 0x02
 61a:	3b 81       	ldd	r19, Y+3	; 0x03
 61c:	27 30       	cpi	r18, 0x07	; 7
 61e:	31 05       	cpc	r19, r1
 620:	21 f1       	breq	.+72     	; 0x66a <Led_vidTurnOff+0xb2>
 622:	8a 81       	ldd	r24, Y+2	; 0x02
 624:	9b 81       	ldd	r25, Y+3	; 0x03
 626:	88 30       	cpi	r24, 0x08	; 8
 628:	91 05       	cpc	r25, r1
 62a:	21 f1       	breq	.+72     	; 0x674 <Led_vidTurnOff+0xbc>
 62c:	27 c0       	rjmp	.+78     	; 0x67c <Led_vidTurnOff+0xc4>
	case 1:
		Dio_vidSetPinVal(LED_u8ID_1,DIO_u8LOW);
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 636:	22 c0       	rjmp	.+68     	; 0x67c <Led_vidTurnOff+0xc4>
		break;
	case 2:
		Dio_vidSetPinVal(LED_u8ID_2,DIO_u8LOW);
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 640:	1d c0       	rjmp	.+58     	; 0x67c <Led_vidTurnOff+0xc4>
		break;
	case 3:
		Dio_vidSetPinVal(LED_u8ID_3,DIO_u8LOW);
 642:	8a e0       	ldi	r24, 0x0A	; 10
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 64a:	18 c0       	rjmp	.+48     	; 0x67c <Led_vidTurnOff+0xc4>
		break;
	case 4:
		Dio_vidSetPinVal(LED_u8ID_4,DIO_u8LOW);
 64c:	8b e0       	ldi	r24, 0x0B	; 11
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 654:	13 c0       	rjmp	.+38     	; 0x67c <Led_vidTurnOff+0xc4>
		break;
	case 5:
		Dio_vidSetPinVal(LED_u8ID_5,DIO_u8LOW);
 656:	84 e1       	ldi	r24, 0x14	; 20
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 65e:	0e c0       	rjmp	.+28     	; 0x67c <Led_vidTurnOff+0xc4>
		break;
	case 6:
		Dio_vidSetPinVal(LED_u8ID_6,DIO_u8LOW);
 660:	85 e1       	ldi	r24, 0x15	; 21
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 668:	09 c0       	rjmp	.+18     	; 0x67c <Led_vidTurnOff+0xc4>
		break;
	case 7:
		Dio_vidSetPinVal(LED_u8ID_7,DIO_u8LOW);
 66a:	8e e1       	ldi	r24, 0x1E	; 30
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 672:	04 c0       	rjmp	.+8      	; 0x67c <Led_vidTurnOff+0xc4>
		break;
	case 8:
		Dio_vidSetPinVal(LED_u8ID_8,DIO_u8LOW);
 674:	8f e1       	ldi	r24, 0x1F	; 31
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
		break;
	}
}
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	cf 91       	pop	r28
 684:	df 91       	pop	r29
 686:	08 95       	ret

00000688 <Uart_vidInit>:

#include"Uart_int.h"
#include"Uart_priv.h"
#include"Uart_cfg.h"

void Uart_vidInit(void){
 688:	df 93       	push	r29
 68a:	cf 93       	push	r28
 68c:	0f 92       	push	r0
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
	u8 Temp_u8UcsrcData;	//Temp variable to set UCSRC config


	SET_BIT(UCSRB,4); //RX enabled
 692:	aa e2       	ldi	r26, 0x2A	; 42
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	ea e2       	ldi	r30, 0x2A	; 42
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	80 61       	ori	r24, 0x10	; 16
 69e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,3); //TX enabled
 6a0:	aa e2       	ldi	r26, 0x2A	; 42
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	ea e2       	ldi	r30, 0x2A	; 42
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	88 60       	ori	r24, 0x08	; 8
 6ac:	8c 93       	st	X, r24
	Temp_u8UcsrcData=0;
 6ae:	19 82       	std	Y+1, r1	; 0x01
	CLR_BIT(UCSRB,2); //Character size: 8
 6b0:	aa e2       	ldi	r26, 0x2A	; 42
 6b2:	b0 e0       	ldi	r27, 0x00	; 0
 6b4:	ea e2       	ldi	r30, 0x2A	; 42
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	8b 7f       	andi	r24, 0xFB	; 251
 6bc:	8c 93       	st	X, r24

	SET_BIT(Temp_u8UcsrcData,2);//Character size: 8 in UCSRC
 6be:	89 81       	ldd	r24, Y+1	; 0x01
 6c0:	84 60       	ori	r24, 0x04	; 4
 6c2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Temp_u8UcsrcData,1);//Character size: 8 in UCSRC
 6c4:	89 81       	ldd	r24, Y+1	; 0x01
 6c6:	82 60       	ori	r24, 0x02	; 2
 6c8:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(Temp_u8UcsrcData,6); //Asynchronous     in UCSRC
 6ca:	89 81       	ldd	r24, Y+1	; 0x01
 6cc:	8f 7b       	andi	r24, 0xBF	; 191
 6ce:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp_u8UcsrcData,5); //Parity Disabled  in UCSRC
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	8f 7d       	andi	r24, 0xDF	; 223
 6d4:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp_u8UcsrcData,4); //Parity Disabled  in UCSRC
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	8f 7e       	andi	r24, 0xEF	; 239
 6da:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp_u8UcsrcData,3); //1 stop bit       in UCSRC
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	87 7f       	andi	r24, 0xF7	; 247
 6e0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Temp_u8UcsrcData,7); //7th bit set to 1 indicating we chose to use UCSRC using URSEL register select
 6e2:	89 81       	ldd	r24, Y+1	; 0x01
 6e4:	80 68       	ori	r24, 0x80	; 128
 6e6:	89 83       	std	Y+1, r24	; 0x01

	UCSRC=Temp_u8UcsrcData; //Writing UCSRC configuration
 6e8:	e0 e4       	ldi	r30, 0x40	; 64
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	89 81       	ldd	r24, Y+1	; 0x01
 6ee:	80 83       	st	Z, r24

	UBRRH=0;	//Set BaudRate to 9600
 6f0:	e0 e4       	ldi	r30, 0x40	; 64
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	10 82       	st	Z, r1
	UBRRL=51;	//Set BaudRate to 9600
 6f6:	e9 e2       	ldi	r30, 0x29	; 41
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	83 e3       	ldi	r24, 0x33	; 51
 6fc:	80 83       	st	Z, r24
}
 6fe:	0f 90       	pop	r0
 700:	cf 91       	pop	r28
 702:	df 91       	pop	r29
 704:	08 95       	ret

00000706 <Uart_vidSendByte>:

void Uart_vidSendByte(u8 Byte){
 706:	df 93       	push	r29
 708:	cf 93       	push	r28
 70a:	0f 92       	push	r0
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62
 710:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(UCSRA,5)==0);	//Waiting for the UDRE flag
 712:	eb e2       	ldi	r30, 0x2B	; 43
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	82 95       	swap	r24
 71a:	86 95       	lsr	r24
 71c:	87 70       	andi	r24, 0x07	; 7
 71e:	88 2f       	mov	r24, r24
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	81 70       	andi	r24, 0x01	; 1
 724:	90 70       	andi	r25, 0x00	; 0
 726:	00 97       	sbiw	r24, 0x00	; 0
 728:	a1 f3       	breq	.-24     	; 0x712 <Uart_vidSendByte+0xc>
	UDR = Byte;		//Update UDR register with new data to send
 72a:	ec e2       	ldi	r30, 0x2C	; 44
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	80 83       	st	Z, r24

}
 732:	0f 90       	pop	r0
 734:	cf 91       	pop	r28
 736:	df 91       	pop	r29
 738:	08 95       	ret

0000073a <Uart_u8ReceiveByte>:

u8 Uart_u8ReceiveByte(void){
 73a:	df 93       	push	r29
 73c:	cf 93       	push	r28
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62

	while(GET_BIT(UCSRA,7)==0); //Waiting for RX flag
 742:	eb e2       	ldi	r30, 0x2B	; 43
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	88 23       	and	r24, r24
 74a:	dc f7       	brge	.-10     	; 0x742 <Uart_u8ReceiveByte+0x8>
	return UDR;		//Read UDR Received Byte
 74c:	ec e2       	ldi	r30, 0x2C	; 44
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
}
 752:	cf 91       	pop	r28
 754:	df 91       	pop	r29
 756:	08 95       	ret

00000758 <main>:
#include"../Lib/Bit_math.h"
#include"Uart_priv.h"
#include"Uart_int.h"
#include"Uart_cfg.h"
#include"Led_int.h"
int main(void){
 758:	df 93       	push	r29
 75a:	cf 93       	push	r28
 75c:	0f 92       	push	r0
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62

	u8 App_u8ReceivedData; //Variable to receive data using UART

	Uart_vidInit();		//Initialize Uart
 762:	0e 94 44 03 	call	0x688	; 0x688 <Uart_vidInit>
	Led_vidInit(Led_1);	//Initialize Led_1
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	0e 94 0c 02 	call	0x418	; 0x418 <Led_vidInit>
	while(1){

		App_u8ReceivedData= Uart_u8ReceiveByte();	//Receive data from UART
 76c:	0e 94 9d 03 	call	0x73a	; 0x73a <Uart_u8ReceiveByte>
 770:	89 83       	std	Y+1, r24	; 0x01
		if(App_u8ReceivedData=='a'){	//Check if received data is'a'
 772:	89 81       	ldd	r24, Y+1	; 0x01
 774:	81 36       	cpi	r24, 0x61	; 97
 776:	81 f4       	brne	.+32     	; 0x798 <main+0x40>
			//Turn on Led_1 and send On using UART
			Led_vidTurnOn(Led_1);
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Led_vidTurnOn>
			Uart_vidSendByte('O');
 77e:	8f e4       	ldi	r24, 0x4F	; 79
 780:	0e 94 83 03 	call	0x706	; 0x706 <Uart_vidSendByte>
			Uart_vidSendByte('n');
 784:	8e e6       	ldi	r24, 0x6E	; 110
 786:	0e 94 83 03 	call	0x706	; 0x706 <Uart_vidSendByte>
			Uart_vidSendByte('\r');
 78a:	8d e0       	ldi	r24, 0x0D	; 13
 78c:	0e 94 83 03 	call	0x706	; 0x706 <Uart_vidSendByte>
			Uart_vidSendByte('\n');
 790:	8a e0       	ldi	r24, 0x0A	; 10
 792:	0e 94 83 03 	call	0x706	; 0x706 <Uart_vidSendByte>
 796:	ea cf       	rjmp	.-44     	; 0x76c <main+0x14>
		}
		else if(App_u8ReceivedData=='s'){	//Check if received data is's'
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	83 37       	cpi	r24, 0x73	; 115
 79c:	39 f7       	brne	.-50     	; 0x76c <main+0x14>
			//Turn off Led_1 and send Off using UART
			Led_vidTurnOff(Led_1);
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Led_vidTurnOff>
			Uart_vidSendByte('O');
 7a4:	8f e4       	ldi	r24, 0x4F	; 79
 7a6:	0e 94 83 03 	call	0x706	; 0x706 <Uart_vidSendByte>
			Uart_vidSendByte('f');
 7aa:	86 e6       	ldi	r24, 0x66	; 102
 7ac:	0e 94 83 03 	call	0x706	; 0x706 <Uart_vidSendByte>
			Uart_vidSendByte('f');
 7b0:	86 e6       	ldi	r24, 0x66	; 102
 7b2:	0e 94 83 03 	call	0x706	; 0x706 <Uart_vidSendByte>
			Uart_vidSendByte('\r');
 7b6:	8d e0       	ldi	r24, 0x0D	; 13
 7b8:	0e 94 83 03 	call	0x706	; 0x706 <Uart_vidSendByte>
			Uart_vidSendByte('\n');
 7bc:	8a e0       	ldi	r24, 0x0A	; 10
 7be:	0e 94 83 03 	call	0x706	; 0x706 <Uart_vidSendByte>
 7c2:	d4 cf       	rjmp	.-88     	; 0x76c <main+0x14>

000007c4 <_exit>:
 7c4:	f8 94       	cli

000007c6 <__stop_program>:
 7c6:	ff cf       	rjmp	.-2      	; 0x7c6 <__stop_program>
