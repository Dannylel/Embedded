
Keyboard_Attempt1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ca4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001ca4  00001d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800074  00800074  00001d4c  2**0
                  ALLOC
  3 .stab         00001974  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b71  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004231  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000044e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000612a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007015  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000081b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000897f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <main>
      8a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Dio_vidSetPinDir>:
#include"../Lib/Std_types.h"
#include"../Lib/Bit_math.h"
#include"../DIO_Driver/Dio_int.h"
#include<avr/io.h>

void Dio_vidSetPinDir(u8 Pin, u8 Dir){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Dio_vidSetPinDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Dio_vidSetPinDir+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <Dio_vidSetPinDir+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	86 95       	lsr	r24
     b5c:	86 95       	lsr	r24
     b5e:	86 95       	lsr	r24
     b60:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	87 70       	andi	r24, 0x07	; 7
     b66:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3e 83       	std	Y+6, r19	; 0x06
     b70:	2d 83       	std	Y+5, r18	; 0x05
     b72:	8d 81       	ldd	r24, Y+5	; 0x05
     b74:	9e 81       	ldd	r25, Y+6	; 0x06
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <Dio_vidSetPinDir+0x38>
     b7c:	43 c0       	rjmp	.+134    	; 0xc04 <Dio_vidSetPinDir+0xbe>
     b7e:	2d 81       	ldd	r18, Y+5	; 0x05
     b80:	3e 81       	ldd	r19, Y+6	; 0x06
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	2c f4       	brge	.+10     	; 0xb92 <Dio_vidSetPinDir+0x4c>
     b88:	8d 81       	ldd	r24, Y+5	; 0x05
     b8a:	9e 81       	ldd	r25, Y+6	; 0x06
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	71 f0       	breq	.+28     	; 0xbac <Dio_vidSetPinDir+0x66>
     b90:	bc c0       	rjmp	.+376    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
     b92:	2d 81       	ldd	r18, Y+5	; 0x05
     b94:	3e 81       	ldd	r19, Y+6	; 0x06
     b96:	22 30       	cpi	r18, 0x02	; 2
     b98:	31 05       	cpc	r19, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <Dio_vidSetPinDir+0x58>
     b9c:	5f c0       	rjmp	.+190    	; 0xc5c <Dio_vidSetPinDir+0x116>
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <Dio_vidSetPinDir+0x64>
     ba8:	85 c0       	rjmp	.+266    	; 0xcb4 <Dio_vidSetPinDir+0x16e>
     baa:	af c0       	rjmp	.+350    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
	case 0:
		if(Dir==1){
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	a1 f4       	brne	.+40     	; 0xbda <Dio_vidSetPinDir+0x94>
			SET_BIT(DDRA,PinLoc);
     bb2:	aa e3       	ldi	r26, 0x3A	; 58
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ea e3       	ldi	r30, 0x3A	; 58
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <Dio_vidSetPinDir+0x8a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <Dio_vidSetPinDir+0x86>
     bd4:	84 2b       	or	r24, r20
     bd6:	8c 93       	st	X, r24
     bd8:	98 c0       	rjmp	.+304    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRA,PinLoc);
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <Dio_vidSetPinDir+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <Dio_vidSetPinDir+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	83 c0       	rjmp	.+262    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 1:
		if(Dir==1){
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	a1 f4       	brne	.+40     	; 0xc32 <Dio_vidSetPinDir+0xec>
			SET_BIT(DDRB,PinLoc);
     c0a:	a7 e3       	ldi	r26, 0x37	; 55
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e7 e3       	ldi	r30, 0x37	; 55
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <Dio_vidSetPinDir+0xe2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <Dio_vidSetPinDir+0xde>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	6c c0       	rjmp	.+216    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRB,PinLoc);
     c32:	a7 e3       	ldi	r26, 0x37	; 55
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e7 e3       	ldi	r30, 0x37	; 55
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <Dio_vidSetPinDir+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <Dio_vidSetPinDir+0x106>
     c54:	80 95       	com	r24
     c56:	84 23       	and	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	57 c0       	rjmp	.+174    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 2:
		if(Dir==1){
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	a1 f4       	brne	.+40     	; 0xc8a <Dio_vidSetPinDir+0x144>
			SET_BIT(DDRC,PinLoc);
     c62:	a4 e3       	ldi	r26, 0x34	; 52
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e4 e3       	ldi	r30, 0x34	; 52
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <Dio_vidSetPinDir+0x13a>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <Dio_vidSetPinDir+0x136>
     c84:	84 2b       	or	r24, r20
     c86:	8c 93       	st	X, r24
     c88:	40 c0       	rjmp	.+128    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRC,PinLoc);
     c8a:	a4 e3       	ldi	r26, 0x34	; 52
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e4 e3       	ldi	r30, 0x34	; 52
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <Dio_vidSetPinDir+0x162>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <Dio_vidSetPinDir+0x15e>
     cac:	80 95       	com	r24
     cae:	84 23       	and	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	2b c0       	rjmp	.+86     	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 3:
		if(Dir==1){
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	a1 f4       	brne	.+40     	; 0xce2 <Dio_vidSetPinDir+0x19c>
			SET_BIT(DDRD,PinLoc);
     cba:	a1 e3       	ldi	r26, 0x31	; 49
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <Dio_vidSetPinDir+0x192>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <Dio_vidSetPinDir+0x18e>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	14 c0       	rjmp	.+40     	; 0xd0a <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRD,PinLoc);
     ce2:	a1 e3       	ldi	r26, 0x31	; 49
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e1 e3       	ldi	r30, 0x31	; 49
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <Dio_vidSetPinDir+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <Dio_vidSetPinDir+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
		}
		break;
	}
}
     d0a:	26 96       	adiw	r28, 0x06	; 6
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin, u8 Val){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <Dio_vidSetPinVal+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <Dio_vidSetPinVal+0x8>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <Dio_vidSetPinVal+0xa>
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	8b 83       	std	Y+3, r24	; 0x03
     d2c:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	86 95       	lsr	r24
     d32:	86 95       	lsr	r24
     d34:	86 95       	lsr	r24
     d36:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	87 70       	andi	r24, 0x07	; 7
     d3c:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	3e 83       	std	Y+6, r19	; 0x06
     d46:	2d 83       	std	Y+5, r18	; 0x05
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <Dio_vidSetPinVal+0x38>
     d52:	43 c0       	rjmp	.+134    	; 0xdda <Dio_vidSetPinVal+0xbe>
     d54:	2d 81       	ldd	r18, Y+5	; 0x05
     d56:	3e 81       	ldd	r19, Y+6	; 0x06
     d58:	22 30       	cpi	r18, 0x02	; 2
     d5a:	31 05       	cpc	r19, r1
     d5c:	2c f4       	brge	.+10     	; 0xd68 <Dio_vidSetPinVal+0x4c>
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	71 f0       	breq	.+28     	; 0xd82 <Dio_vidSetPinVal+0x66>
     d66:	bc c0       	rjmp	.+376    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
     d68:	2d 81       	ldd	r18, Y+5	; 0x05
     d6a:	3e 81       	ldd	r19, Y+6	; 0x06
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <Dio_vidSetPinVal+0x58>
     d72:	5f c0       	rjmp	.+190    	; 0xe32 <Dio_vidSetPinVal+0x116>
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <Dio_vidSetPinVal+0x64>
     d7e:	85 c0       	rjmp	.+266    	; 0xe8a <Dio_vidSetPinVal+0x16e>
     d80:	af c0       	rjmp	.+350    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
	case 0:
		if(Val==1){
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	a1 f4       	brne	.+40     	; 0xdb0 <Dio_vidSetPinVal+0x94>
			SET_BIT(PORTA,PinLoc);
     d88:	ab e3       	ldi	r26, 0x3B	; 59
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	eb e3       	ldi	r30, 0x3B	; 59
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <Dio_vidSetPinVal+0x8a>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <Dio_vidSetPinVal+0x86>
     daa:	84 2b       	or	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	98 c0       	rjmp	.+304    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTA,PinLoc);
     db0:	ab e3       	ldi	r26, 0x3B	; 59
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	eb e3       	ldi	r30, 0x3B	; 59
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <Dio_vidSetPinVal+0xb2>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <Dio_vidSetPinVal+0xae>
     dd2:	80 95       	com	r24
     dd4:	84 23       	and	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	83 c0       	rjmp	.+262    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 1:
		if(Val==1){
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	a1 f4       	brne	.+40     	; 0xe08 <Dio_vidSetPinVal+0xec>
			SET_BIT(PORTB,PinLoc);
     de0:	a8 e3       	ldi	r26, 0x38	; 56
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 e3       	ldi	r30, 0x38	; 56
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <Dio_vidSetPinVal+0xe2>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <Dio_vidSetPinVal+0xde>
     e02:	84 2b       	or	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	6c c0       	rjmp	.+216    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTB,PinLoc);
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <Dio_vidSetPinVal+0x10a>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <Dio_vidSetPinVal+0x106>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	57 c0       	rjmp	.+174    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 2:
		if(Val==1){
     e32:	8c 81       	ldd	r24, Y+4	; 0x04
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	a1 f4       	brne	.+40     	; 0xe60 <Dio_vidSetPinVal+0x144>
			SET_BIT(PORTC,PinLoc);
     e38:	a5 e3       	ldi	r26, 0x35	; 53
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e3       	ldi	r30, 0x35	; 53
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <Dio_vidSetPinVal+0x13a>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <Dio_vidSetPinVal+0x136>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	40 c0       	rjmp	.+128    	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTC,PinLoc);
     e60:	a5 e3       	ldi	r26, 0x35	; 53
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e3       	ldi	r30, 0x35	; 53
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <Dio_vidSetPinVal+0x162>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <Dio_vidSetPinVal+0x15e>
     e82:	80 95       	com	r24
     e84:	84 23       	and	r24, r20
     e86:	8c 93       	st	X, r24
     e88:	2b c0       	rjmp	.+86     	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 3:
		if(Val==1){
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	a1 f4       	brne	.+40     	; 0xeb8 <Dio_vidSetPinVal+0x19c>
			SET_BIT(PORTD,PinLoc);
     e90:	a2 e3       	ldi	r26, 0x32	; 50
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e2 e3       	ldi	r30, 0x32	; 50
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <Dio_vidSetPinVal+0x192>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <Dio_vidSetPinVal+0x18e>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTD,PinLoc);
     eb8:	a2 e3       	ldi	r26, 0x32	; 50
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e3       	ldi	r30, 0x32	; 50
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <Dio_vidSetPinVal+0x1ba>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <Dio_vidSetPinVal+0x1b6>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
		}
		break;
	}
}
     ee0:	26 96       	adiw	r28, 0x06	; 6
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <Keyboard_vidInit>:
#include"Uart_int.h"
#include"Uart_priv.h"
#include"Lcd_int.h"
#include"Lcd_cfg.h"

void Keyboard_vidInit(void){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	Lcd_vidInit();
     efa:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Lcd_vidInit>

	//Lcd_vidSendCommand(0x80);
	Uart_vidInit();
     efe:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Uart_vidInit>
}
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <Keyboard_vidReceivedKey>:

void Keyboard_vidReceivedKey(void){
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	a7 97       	sbiw	r28, 0x27	; 39
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
			CursorPosition[i][j]++;
		}
	}
	************************************************/
	//Getting data from UART
	Keyboard_u8ReceivedKey = Uart_u8ReceiveByte();
     f1c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <Uart_u8ReceiveByte>
     f20:	89 83       	std	Y+1, r24	; 0x01


	//Checking if Data sent is Normal Characters
	if((Keyboard_u8ReceivedKey!=Keyboard_u8Esc)&&(EscFlag==Keyboard_u8FlagCleared)&&(Keyboard_u8ReceivedKey!=Keyboard_u8Enter)&&(Keyboard_u8ReceivedKey!=Keyboard_u8Space)&&(Keyboard_u8ReceivedKey!=Keyboard_u8Backspace)){
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	8b 31       	cpi	r24, 0x1B	; 27
     f26:	09 f4       	brne	.+2      	; 0xf2a <Keyboard_vidReceivedKey+0x22>
     f28:	66 c0       	rjmp	.+204    	; 0xff6 <Keyboard_vidReceivedKey+0xee>
     f2a:	80 91 74 00 	lds	r24, 0x0074
     f2e:	88 23       	and	r24, r24
     f30:	09 f0       	breq	.+2      	; 0xf34 <Keyboard_vidReceivedKey+0x2c>
     f32:	61 c0       	rjmp	.+194    	; 0xff6 <Keyboard_vidReceivedKey+0xee>
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	8d 30       	cpi	r24, 0x0D	; 13
     f38:	09 f4       	brne	.+2      	; 0xf3c <Keyboard_vidReceivedKey+0x34>
     f3a:	5d c0       	rjmp	.+186    	; 0xff6 <Keyboard_vidReceivedKey+0xee>
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 32       	cpi	r24, 0x20	; 32
     f40:	09 f4       	brne	.+2      	; 0xf44 <Keyboard_vidReceivedKey+0x3c>
     f42:	59 c0       	rjmp	.+178    	; 0xff6 <Keyboard_vidReceivedKey+0xee>
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	8f 37       	cpi	r24, 0x7F	; 127
     f48:	09 f4       	brne	.+2      	; 0xf4c <Keyboard_vidReceivedKey+0x44>
     f4a:	55 c0       	rjmp	.+170    	; 0xff6 <Keyboard_vidReceivedKey+0xee>
		if(Cursor<=0x8F){
     f4c:	80 91 76 00 	lds	r24, 0x0076
     f50:	80 39       	cpi	r24, 0x90	; 144
     f52:	e0 f4       	brcc	.+56     	; 0xf8c <Keyboard_vidReceivedKey+0x84>
			if(Cursor==0x8F){
     f54:	80 91 76 00 	lds	r24, 0x0076
     f58:	8f 38       	cpi	r24, 0x8F	; 143
     f5a:	59 f4       	brne	.+22     	; 0xf72 <Keyboard_vidReceivedKey+0x6a>
				Lcd_vidSendCommand(Cursor);
     f5c:	80 91 76 00 	lds	r24, 0x0076
     f60:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
				Lcd_vidWriteChar(Keyboard_u8ReceivedKey);
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
				Cursor=0xC0;
     f6a:	80 ec       	ldi	r24, 0xC0	; 192
     f6c:	80 93 76 00 	sts	0x0076, r24
     f70:	38 c0       	rjmp	.+112    	; 0xfe2 <Keyboard_vidReceivedKey+0xda>
			}
			else{
				Lcd_vidSendCommand(Cursor);
     f72:	80 91 76 00 	lds	r24, 0x0076
     f76:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
				Lcd_vidWriteChar(Keyboard_u8ReceivedKey);
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
				Cursor++;
     f80:	80 91 76 00 	lds	r24, 0x0076
     f84:	8f 5f       	subi	r24, 0xFF	; 255
     f86:	80 93 76 00 	sts	0x0076, r24
     f8a:	2b c0       	rjmp	.+86     	; 0xfe2 <Keyboard_vidReceivedKey+0xda>
			}
		}
		else if((Cursor>0x8F)&&(Cursor<0xC0)){
     f8c:	80 91 76 00 	lds	r24, 0x0076
     f90:	80 39       	cpi	r24, 0x90	; 144
     f92:	40 f0       	brcs	.+16     	; 0xfa4 <Keyboard_vidReceivedKey+0x9c>
     f94:	80 91 76 00 	lds	r24, 0x0076
     f98:	80 3c       	cpi	r24, 0xC0	; 192
     f9a:	20 f4       	brcc	.+8      	; 0xfa4 <Keyboard_vidReceivedKey+0x9c>
			Cursor=0x8F;
     f9c:	8f e8       	ldi	r24, 0x8F	; 143
     f9e:	80 93 76 00 	sts	0x0076, r24
     fa2:	1f c0       	rjmp	.+62     	; 0xfe2 <Keyboard_vidReceivedKey+0xda>
		}
		else if(Cursor<=0xCF){
     fa4:	80 91 76 00 	lds	r24, 0x0076
     fa8:	80 3d       	cpi	r24, 0xD0	; 208
     faa:	d8 f4       	brcc	.+54     	; 0xfe2 <Keyboard_vidReceivedKey+0xda>
			if(Cursor==0xCF){
     fac:	80 91 76 00 	lds	r24, 0x0076
     fb0:	8f 3c       	cpi	r24, 0xCF	; 207
     fb2:	59 f4       	brne	.+22     	; 0xfca <Keyboard_vidReceivedKey+0xc2>
				Lcd_vidSendCommand(Cursor);
     fb4:	80 91 76 00 	lds	r24, 0x0076
     fb8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
				Lcd_vidWriteChar(Keyboard_u8ReceivedKey);
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
				Cursor=0xCF;
     fc2:	8f ec       	ldi	r24, 0xCF	; 207
     fc4:	80 93 76 00 	sts	0x0076, r24
     fc8:	0c c0       	rjmp	.+24     	; 0xfe2 <Keyboard_vidReceivedKey+0xda>
			}
			else {
				Lcd_vidSendCommand(Cursor);
     fca:	80 91 76 00 	lds	r24, 0x0076
     fce:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
				Lcd_vidWriteChar(Keyboard_u8ReceivedKey);
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
				Cursor++;
     fd8:	80 91 76 00 	lds	r24, 0x0076
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	80 93 76 00 	sts	0x0076, r24
			}
		}
		//Returning Name of Pressed Key via UART as a method of testing
		Uart_vidSendByte(Keyboard_u8ReceivedKey);
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
		Uart_vidSendByte(Keyboard_u8Carriage_Return);
     fe8:	8d e0       	ldi	r24, 0x0D	; 13
     fea:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
		Uart_vidSendByte(Keyboard_u8Newline);
     fee:	8a e0       	ldi	r24, 0x0A	; 10
     ff0:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
     ff4:	18 c1       	rjmp	.+560    	; 0x1226 <Keyboard_vidReceivedKey+0x31e>



	}

	else if(Keyboard_u8ReceivedKey==Keyboard_u8Esc){
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	8b 31       	cpi	r24, 0x1B	; 27
     ffa:	21 f4       	brne	.+8      	; 0x1004 <Keyboard_vidReceivedKey+0xfc>
		//Setting Esc Flag indicating the possibility of Esc key, arrow key or delete key being pressed
		EscFlag=Keyboard_u8FlagSet;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	80 93 74 00 	sts	0x0074, r24
    1002:	11 c1       	rjmp	.+546    	; 0x1226 <Keyboard_vidReceivedKey+0x31e>
	}
	else {
		switch(Keyboard_u8ReceivedKey){
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3f a3       	std	Y+39, r19	; 0x27
    100c:	2e a3       	std	Y+38, r18	; 0x26
    100e:	8e a1       	ldd	r24, Y+38	; 0x26
    1010:	9f a1       	ldd	r25, Y+39	; 0x27
    1012:	80 32       	cpi	r24, 0x20	; 32
    1014:	91 05       	cpc	r25, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <Keyboard_vidReceivedKey+0x112>
    1018:	b2 c0       	rjmp	.+356    	; 0x117e <Keyboard_vidReceivedKey+0x276>
    101a:	2e a1       	ldd	r18, Y+38	; 0x26
    101c:	3f a1       	ldd	r19, Y+39	; 0x27
    101e:	2f 37       	cpi	r18, 0x7F	; 127
    1020:	31 05       	cpc	r19, r1
    1022:	99 f1       	breq	.+102    	; 0x108a <Keyboard_vidReceivedKey+0x182>
    1024:	8e a1       	ldd	r24, Y+38	; 0x26
    1026:	9f a1       	ldd	r25, Y+39	; 0x27
    1028:	8d 30       	cpi	r24, 0x0D	; 13
    102a:	91 05       	cpc	r25, r1
    102c:	09 f0       	breq	.+2      	; 0x1030 <Keyboard_vidReceivedKey+0x128>
    102e:	fb c0       	rjmp	.+502    	; 0x1226 <Keyboard_vidReceivedKey+0x31e>
		case Keyboard_u8Enter: //Enter
			//if cursor is on second line, jump to first space in second line. if on second line do nothing
			if(Cursor<=0x8F){
    1030:	80 91 76 00 	lds	r24, 0x0076
    1034:	80 39       	cpi	r24, 0x90	; 144
    1036:	40 f4       	brcc	.+16     	; 0x1048 <Keyboard_vidReceivedKey+0x140>
				Cursor=0xC0;
    1038:	80 ec       	ldi	r24, 0xC0	; 192
    103a:	80 93 76 00 	sts	0x0076, r24
				Lcd_vidSendCommand(Cursor);
    103e:	80 91 76 00 	lds	r24, 0x0076
    1042:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
    1046:	0b c0       	rjmp	.+22     	; 0x105e <Keyboard_vidReceivedKey+0x156>
			}
			else if(Cursor<=0xCF){
    1048:	80 91 76 00 	lds	r24, 0x0076
    104c:	80 3d       	cpi	r24, 0xD0	; 208
    104e:	38 f4       	brcc	.+14     	; 0x105e <Keyboard_vidReceivedKey+0x156>
				Cursor=0x80;
    1050:	80 e8       	ldi	r24, 0x80	; 128
    1052:	80 93 76 00 	sts	0x0076, r24
				Lcd_vidSendCommand(Cursor);
    1056:	80 91 76 00 	lds	r24, 0x0076
    105a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
			}
			Uart_vidSendByte('E');
    105e:	85 e4       	ldi	r24, 0x45	; 69
    1060:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('N');
    1064:	8e e4       	ldi	r24, 0x4E	; 78
    1066:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('T');
    106a:	84 e5       	ldi	r24, 0x54	; 84
    106c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('E');
    1070:	85 e4       	ldi	r24, 0x45	; 69
    1072:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('R');
    1076:	82 e5       	ldi	r24, 0x52	; 82
    1078:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Carriage_Return);
    107c:	8d e0       	ldi	r24, 0x0D	; 13
    107e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Newline);
    1082:	8a e0       	ldi	r24, 0x0A	; 10
    1084:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
    1088:	ce c0       	rjmp	.+412    	; 0x1226 <Keyboard_vidReceivedKey+0x31e>
			break;

		case Keyboard_u8Backspace: //Backspace
			//put " " on cursor location and shift cursor location to left by one per backspace
			if(Cursor>=0x80){
    108a:	80 91 76 00 	lds	r24, 0x0076
    108e:	88 23       	and	r24, r24
    1090:	2c f5       	brge	.+74     	; 0x10dc <Keyboard_vidReceivedKey+0x1d4>
				if(Cursor==0x80){
    1092:	80 91 76 00 	lds	r24, 0x0076
    1096:	80 38       	cpi	r24, 0x80	; 128
    1098:	59 f4       	brne	.+22     	; 0x10b0 <Keyboard_vidReceivedKey+0x1a8>
					Lcd_vidSendCommand(Cursor);
    109a:	80 91 76 00 	lds	r24, 0x0076
    109e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
					Lcd_vidWriteChar(' ');
    10a2:	80 e2       	ldi	r24, 0x20	; 32
    10a4:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
					Cursor=0x80;
    10a8:	80 e8       	ldi	r24, 0x80	; 128
    10aa:	80 93 76 00 	sts	0x0076, r24
    10ae:	45 c0       	rjmp	.+138    	; 0x113a <Keyboard_vidReceivedKey+0x232>
				}
				else if((Cursor>0x80)&&(Cursor<=0x8F)){
    10b0:	80 91 76 00 	lds	r24, 0x0076
    10b4:	81 38       	cpi	r24, 0x81	; 129
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <Keyboard_vidReceivedKey+0x1b2>
    10b8:	40 c0       	rjmp	.+128    	; 0x113a <Keyboard_vidReceivedKey+0x232>
    10ba:	80 91 76 00 	lds	r24, 0x0076
    10be:	80 39       	cpi	r24, 0x90	; 144
    10c0:	e0 f5       	brcc	.+120    	; 0x113a <Keyboard_vidReceivedKey+0x232>
					Lcd_vidSendCommand(Cursor);
    10c2:	80 91 76 00 	lds	r24, 0x0076
    10c6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
					Lcd_vidWriteChar(' ');
    10ca:	80 e2       	ldi	r24, 0x20	; 32
    10cc:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
					Cursor--;
    10d0:	80 91 76 00 	lds	r24, 0x0076
    10d4:	81 50       	subi	r24, 0x01	; 1
    10d6:	80 93 76 00 	sts	0x0076, r24
    10da:	2f c0       	rjmp	.+94     	; 0x113a <Keyboard_vidReceivedKey+0x232>
				}
			}
			else if(Cursor>=0xC0){
    10dc:	80 91 76 00 	lds	r24, 0x0076
    10e0:	80 3c       	cpi	r24, 0xC0	; 192
    10e2:	58 f1       	brcs	.+86     	; 0x113a <Keyboard_vidReceivedKey+0x232>
					if(Cursor==0xC0){
    10e4:	80 91 76 00 	lds	r24, 0x0076
    10e8:	80 3c       	cpi	r24, 0xC0	; 192
    10ea:	59 f4       	brne	.+22     	; 0x1102 <Keyboard_vidReceivedKey+0x1fa>
						Lcd_vidSendCommand(Cursor);
    10ec:	80 91 76 00 	lds	r24, 0x0076
    10f0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
						Lcd_vidWriteChar(' ');
    10f4:	80 e2       	ldi	r24, 0x20	; 32
    10f6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
						Cursor=0x8F;
    10fa:	8f e8       	ldi	r24, 0x8F	; 143
    10fc:	80 93 76 00 	sts	0x0076, r24
    1100:	1c c0       	rjmp	.+56     	; 0x113a <Keyboard_vidReceivedKey+0x232>
					}
					else if((Cursor>0x8F)&&(Cursor<0xC0)){
    1102:	80 91 76 00 	lds	r24, 0x0076
    1106:	80 39       	cpi	r24, 0x90	; 144
    1108:	60 f0       	brcs	.+24     	; 0x1122 <Keyboard_vidReceivedKey+0x21a>
    110a:	80 91 76 00 	lds	r24, 0x0076
    110e:	80 3c       	cpi	r24, 0xC0	; 192
    1110:	40 f4       	brcc	.+16     	; 0x1122 <Keyboard_vidReceivedKey+0x21a>
						Cursor=0x8F;
    1112:	8f e8       	ldi	r24, 0x8F	; 143
    1114:	80 93 76 00 	sts	0x0076, r24
						Lcd_vidSendCommand(Cursor);
    1118:	80 91 76 00 	lds	r24, 0x0076
    111c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
    1120:	0c c0       	rjmp	.+24     	; 0x113a <Keyboard_vidReceivedKey+0x232>
					}
					else {
						Lcd_vidSendCommand(Cursor);
    1122:	80 91 76 00 	lds	r24, 0x0076
    1126:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
						Lcd_vidWriteChar(' ');
    112a:	80 e2       	ldi	r24, 0x20	; 32
    112c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
						Cursor--;
    1130:	80 91 76 00 	lds	r24, 0x0076
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	80 93 76 00 	sts	0x0076, r24
					}
			}
			//Returning Name of Pressed Key via UART as a method of testing
			Uart_vidSendByte('B');
    113a:	82 e4       	ldi	r24, 0x42	; 66
    113c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('A');
    1140:	81 e4       	ldi	r24, 0x41	; 65
    1142:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('C');
    1146:	83 e4       	ldi	r24, 0x43	; 67
    1148:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('K');
    114c:	8b e4       	ldi	r24, 0x4B	; 75
    114e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('S');
    1152:	83 e5       	ldi	r24, 0x53	; 83
    1154:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('P');
    1158:	80 e5       	ldi	r24, 0x50	; 80
    115a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('A');
    115e:	81 e4       	ldi	r24, 0x41	; 65
    1160:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('C');
    1164:	83 e4       	ldi	r24, 0x43	; 67
    1166:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('E');
    116a:	85 e4       	ldi	r24, 0x45	; 69
    116c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Carriage_Return);
    1170:	8d e0       	ldi	r24, 0x0D	; 13
    1172:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Newline);
    1176:	8a e0       	ldi	r24, 0x0A	; 10
    1178:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
    117c:	54 c0       	rjmp	.+168    	; 0x1226 <Keyboard_vidReceivedKey+0x31e>
			break;

		case Keyboard_u8Space:	//Space
			if(Cursor<=0x8F){
    117e:	80 91 76 00 	lds	r24, 0x0076
    1182:	80 39       	cpi	r24, 0x90	; 144
    1184:	e0 f4       	brcc	.+56     	; 0x11be <Keyboard_vidReceivedKey+0x2b6>
				if(Cursor==0x8F){
    1186:	80 91 76 00 	lds	r24, 0x0076
    118a:	8f 38       	cpi	r24, 0x8F	; 143
    118c:	59 f4       	brne	.+22     	; 0x11a4 <Keyboard_vidReceivedKey+0x29c>
					Lcd_vidSendCommand(Cursor);
    118e:	80 91 76 00 	lds	r24, 0x0076
    1192:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
					Lcd_vidWriteChar(' ');
    1196:	80 e2       	ldi	r24, 0x20	; 32
    1198:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
					Cursor=0xC0;
    119c:	80 ec       	ldi	r24, 0xC0	; 192
    119e:	80 93 76 00 	sts	0x0076, r24
    11a2:	2c c0       	rjmp	.+88     	; 0x11fc <Keyboard_vidReceivedKey+0x2f4>
				}
				else{
					Lcd_vidSendCommand(Cursor);
    11a4:	80 91 76 00 	lds	r24, 0x0076
    11a8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
					Lcd_vidWriteChar(' ');
    11ac:	80 e2       	ldi	r24, 0x20	; 32
    11ae:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
					Cursor++;
    11b2:	80 91 76 00 	lds	r24, 0x0076
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	80 93 76 00 	sts	0x0076, r24
    11bc:	1f c0       	rjmp	.+62     	; 0x11fc <Keyboard_vidReceivedKey+0x2f4>
				}
			}
			else if(Cursor<=0xCF){
    11be:	80 91 76 00 	lds	r24, 0x0076
    11c2:	80 3d       	cpi	r24, 0xD0	; 208
    11c4:	d8 f4       	brcc	.+54     	; 0x11fc <Keyboard_vidReceivedKey+0x2f4>
				if(Cursor==0xCF){
    11c6:	80 91 76 00 	lds	r24, 0x0076
    11ca:	8f 3c       	cpi	r24, 0xCF	; 207
    11cc:	59 f4       	brne	.+22     	; 0x11e4 <Keyboard_vidReceivedKey+0x2dc>
					Lcd_vidSendCommand(Cursor);
    11ce:	80 91 76 00 	lds	r24, 0x0076
    11d2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
					Lcd_vidWriteChar(' ');
    11d6:	80 e2       	ldi	r24, 0x20	; 32
    11d8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
					Cursor=0xCF;
    11dc:	8f ec       	ldi	r24, 0xCF	; 207
    11de:	80 93 76 00 	sts	0x0076, r24
    11e2:	0c c0       	rjmp	.+24     	; 0x11fc <Keyboard_vidReceivedKey+0x2f4>
				}
				else {
					Lcd_vidSendCommand(Cursor);
    11e4:	80 91 76 00 	lds	r24, 0x0076
    11e8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
					Lcd_vidWriteChar(' ');
    11ec:	80 e2       	ldi	r24, 0x20	; 32
    11ee:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
					Cursor++;
    11f2:	80 91 76 00 	lds	r24, 0x0076
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	80 93 76 00 	sts	0x0076, r24
				}
			}
			//Returning Name of Pressed Key via UART as a method of testing
			Uart_vidSendByte('S');
    11fc:	83 e5       	ldi	r24, 0x53	; 83
    11fe:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('P');
    1202:	80 e5       	ldi	r24, 0x50	; 80
    1204:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('A');
    1208:	81 e4       	ldi	r24, 0x41	; 65
    120a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('C');
    120e:	83 e4       	ldi	r24, 0x43	; 67
    1210:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('E');
    1214:	85 e4       	ldi	r24, 0x45	; 69
    1216:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Carriage_Return);
    121a:	8d e0       	ldi	r24, 0x0D	; 13
    121c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Newline);
    1220:	8a e0       	ldi	r24, 0x0A	; 10
    1222:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			break;
		}
	}
	//Checking for Esc flag
	if(EscFlag==Keyboard_u8FlagSet){
    1226:	80 91 74 00 	lds	r24, 0x0074
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	a1 f4       	brne	.+40     	; 0x1256 <Keyboard_vidReceivedKey+0x34e>
		if(Keyboard_u8ReceivedKey==Keyboard_u8Extended){
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	8b 35       	cpi	r24, 0x5B	; 91
    1232:	21 f4       	brne	.+8      	; 0x123c <Keyboard_vidReceivedKey+0x334>
			ExtendedFlag=Keyboard_u8FlagSet;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	80 93 75 00 	sts	0x0075, r24
    123a:	0d c0       	rjmp	.+26     	; 0x1256 <Keyboard_vidReceivedKey+0x34e>
		}
		else {
			//Esc key is pressed
			Cursor=0x80;
    123c:	80 e8       	ldi	r24, 0x80	; 128
    123e:	80 93 76 00 	sts	0x0076, r24
			Lcd_vidSendCommand(ClearDisplay);
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
			Lcd_vidSendCommand(InitialPosition);
    1248:	80 e8       	ldi	r24, 0x80	; 128
    124a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
			EscFlag=Keyboard_u8FlagCleared,ExtendedFlag=Keyboard_u8FlagCleared;
    124e:	10 92 74 00 	sts	0x0074, r1
    1252:	10 92 75 00 	sts	0x0075, r1
		}
	}//Checking for arrow Keys
	if((EscFlag==Keyboard_u8FlagSet)&&(ExtendedFlag==Keyboard_u8FlagSet)){
    1256:	80 91 74 00 	lds	r24, 0x0074
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	09 f0       	breq	.+2      	; 0x1260 <Keyboard_vidReceivedKey+0x358>
    125e:	c4 c0       	rjmp	.+392    	; 0x13e8 <Keyboard_vidReceivedKey+0x4e0>
    1260:	80 91 75 00 	lds	r24, 0x0075
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	09 f0       	breq	.+2      	; 0x126a <Keyboard_vidReceivedKey+0x362>
    1268:	bf c0       	rjmp	.+382    	; 0x13e8 <Keyboard_vidReceivedKey+0x4e0>
		switch(Keyboard_u8ReceivedKey){
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3d a3       	std	Y+37, r19	; 0x25
    1272:	2c a3       	std	Y+36, r18	; 0x24
    1274:	8c a1       	ldd	r24, Y+36	; 0x24
    1276:	9d a1       	ldd	r25, Y+37	; 0x25
    1278:	82 34       	cpi	r24, 0x42	; 66
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <Keyboard_vidReceivedKey+0x378>
    127e:	47 c0       	rjmp	.+142    	; 0x130e <Keyboard_vidReceivedKey+0x406>
    1280:	2c a1       	ldd	r18, Y+36	; 0x24
    1282:	3d a1       	ldd	r19, Y+37	; 0x25
    1284:	23 34       	cpi	r18, 0x43	; 67
    1286:	31 05       	cpc	r19, r1
    1288:	34 f4       	brge	.+12     	; 0x1296 <Keyboard_vidReceivedKey+0x38e>
    128a:	8c a1       	ldd	r24, Y+36	; 0x24
    128c:	9d a1       	ldd	r25, Y+37	; 0x25
    128e:	81 34       	cpi	r24, 0x41	; 65
    1290:	91 05       	cpc	r25, r1
    1292:	71 f0       	breq	.+28     	; 0x12b0 <Keyboard_vidReceivedKey+0x3a8>
    1294:	a9 c0       	rjmp	.+338    	; 0x13e8 <Keyboard_vidReceivedKey+0x4e0>
    1296:	2c a1       	ldd	r18, Y+36	; 0x24
    1298:	3d a1       	ldd	r19, Y+37	; 0x25
    129a:	23 34       	cpi	r18, 0x43	; 67
    129c:	31 05       	cpc	r19, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <Keyboard_vidReceivedKey+0x39a>
    12a0:	6b c0       	rjmp	.+214    	; 0x1378 <Keyboard_vidReceivedKey+0x470>
    12a2:	8c a1       	ldd	r24, Y+36	; 0x24
    12a4:	9d a1       	ldd	r25, Y+37	; 0x25
    12a6:	84 34       	cpi	r24, 0x44	; 68
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <Keyboard_vidReceivedKey+0x3a6>
    12ac:	83 c0       	rjmp	.+262    	; 0x13b4 <Keyboard_vidReceivedKey+0x4ac>
    12ae:	9c c0       	rjmp	.+312    	; 0x13e8 <Keyboard_vidReceivedKey+0x4e0>
		case Keyboard_u8Up:

			if((Cursor<=0xCF)&&(Cursor>=0xC0)){
    12b0:	80 91 76 00 	lds	r24, 0x0076
    12b4:	80 3d       	cpi	r24, 0xD0	; 208
    12b6:	70 f4       	brcc	.+28     	; 0x12d4 <Keyboard_vidReceivedKey+0x3cc>
    12b8:	80 91 76 00 	lds	r24, 0x0076
    12bc:	80 3c       	cpi	r24, 0xC0	; 192
    12be:	50 f0       	brcs	.+20     	; 0x12d4 <Keyboard_vidReceivedKey+0x3cc>
				Cursor-=0x40;
    12c0:	80 91 76 00 	lds	r24, 0x0076
    12c4:	80 54       	subi	r24, 0x40	; 64
    12c6:	80 93 76 00 	sts	0x0076, r24
				Lcd_vidSendCommand(Cursor);
    12ca:	80 91 76 00 	lds	r24, 0x0076
    12ce:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
    12d2:	0c c0       	rjmp	.+24     	; 0x12ec <Keyboard_vidReceivedKey+0x3e4>
			}
			else if((Cursor<=0x8F)&&(Cursor>=0x80)){
    12d4:	80 91 76 00 	lds	r24, 0x0076
    12d8:	80 39       	cpi	r24, 0x90	; 144
    12da:	40 f4       	brcc	.+16     	; 0x12ec <Keyboard_vidReceivedKey+0x3e4>
    12dc:	80 91 76 00 	lds	r24, 0x0076
    12e0:	88 23       	and	r24, r24
    12e2:	24 f4       	brge	.+8      	; 0x12ec <Keyboard_vidReceivedKey+0x3e4>
				Lcd_vidSendCommand(Cursor);
    12e4:	80 91 76 00 	lds	r24, 0x0076
    12e8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
			}
			Uart_vidSendByte('U');
    12ec:	85 e5       	ldi	r24, 0x55	; 85
    12ee:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('P');
    12f2:	80 e5       	ldi	r24, 0x50	; 80
    12f4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Carriage_Return);
    12f8:	8d e0       	ldi	r24, 0x0D	; 13
    12fa:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Newline);
    12fe:	8a e0       	ldi	r24, 0x0A	; 10
    1300:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			//Clearing Flags
			EscFlag=Keyboard_u8FlagCleared,ExtendedFlag=Keyboard_u8FlagCleared;
    1304:	10 92 74 00 	sts	0x0074, r1
    1308:	10 92 75 00 	sts	0x0075, r1
    130c:	6d c0       	rjmp	.+218    	; 0x13e8 <Keyboard_vidReceivedKey+0x4e0>
			break;
		case Keyboard_u8Down:
			if((Cursor<=0x8F)&&(Cursor>=0x80)){
    130e:	80 91 76 00 	lds	r24, 0x0076
    1312:	80 39       	cpi	r24, 0x90	; 144
    1314:	70 f4       	brcc	.+28     	; 0x1332 <Keyboard_vidReceivedKey+0x42a>
    1316:	80 91 76 00 	lds	r24, 0x0076
    131a:	88 23       	and	r24, r24
    131c:	54 f4       	brge	.+20     	; 0x1332 <Keyboard_vidReceivedKey+0x42a>
				Cursor+=0x40;
    131e:	80 91 76 00 	lds	r24, 0x0076
    1322:	80 5c       	subi	r24, 0xC0	; 192
    1324:	80 93 76 00 	sts	0x0076, r24
				Lcd_vidSendCommand(Cursor);
    1328:	80 91 76 00 	lds	r24, 0x0076
    132c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
    1330:	0c c0       	rjmp	.+24     	; 0x134a <Keyboard_vidReceivedKey+0x442>
			}
			else if((Cursor<=0xCF)&&(Cursor>=0xC0)){
    1332:	80 91 76 00 	lds	r24, 0x0076
    1336:	80 3d       	cpi	r24, 0xD0	; 208
    1338:	40 f4       	brcc	.+16     	; 0x134a <Keyboard_vidReceivedKey+0x442>
    133a:	80 91 76 00 	lds	r24, 0x0076
    133e:	80 3c       	cpi	r24, 0xC0	; 192
    1340:	20 f0       	brcs	.+8      	; 0x134a <Keyboard_vidReceivedKey+0x442>
				Lcd_vidSendCommand(Cursor);
    1342:	80 91 76 00 	lds	r24, 0x0076
    1346:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
			}
			Uart_vidSendByte('D');
    134a:	84 e4       	ldi	r24, 0x44	; 68
    134c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('O');
    1350:	8f e4       	ldi	r24, 0x4F	; 79
    1352:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('W');
    1356:	87 e5       	ldi	r24, 0x57	; 87
    1358:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('N');
    135c:	8e e4       	ldi	r24, 0x4E	; 78
    135e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>

			Uart_vidSendByte(Keyboard_u8Carriage_Return);
    1362:	8d e0       	ldi	r24, 0x0D	; 13
    1364:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Newline);
    1368:	8a e0       	ldi	r24, 0x0A	; 10
    136a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			EscFlag=Keyboard_u8FlagCleared,ExtendedFlag=Keyboard_u8FlagCleared;
    136e:	10 92 74 00 	sts	0x0074, r1
    1372:	10 92 75 00 	sts	0x0075, r1
    1376:	38 c0       	rjmp	.+112    	; 0x13e8 <Keyboard_vidReceivedKey+0x4e0>
			break;
		case Keyboard_u8Right:
			Lcd_vidPrintStr("Right");
    1378:	80 e6       	ldi	r24, 0x60	; 96
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <Lcd_vidPrintStr>
			Uart_vidSendByte('R');
    1380:	82 e5       	ldi	r24, 0x52	; 82
    1382:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('I');
    1386:	89 e4       	ldi	r24, 0x49	; 73
    1388:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('G');
    138c:	87 e4       	ldi	r24, 0x47	; 71
    138e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('H');
    1392:	88 e4       	ldi	r24, 0x48	; 72
    1394:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('T');
    1398:	84 e5       	ldi	r24, 0x54	; 84
    139a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>

			Uart_vidSendByte(Keyboard_u8Carriage_Return);
    139e:	8d e0       	ldi	r24, 0x0D	; 13
    13a0:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Newline);
    13a4:	8a e0       	ldi	r24, 0x0A	; 10
    13a6:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			EscFlag=Keyboard_u8FlagCleared,ExtendedFlag=Keyboard_u8FlagCleared;
    13aa:	10 92 74 00 	sts	0x0074, r1
    13ae:	10 92 75 00 	sts	0x0075, r1
    13b2:	1a c0       	rjmp	.+52     	; 0x13e8 <Keyboard_vidReceivedKey+0x4e0>
			break;
		case Keyboard_u8Left:
			Lcd_vidPrintStr("Left");
    13b4:	86 e6       	ldi	r24, 0x66	; 102
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <Lcd_vidPrintStr>
			Uart_vidSendByte('L');
    13bc:	8c e4       	ldi	r24, 0x4C	; 76
    13be:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('E');
    13c2:	85 e4       	ldi	r24, 0x45	; 69
    13c4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('F');
    13c8:	86 e4       	ldi	r24, 0x46	; 70
    13ca:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte('T');
    13ce:	84 e5       	ldi	r24, 0x54	; 84
    13d0:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>

			Uart_vidSendByte(Keyboard_u8Carriage_Return);
    13d4:	8d e0       	ldi	r24, 0x0D	; 13
    13d6:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			Uart_vidSendByte(Keyboard_u8Newline);
    13da:	8a e0       	ldi	r24, 0x0A	; 10
    13dc:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Uart_vidSendByte>
			EscFlag=Keyboard_u8FlagCleared,ExtendedFlag=Keyboard_u8FlagCleared;
    13e0:	10 92 74 00 	sts	0x0074, r1
    13e4:	10 92 75 00 	sts	0x0075, r1





}
    13e8:	a7 96       	adiw	r28, 0x27	; 39
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <Lcd_vidSendCommand>:
#include"Dio_int.h"
#include"Lcd_cfg.h"
#include"Lcd_int.h"


void Lcd_vidSendCommand(u8 Cmd){
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	2f 97       	sbiw	r28, 0x0f	; 15
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	8f 87       	std	Y+15, r24	; 0x0f

	Dio_vidSetPinVal(LCD_u8RS_PIN,DIO_u8LOW);  //RS Pin cleared
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN,DIO_u8LOW);  //RW Pin cleared because we always wanna write
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Cmd,0));
    1420:	8f 85       	ldd	r24, Y+15	; 0x0f
    1422:	98 2f       	mov	r25, r24
    1424:	91 70       	andi	r25, 0x01	; 1
    1426:	80 e1       	ldi	r24, 0x10	; 16
    1428:	69 2f       	mov	r22, r25
    142a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Cmd,1));
    142e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1430:	86 95       	lsr	r24
    1432:	98 2f       	mov	r25, r24
    1434:	91 70       	andi	r25, 0x01	; 1
    1436:	81 e1       	ldi	r24, 0x11	; 17
    1438:	69 2f       	mov	r22, r25
    143a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Cmd,2));
    143e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1440:	86 95       	lsr	r24
    1442:	86 95       	lsr	r24
    1444:	98 2f       	mov	r25, r24
    1446:	91 70       	andi	r25, 0x01	; 1
    1448:	82 e1       	ldi	r24, 0x12	; 18
    144a:	69 2f       	mov	r22, r25
    144c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Cmd,3));
    1450:	8f 85       	ldd	r24, Y+15	; 0x0f
    1452:	86 95       	lsr	r24
    1454:	86 95       	lsr	r24
    1456:	86 95       	lsr	r24
    1458:	98 2f       	mov	r25, r24
    145a:	91 70       	andi	r25, 0x01	; 1
    145c:	83 e1       	ldi	r24, 0x13	; 19
    145e:	69 2f       	mov	r22, r25
    1460:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Cmd,4));
    1464:	8f 85       	ldd	r24, Y+15	; 0x0f
    1466:	82 95       	swap	r24
    1468:	8f 70       	andi	r24, 0x0F	; 15
    146a:	98 2f       	mov	r25, r24
    146c:	91 70       	andi	r25, 0x01	; 1
    146e:	84 e1       	ldi	r24, 0x14	; 20
    1470:	69 2f       	mov	r22, r25
    1472:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Cmd,5));
    1476:	8f 85       	ldd	r24, Y+15	; 0x0f
    1478:	82 95       	swap	r24
    147a:	86 95       	lsr	r24
    147c:	87 70       	andi	r24, 0x07	; 7
    147e:	98 2f       	mov	r25, r24
    1480:	91 70       	andi	r25, 0x01	; 1
    1482:	85 e1       	ldi	r24, 0x15	; 21
    1484:	69 2f       	mov	r22, r25
    1486:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Cmd,6));
    148a:	8f 85       	ldd	r24, Y+15	; 0x0f
    148c:	82 95       	swap	r24
    148e:	86 95       	lsr	r24
    1490:	86 95       	lsr	r24
    1492:	83 70       	andi	r24, 0x03	; 3
    1494:	98 2f       	mov	r25, r24
    1496:	91 70       	andi	r25, 0x01	; 1
    1498:	86 e1       	ldi	r24, 0x16	; 22
    149a:	69 2f       	mov	r22, r25
    149c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Cmd,7));
    14a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a2:	98 2f       	mov	r25, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	99 27       	eor	r25, r25
    14a8:	99 1f       	adc	r25, r25
    14aa:	87 e1       	ldi	r24, 0x17	; 23
    14ac:	69 2f       	mov	r22, r25
    14ae:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>

	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH); //EN
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 e0       	ldi	r26, 0x00	; 0
    14c0:	b0 e4       	ldi	r27, 0x40	; 64
    14c2:	8b 87       	std	Y+11, r24	; 0x0b
    14c4:	9c 87       	std	Y+12, r25	; 0x0c
    14c6:	ad 87       	std	Y+13, r26	; 0x0d
    14c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    14cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a ef       	ldi	r20, 0xFA	; 250
    14d8:	54 e4       	ldi	r21, 0x44	; 68
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8f 83       	std	Y+7, r24	; 0x07
    14e4:	98 87       	std	Y+8, r25	; 0x08
    14e6:	a9 87       	std	Y+9, r26	; 0x09
    14e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ea:	6f 81       	ldd	r22, Y+7	; 0x07
    14ec:	78 85       	ldd	r23, Y+8	; 0x08
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14fe:	88 23       	and	r24, r24
    1500:	2c f4       	brge	.+10     	; 0x150c <Lcd_vidSendCommand+0x112>
		__ticks = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	3f c0       	rjmp	.+126    	; 0x158a <Lcd_vidSendCommand+0x190>
	else if (__tmp > 65535)
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	4c f5       	brge	.+82     	; 0x1576 <Lcd_vidSendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	0f c0       	rjmp	.+30     	; 0x156c <Lcd_vidSendCommand+0x172>
    154e:	88 ec       	ldi	r24, 0xC8	; 200
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9c 83       	std	Y+4, r25	; 0x04
    1554:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <Lcd_vidSendCommand+0x160>
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	69 f7       	brne	.-38     	; 0x154e <Lcd_vidSendCommand+0x154>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <Lcd_vidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <Lcd_vidSendCommand+0x19c>
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW); //EN
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
}
    15a6:	2f 96       	adiw	r28, 0x0f	; 15
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <Lcd_vidWriteChar>:

void Lcd_vidWriteChar(u8 Char){
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	2f 97       	sbiw	r28, 0x0f	; 15
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	8f 87       	std	Y+15, r24	; 0x0f
	Dio_vidSetPinVal(LCD_u8RS_PIN,DIO_u8HIGH);  //RS Pin set
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN,DIO_u8LOW);  //RW Pin cleared because we always wanna write
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Char,0));
    15de:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e0:	98 2f       	mov	r25, r24
    15e2:	91 70       	andi	r25, 0x01	; 1
    15e4:	80 e1       	ldi	r24, 0x10	; 16
    15e6:	69 2f       	mov	r22, r25
    15e8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Char,1));
    15ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ee:	86 95       	lsr	r24
    15f0:	98 2f       	mov	r25, r24
    15f2:	91 70       	andi	r25, 0x01	; 1
    15f4:	81 e1       	ldi	r24, 0x11	; 17
    15f6:	69 2f       	mov	r22, r25
    15f8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Char,2));
    15fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fe:	86 95       	lsr	r24
    1600:	86 95       	lsr	r24
    1602:	98 2f       	mov	r25, r24
    1604:	91 70       	andi	r25, 0x01	; 1
    1606:	82 e1       	ldi	r24, 0x12	; 18
    1608:	69 2f       	mov	r22, r25
    160a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Char,3));
    160e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1610:	86 95       	lsr	r24
    1612:	86 95       	lsr	r24
    1614:	86 95       	lsr	r24
    1616:	98 2f       	mov	r25, r24
    1618:	91 70       	andi	r25, 0x01	; 1
    161a:	83 e1       	ldi	r24, 0x13	; 19
    161c:	69 2f       	mov	r22, r25
    161e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Char,4));
    1622:	8f 85       	ldd	r24, Y+15	; 0x0f
    1624:	82 95       	swap	r24
    1626:	8f 70       	andi	r24, 0x0F	; 15
    1628:	98 2f       	mov	r25, r24
    162a:	91 70       	andi	r25, 0x01	; 1
    162c:	84 e1       	ldi	r24, 0x14	; 20
    162e:	69 2f       	mov	r22, r25
    1630:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Char,5));
    1634:	8f 85       	ldd	r24, Y+15	; 0x0f
    1636:	82 95       	swap	r24
    1638:	86 95       	lsr	r24
    163a:	87 70       	andi	r24, 0x07	; 7
    163c:	98 2f       	mov	r25, r24
    163e:	91 70       	andi	r25, 0x01	; 1
    1640:	85 e1       	ldi	r24, 0x15	; 21
    1642:	69 2f       	mov	r22, r25
    1644:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Char,6));
    1648:	8f 85       	ldd	r24, Y+15	; 0x0f
    164a:	82 95       	swap	r24
    164c:	86 95       	lsr	r24
    164e:	86 95       	lsr	r24
    1650:	83 70       	andi	r24, 0x03	; 3
    1652:	98 2f       	mov	r25, r24
    1654:	91 70       	andi	r25, 0x01	; 1
    1656:	86 e1       	ldi	r24, 0x16	; 22
    1658:	69 2f       	mov	r22, r25
    165a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Char,7));
    165e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1660:	98 2f       	mov	r25, r24
    1662:	99 1f       	adc	r25, r25
    1664:	99 27       	eor	r25, r25
    1666:	99 1f       	adc	r25, r25
    1668:	87 e1       	ldi	r24, 0x17	; 23
    166a:	69 2f       	mov	r22, r25
    166c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH);   //EN
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	61 e0       	ldi	r22, 0x01	; 1
    1674:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 e0       	ldi	r26, 0x00	; 0
    167e:	b0 e4       	ldi	r27, 0x40	; 64
    1680:	8b 87       	std	Y+11, r24	; 0x0b
    1682:	9c 87       	std	Y+12, r25	; 0x0c
    1684:	ad 87       	std	Y+13, r26	; 0x0d
    1686:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8f 83       	std	Y+7, r24	; 0x07
    16a2:	98 87       	std	Y+8, r25	; 0x08
    16a4:	a9 87       	std	Y+9, r26	; 0x09
    16a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <Lcd_vidWriteChar+0x112>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <Lcd_vidWriteChar+0x190>
	else if (__tmp > 65535)
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <Lcd_vidWriteChar+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	0f c0       	rjmp	.+30     	; 0x172a <Lcd_vidWriteChar+0x172>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9c 83       	std	Y+4, r25	; 0x04
    1712:	8b 83       	std	Y+3, r24	; 0x03
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <Lcd_vidWriteChar+0x160>
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <Lcd_vidWriteChar+0x154>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <Lcd_vidWriteChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <Lcd_vidWriteChar+0x19c>
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW);   //EN
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Dio_vidSetPinVal>
}
    1764:	2f 96       	adiw	r28, 0x0f	; 15
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <Lcd_vidInit>:

void Lcd_vidInit(void){
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	aa 97       	sbiw	r28, 0x2a	; 42
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61

	Dio_vidSetPinDir(LCD_u8RS_PIN,DIO_u8OUTPUT);
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8RW_PIN,DIO_u8OUTPUT);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8EN_PIN,DIO_u8OUTPUT);
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	Dio_vidSetPinDir(LCD_u8D0_PIN,DIO_u8OUTPUT);
    17a2:	80 e1       	ldi	r24, 0x10	; 16
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D1_PIN,DIO_u8OUTPUT);
    17aa:	81 e1       	ldi	r24, 0x11	; 17
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D2_PIN,DIO_u8OUTPUT);
    17b2:	82 e1       	ldi	r24, 0x12	; 18
    17b4:	61 e0       	ldi	r22, 0x01	; 1
    17b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D3_PIN,DIO_u8OUTPUT);
    17ba:	83 e1       	ldi	r24, 0x13	; 19
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D4_PIN,DIO_u8OUTPUT);
    17c2:	84 e1       	ldi	r24, 0x14	; 20
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D5_PIN,DIO_u8OUTPUT);
    17ca:	85 e1       	ldi	r24, 0x15	; 21
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D6_PIN,DIO_u8OUTPUT);
    17d2:	86 e1       	ldi	r24, 0x16	; 22
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D7_PIN,DIO_u8OUTPUT);
    17da:	87 e1       	ldi	r24, 0x17	; 23
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>




	Lcd_vidSendCommand(LCD_u8_CMD_8_BIT_2x16_5x7); 	 //Function Set 8bit 2 line 5x7
    17e2:	88 e3       	ldi	r24, 0x38	; 56
    17e4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a0 e0       	ldi	r26, 0x00	; 0
    17ee:	b0 e4       	ldi	r27, 0x40	; 64
    17f0:	8f a3       	std	Y+39, r24	; 0x27
    17f2:	98 a7       	std	Y+40, r25	; 0x28
    17f4:	a9 a7       	std	Y+41, r26	; 0x29
    17f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f8:	6f a1       	ldd	r22, Y+39	; 0x27
    17fa:	78 a5       	ldd	r23, Y+40	; 0x28
    17fc:	89 a5       	ldd	r24, Y+41	; 0x29
    17fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	4a ef       	ldi	r20, 0xFA	; 250
    1806:	54 e4       	ldi	r21, 0x44	; 68
    1808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	8b a3       	std	Y+35, r24	; 0x23
    1812:	9c a3       	std	Y+36, r25	; 0x24
    1814:	ad a3       	std	Y+37, r26	; 0x25
    1816:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1818:	6b a1       	ldd	r22, Y+35	; 0x23
    181a:	7c a1       	ldd	r23, Y+36	; 0x24
    181c:	8d a1       	ldd	r24, Y+37	; 0x25
    181e:	9e a1       	ldd	r25, Y+38	; 0x26
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    182c:	88 23       	and	r24, r24
    182e:	2c f4       	brge	.+10     	; 0x183a <Lcd_vidInit+0xc4>
		__ticks = 1;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9a a3       	std	Y+34, r25	; 0x22
    1836:	89 a3       	std	Y+33, r24	; 0x21
    1838:	3f c0       	rjmp	.+126    	; 0x18b8 <Lcd_vidInit+0x142>
	else if (__tmp > 65535)
    183a:	6b a1       	ldd	r22, Y+35	; 0x23
    183c:	7c a1       	ldd	r23, Y+36	; 0x24
    183e:	8d a1       	ldd	r24, Y+37	; 0x25
    1840:	9e a1       	ldd	r25, Y+38	; 0x26
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	4f e7       	ldi	r20, 0x7F	; 127
    1848:	57 e4       	ldi	r21, 0x47	; 71
    184a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    184e:	18 16       	cp	r1, r24
    1850:	4c f5       	brge	.+82     	; 0x18a4 <Lcd_vidInit+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1852:	6f a1       	ldd	r22, Y+39	; 0x27
    1854:	78 a5       	ldd	r23, Y+40	; 0x28
    1856:	89 a5       	ldd	r24, Y+41	; 0x29
    1858:	9a a5       	ldd	r25, Y+42	; 0x2a
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e2       	ldi	r20, 0x20	; 32
    1860:	51 e4       	ldi	r21, 0x41	; 65
    1862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9a a3       	std	Y+34, r25	; 0x22
    1878:	89 a3       	std	Y+33, r24	; 0x21
    187a:	0f c0       	rjmp	.+30     	; 0x189a <Lcd_vidInit+0x124>
    187c:	88 ec       	ldi	r24, 0xC8	; 200
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	98 a3       	std	Y+32, r25	; 0x20
    1882:	8f 8f       	std	Y+31, r24	; 0x1f
    1884:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1886:	98 a1       	ldd	r25, Y+32	; 0x20
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <Lcd_vidInit+0x112>
    188c:	98 a3       	std	Y+32, r25	; 0x20
    188e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1890:	89 a1       	ldd	r24, Y+33	; 0x21
    1892:	9a a1       	ldd	r25, Y+34	; 0x22
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	9a a3       	std	Y+34, r25	; 0x22
    1898:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189a:	89 a1       	ldd	r24, Y+33	; 0x21
    189c:	9a a1       	ldd	r25, Y+34	; 0x22
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	69 f7       	brne	.-38     	; 0x187c <Lcd_vidInit+0x106>
    18a2:	14 c0       	rjmp	.+40     	; 0x18cc <Lcd_vidInit+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a4:	6b a1       	ldd	r22, Y+35	; 0x23
    18a6:	7c a1       	ldd	r23, Y+36	; 0x24
    18a8:	8d a1       	ldd	r24, Y+37	; 0x25
    18aa:	9e a1       	ldd	r25, Y+38	; 0x26
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	9a a3       	std	Y+34, r25	; 0x22
    18b6:	89 a3       	std	Y+33, r24	; 0x21
    18b8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ba:	9a a1       	ldd	r25, Y+34	; 0x22
    18bc:	9e 8f       	std	Y+30, r25	; 0x1e
    18be:	8d 8f       	std	Y+29, r24	; 0x1d
    18c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <Lcd_vidInit+0x14e>
    18c8:	9e 8f       	std	Y+30, r25	; 0x1e
    18ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8_CMD_DISP_ON_CURS_OFF); 	//Display ON Cursor OFF
    18cc:	8c e0       	ldi	r24, 0x0C	; 12
    18ce:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	a0 e0       	ldi	r26, 0x00	; 0
    18d8:	b0 e4       	ldi	r27, 0x40	; 64
    18da:	89 8f       	std	Y+25, r24	; 0x19
    18dc:	9a 8f       	std	Y+26, r25	; 0x1a
    18de:	ab 8f       	std	Y+27, r26	; 0x1b
    18e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e2:	69 8d       	ldd	r22, Y+25	; 0x19
    18e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	4a ef       	ldi	r20, 0xFA	; 250
    18f0:	54 e4       	ldi	r21, 0x44	; 68
    18f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	8d 8b       	std	Y+21, r24	; 0x15
    18fc:	9e 8b       	std	Y+22, r25	; 0x16
    18fe:	af 8b       	std	Y+23, r26	; 0x17
    1900:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1902:	6d 89       	ldd	r22, Y+21	; 0x15
    1904:	7e 89       	ldd	r23, Y+22	; 0x16
    1906:	8f 89       	ldd	r24, Y+23	; 0x17
    1908:	98 8d       	ldd	r25, Y+24	; 0x18
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e8       	ldi	r20, 0x80	; 128
    1910:	5f e3       	ldi	r21, 0x3F	; 63
    1912:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1916:	88 23       	and	r24, r24
    1918:	2c f4       	brge	.+10     	; 0x1924 <Lcd_vidInit+0x1ae>
		__ticks = 1;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9c 8b       	std	Y+20, r25	; 0x14
    1920:	8b 8b       	std	Y+19, r24	; 0x13
    1922:	3f c0       	rjmp	.+126    	; 0x19a2 <Lcd_vidInit+0x22c>
	else if (__tmp > 65535)
    1924:	6d 89       	ldd	r22, Y+21	; 0x15
    1926:	7e 89       	ldd	r23, Y+22	; 0x16
    1928:	8f 89       	ldd	r24, Y+23	; 0x17
    192a:	98 8d       	ldd	r25, Y+24	; 0x18
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	3f ef       	ldi	r19, 0xFF	; 255
    1930:	4f e7       	ldi	r20, 0x7F	; 127
    1932:	57 e4       	ldi	r21, 0x47	; 71
    1934:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1938:	18 16       	cp	r1, r24
    193a:	4c f5       	brge	.+82     	; 0x198e <Lcd_vidInit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193c:	69 8d       	ldd	r22, Y+25	; 0x19
    193e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1940:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1942:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e2       	ldi	r20, 0x20	; 32
    194a:	51 e4       	ldi	r21, 0x41	; 65
    194c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9c 8b       	std	Y+20, r25	; 0x14
    1962:	8b 8b       	std	Y+19, r24	; 0x13
    1964:	0f c0       	rjmp	.+30     	; 0x1984 <Lcd_vidInit+0x20e>
    1966:	88 ec       	ldi	r24, 0xC8	; 200
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	9a 8b       	std	Y+18, r25	; 0x12
    196c:	89 8b       	std	Y+17, r24	; 0x11
    196e:	89 89       	ldd	r24, Y+17	; 0x11
    1970:	9a 89       	ldd	r25, Y+18	; 0x12
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	f1 f7       	brne	.-4      	; 0x1972 <Lcd_vidInit+0x1fc>
    1976:	9a 8b       	std	Y+18, r25	; 0x12
    1978:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197a:	8b 89       	ldd	r24, Y+19	; 0x13
    197c:	9c 89       	ldd	r25, Y+20	; 0x14
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	9c 8b       	std	Y+20, r25	; 0x14
    1982:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1984:	8b 89       	ldd	r24, Y+19	; 0x13
    1986:	9c 89       	ldd	r25, Y+20	; 0x14
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	69 f7       	brne	.-38     	; 0x1966 <Lcd_vidInit+0x1f0>
    198c:	14 c0       	rjmp	.+40     	; 0x19b6 <Lcd_vidInit+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198e:	6d 89       	ldd	r22, Y+21	; 0x15
    1990:	7e 89       	ldd	r23, Y+22	; 0x16
    1992:	8f 89       	ldd	r24, Y+23	; 0x17
    1994:	98 8d       	ldd	r25, Y+24	; 0x18
    1996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	9c 8b       	std	Y+20, r25	; 0x14
    19a0:	8b 8b       	std	Y+19, r24	; 0x13
    19a2:	8b 89       	ldd	r24, Y+19	; 0x13
    19a4:	9c 89       	ldd	r25, Y+20	; 0x14
    19a6:	98 8b       	std	Y+16, r25	; 0x10
    19a8:	8f 87       	std	Y+15, r24	; 0x0f
    19aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ac:	98 89       	ldd	r25, Y+16	; 0x10
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <Lcd_vidInit+0x238>
    19b2:	98 8b       	std	Y+16, r25	; 0x10
    19b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8_CMD_CLR_DISPLAY);	//Clear Display
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a0 e0       	ldi	r26, 0x00	; 0
    19c2:	b0 e4       	ldi	r27, 0x40	; 64
    19c4:	8b 87       	std	Y+11, r24	; 0x0b
    19c6:	9c 87       	std	Y+12, r25	; 0x0c
    19c8:	ad 87       	std	Y+13, r26	; 0x0d
    19ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a ef       	ldi	r20, 0xFA	; 250
    19da:	54 e4       	ldi	r21, 0x44	; 68
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8f 83       	std	Y+7, r24	; 0x07
    19e6:	98 87       	std	Y+8, r25	; 0x08
    19e8:	a9 87       	std	Y+9, r26	; 0x09
    19ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <Lcd_vidInit+0x298>
		__ticks = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	3f c0       	rjmp	.+126    	; 0x1a8c <Lcd_vidInit+0x316>
	else if (__tmp > 65535)
    1a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a10:	78 85       	ldd	r23, Y+8	; 0x08
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	3f ef       	ldi	r19, 0xFF	; 255
    1a1a:	4f e7       	ldi	r20, 0x7F	; 127
    1a1c:	57 e4       	ldi	r21, 0x47	; 71
    1a1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	4c f5       	brge	.+82     	; 0x1a78 <Lcd_vidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e2       	ldi	r20, 0x20	; 32
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
    1a4e:	0f c0       	rjmp	.+30     	; 0x1a6e <Lcd_vidInit+0x2f8>
    1a50:	88 ec       	ldi	r24, 0xC8	; 200
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	8b 83       	std	Y+3, r24	; 0x03
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <Lcd_vidInit+0x2e6>
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	69 f7       	brne	.-38     	; 0x1a50 <Lcd_vidInit+0x2da>
    1a76:	14 c0       	rjmp	.+40     	; 0x1aa0 <Lcd_vidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <Lcd_vidInit+0x322>
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1aa0:	aa 96       	adiw	r28, 0x2a	; 42
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <Lcd_MoveCursor>:

void Lcd_MoveCursor(u8 Pos){
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <Lcd_MoveCursor+0x6>
    1ab8:	0f 92       	push	r0
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0; i<Pos; i++){
    1ac0:	1a 82       	std	Y+2, r1	; 0x02
    1ac2:	19 82       	std	Y+1, r1	; 0x01
    1ac4:	08 c0       	rjmp	.+16     	; 0x1ad6 <Lcd_MoveCursor+0x24>
		Lcd_vidSendCommand(16);
    1ac6:	80 e1       	ldi	r24, 0x10	; 16
    1ac8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Lcd_vidSendCommand>
	Lcd_vidSendCommand(LCD_u8_CMD_CLR_DISPLAY);	//Clear Display
	_delay_ms(2);
}

void Lcd_MoveCursor(u8 Pos){
	for(int i=0; i<Pos; i++){
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	9a 83       	std	Y+2, r25	; 0x02
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	82 17       	cp	r24, r18
    1ae2:	93 07       	cpc	r25, r19
    1ae4:	84 f3       	brlt	.-32     	; 0x1ac6 <Lcd_MoveCursor+0x14>
		Lcd_vidSendCommand(16);
	}
}
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <Lcd_vidPrintStr>:


void Lcd_vidPrintStr(char *word){
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <Lcd_vidPrintStr+0x6>
    1af8:	0f 92       	push	r0
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	9b 83       	std	Y+3, r25	; 0x03
    1b00:	8a 83       	std	Y+2, r24	; 0x02
    1b02:	0e c0       	rjmp	.+28     	; 0x1b20 <Lcd_vidPrintStr+0x2e>
	u8 ii;
	while(word[ii]!='\0'){
		Lcd_vidWriteChar(word[ii]);
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	fc 01       	movw	r30, r24
    1b10:	e2 0f       	add	r30, r18
    1b12:	f3 1f       	adc	r31, r19
    1b14:	80 81       	ld	r24, Z
    1b16:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Lcd_vidWriteChar>
		ii++;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_vidPrintStr(char *word){
	u8 ii;
	while(word[ii]!='\0'){
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e2 0f       	add	r30, r18
    1b2e:	f3 1f       	adc	r31, r19
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	39 f7       	brne	.-50     	; 0x1b04 <Lcd_vidPrintStr+0x12>
		ii++;
	}



}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <Uart_vidInit>:

#include"Uart_int.h"
#include"Uart_priv.h"
#include"Uart_cfg.h"

void Uart_vidInit(void){
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	0f 92       	push	r0
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	u8 Temp_u8UcsrcData;	//Temp variable to set UCSRC config


	SET_BIT(UCSRB,4); //RX enabled
    1b4c:	aa e2       	ldi	r26, 0x2A	; 42
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	ea e2       	ldi	r30, 0x2A	; 42
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 61       	ori	r24, 0x10	; 16
    1b58:	8c 93       	st	X, r24
	SET_BIT(UCSRB,3); //TX enabled
    1b5a:	aa e2       	ldi	r26, 0x2A	; 42
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	ea e2       	ldi	r30, 0x2A	; 42
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	88 60       	ori	r24, 0x08	; 8
    1b66:	8c 93       	st	X, r24
	Temp_u8UcsrcData=0;
    1b68:	19 82       	std	Y+1, r1	; 0x01
	CLR_BIT(UCSRB,2); //Character size: 8
    1b6a:	aa e2       	ldi	r26, 0x2A	; 42
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	ea e2       	ldi	r30, 0x2A	; 42
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	8b 7f       	andi	r24, 0xFB	; 251
    1b76:	8c 93       	st	X, r24

	SET_BIT(Temp_u8UcsrcData,2);//Character size: 8 in UCSRC
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	84 60       	ori	r24, 0x04	; 4
    1b7c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Temp_u8UcsrcData,1);//Character size: 8 in UCSRC
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	82 60       	ori	r24, 0x02	; 2
    1b82:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(Temp_u8UcsrcData,6); //Asynchronous     in UCSRC
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	8f 7b       	andi	r24, 0xBF	; 191
    1b88:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp_u8UcsrcData,5); //Parity Disabled  in UCSRC
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	8f 7d       	andi	r24, 0xDF	; 223
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp_u8UcsrcData,4); //Parity Disabled  in UCSRC
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	8f 7e       	andi	r24, 0xEF	; 239
    1b94:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Temp_u8UcsrcData,3); //1 stop bit       in UCSRC
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	87 7f       	andi	r24, 0xF7	; 247
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Temp_u8UcsrcData,7); //7th bit set to 1 indicating we chose to use UCSRC using URSEL register select
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	80 68       	ori	r24, 0x80	; 128
    1ba0:	89 83       	std	Y+1, r24	; 0x01

	UCSRC=Temp_u8UcsrcData; //Writing UCSRC configuration
    1ba2:	e0 e4       	ldi	r30, 0x40	; 64
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	80 83       	st	Z, r24

	UBRRH=0;	//Set BaudRate to 9600
    1baa:	e0 e4       	ldi	r30, 0x40	; 64
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	10 82       	st	Z, r1
	UBRRL=51;	//Set BaudRate to 9600
    1bb0:	e9 e2       	ldi	r30, 0x29	; 41
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	83 e3       	ldi	r24, 0x33	; 51
    1bb6:	80 83       	st	Z, r24
}
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <Uart_vidSendByte>:

void Uart_vidSendByte(u8 Byte){
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(UCSRA,5)==0);	//Waiting for the UDRE flag
    1bcc:	eb e2       	ldi	r30, 0x2B	; 43
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	82 95       	swap	r24
    1bd4:	86 95       	lsr	r24
    1bd6:	87 70       	andi	r24, 0x07	; 7
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	81 70       	andi	r24, 0x01	; 1
    1bde:	90 70       	andi	r25, 0x00	; 0
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	a1 f3       	breq	.-24     	; 0x1bcc <Uart_vidSendByte+0xc>
	UDR = Byte;		//Update UDR register with new data to send
    1be4:	ec e2       	ldi	r30, 0x2C	; 44
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	80 83       	st	Z, r24

}
    1bec:	0f 90       	pop	r0
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <Uart_u8ReceiveByte>:

u8 Uart_u8ReceiveByte(void){
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62

	while(GET_BIT(UCSRA,7)==0); //Waiting for RX flag
    1bfc:	eb e2       	ldi	r30, 0x2B	; 43
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	88 23       	and	r24, r24
    1c04:	dc f7       	brge	.-10     	; 0x1bfc <Uart_u8ReceiveByte+0x8>
	return UDR;		//Read UDR Received Byte
    1c06:	ec e2       	ldi	r30, 0x2C	; 44
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
}
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <main>:
#include"../Lib/Std_types.h"
#include"../Lib/Bit_math.h"
#include"Keyboard_int.h"


int main(void){
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62

	Keyboard_vidInit();
    1c1a:	0e 94 79 07 	call	0xef2	; 0xef2 <Keyboard_vidInit>
	extern u8 EscFlag,ExtendedFlag,Cursor;
	Cursor=0x80;;
    1c1e:	80 e8       	ldi	r24, 0x80	; 128
    1c20:	80 93 76 00 	sts	0x0076, r24
	EscFlag=Keyboard_u8FlagCleared,ExtendedFlag=Keyboard_u8FlagCleared;
    1c24:	10 92 74 00 	sts	0x0074, r1
    1c28:	10 92 75 00 	sts	0x0075, r1
	while(1){
		Keyboard_vidReceivedKey();
    1c2c:	0e 94 84 07 	call	0xf08	; 0xf08 <Keyboard_vidReceivedKey>
    1c30:	fd cf       	rjmp	.-6      	; 0x1c2c <main+0x1a>

00001c32 <__prologue_saves__>:
    1c32:	2f 92       	push	r2
    1c34:	3f 92       	push	r3
    1c36:	4f 92       	push	r4
    1c38:	5f 92       	push	r5
    1c3a:	6f 92       	push	r6
    1c3c:	7f 92       	push	r7
    1c3e:	8f 92       	push	r8
    1c40:	9f 92       	push	r9
    1c42:	af 92       	push	r10
    1c44:	bf 92       	push	r11
    1c46:	cf 92       	push	r12
    1c48:	df 92       	push	r13
    1c4a:	ef 92       	push	r14
    1c4c:	ff 92       	push	r15
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	ca 1b       	sub	r28, r26
    1c5c:	db 0b       	sbc	r29, r27
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	09 94       	ijmp

00001c6a <__epilogue_restores__>:
    1c6a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c6c:	39 88       	ldd	r3, Y+17	; 0x11
    1c6e:	48 88       	ldd	r4, Y+16	; 0x10
    1c70:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c72:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c74:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c76:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c78:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c7c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c7e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c80:	df 80       	ldd	r13, Y+7	; 0x07
    1c82:	ee 80       	ldd	r14, Y+6	; 0x06
    1c84:	fd 80       	ldd	r15, Y+5	; 0x05
    1c86:	0c 81       	ldd	r16, Y+4	; 0x04
    1c88:	1b 81       	ldd	r17, Y+3	; 0x03
    1c8a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c8c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c8e:	ce 0f       	add	r28, r30
    1c90:	d1 1d       	adc	r29, r1
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	ed 01       	movw	r28, r26
    1c9e:	08 95       	ret

00001ca0 <_exit>:
    1ca0:	f8 94       	cli

00001ca2 <__stop_program>:
    1ca2:	ff cf       	rjmp	.-2      	; 0x1ca2 <__stop_program>
