
Input_Capture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001e4a  00001ede  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800168  00800168  00001fe6  2**0
                  ALLOC
  3 .stab         000011d0  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ab1  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00003c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00003e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00003ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00006405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000777c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00008954  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00008b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00008e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000097d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 38       	cpi	r26, 0x80	; 128
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e4       	ldi	r30, 0x4A	; 74
      78:	fe e1       	ldi	r31, 0x1E	; 30
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 4e 0c 	call	0x189c	; 0x189c <main>
      8a:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <Dio_vidSetPinDir>:
#include"../Lib/Std_types.h"
#include"../Lib/Bit_math.h"
#include"Dio_int.h"
#include<avr/io.h>

void Dio_vidSetPinDir(u8 Pin, u8 Dir){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <Dio_vidSetPinDir+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <Dio_vidSetPinDir+0x8>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <Dio_vidSetPinDir+0xa>
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	8b 83       	std	Y+3, r24	; 0x03
     e08:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	86 95       	lsr	r24
     e0e:	86 95       	lsr	r24
     e10:	86 95       	lsr	r24
     e12:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	87 70       	andi	r24, 0x07	; 7
     e18:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	3e 83       	std	Y+6, r19	; 0x06
     e22:	2d 83       	std	Y+5, r18	; 0x05
     e24:	8d 81       	ldd	r24, Y+5	; 0x05
     e26:	9e 81       	ldd	r25, Y+6	; 0x06
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	91 05       	cpc	r25, r1
     e2c:	09 f4       	brne	.+2      	; 0xe30 <Dio_vidSetPinDir+0x38>
     e2e:	43 c0       	rjmp	.+134    	; 0xeb6 <Dio_vidSetPinDir+0xbe>
     e30:	2d 81       	ldd	r18, Y+5	; 0x05
     e32:	3e 81       	ldd	r19, Y+6	; 0x06
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	31 05       	cpc	r19, r1
     e38:	2c f4       	brge	.+10     	; 0xe44 <Dio_vidSetPinDir+0x4c>
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	9e 81       	ldd	r25, Y+6	; 0x06
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	71 f0       	breq	.+28     	; 0xe5e <Dio_vidSetPinDir+0x66>
     e42:	bc c0       	rjmp	.+376    	; 0xfbc <Dio_vidSetPinDir+0x1c4>
     e44:	2d 81       	ldd	r18, Y+5	; 0x05
     e46:	3e 81       	ldd	r19, Y+6	; 0x06
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	31 05       	cpc	r19, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <Dio_vidSetPinDir+0x58>
     e4e:	5f c0       	rjmp	.+190    	; 0xf0e <Dio_vidSetPinDir+0x116>
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	83 30       	cpi	r24, 0x03	; 3
     e56:	91 05       	cpc	r25, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <Dio_vidSetPinDir+0x64>
     e5a:	85 c0       	rjmp	.+266    	; 0xf66 <Dio_vidSetPinDir+0x16e>
     e5c:	af c0       	rjmp	.+350    	; 0xfbc <Dio_vidSetPinDir+0x1c4>
	case 0:
		if(Dir==1){
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	a1 f4       	brne	.+40     	; 0xe8c <Dio_vidSetPinDir+0x94>
			SET_BIT(DDRA,PinLoc);
     e64:	aa e3       	ldi	r26, 0x3A	; 58
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ea e3       	ldi	r30, 0x3A	; 58
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <Dio_vidSetPinDir+0x8a>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <Dio_vidSetPinDir+0x86>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	98 c0       	rjmp	.+304    	; 0xfbc <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRA,PinLoc);
     e8c:	aa e3       	ldi	r26, 0x3A	; 58
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ea e3       	ldi	r30, 0x3A	; 58
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <Dio_vidSetPinDir+0xb2>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <Dio_vidSetPinDir+0xae>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	83 c0       	rjmp	.+262    	; 0xfbc <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 1:
		if(Dir==1){
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	a1 f4       	brne	.+40     	; 0xee4 <Dio_vidSetPinDir+0xec>
			SET_BIT(DDRB,PinLoc);
     ebc:	a7 e3       	ldi	r26, 0x37	; 55
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <Dio_vidSetPinDir+0xe2>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <Dio_vidSetPinDir+0xde>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	6c c0       	rjmp	.+216    	; 0xfbc <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRB,PinLoc);
     ee4:	a7 e3       	ldi	r26, 0x37	; 55
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e3       	ldi	r30, 0x37	; 55
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <Dio_vidSetPinDir+0x10a>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <Dio_vidSetPinDir+0x106>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	57 c0       	rjmp	.+174    	; 0xfbc <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 2:
		if(Dir==1){
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	a1 f4       	brne	.+40     	; 0xf3c <Dio_vidSetPinDir+0x144>
			SET_BIT(DDRC,PinLoc);
     f14:	a4 e3       	ldi	r26, 0x34	; 52
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e4 e3       	ldi	r30, 0x34	; 52
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <Dio_vidSetPinDir+0x13a>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <Dio_vidSetPinDir+0x136>
     f36:	84 2b       	or	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	40 c0       	rjmp	.+128    	; 0xfbc <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRC,PinLoc);
     f3c:	a4 e3       	ldi	r26, 0x34	; 52
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e4 e3       	ldi	r30, 0x34	; 52
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <Dio_vidSetPinDir+0x162>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <Dio_vidSetPinDir+0x15e>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	2b c0       	rjmp	.+86     	; 0xfbc <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 3:
		if(Dir==1){
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	a1 f4       	brne	.+40     	; 0xf94 <Dio_vidSetPinDir+0x19c>
			SET_BIT(DDRD,PinLoc);
     f6c:	a1 e3       	ldi	r26, 0x31	; 49
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e1 e3       	ldi	r30, 0x31	; 49
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <Dio_vidSetPinDir+0x192>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <Dio_vidSetPinDir+0x18e>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRD,PinLoc);
     f94:	a1 e3       	ldi	r26, 0x31	; 49
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e1 e3       	ldi	r30, 0x31	; 49
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <Dio_vidSetPinDir+0x1ba>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <Dio_vidSetPinDir+0x1b6>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
		}
		break;
	}
}
     fbc:	26 96       	adiw	r28, 0x06	; 6
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin, u8 Val){
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <Dio_vidSetPinVal+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <Dio_vidSetPinVal+0x8>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <Dio_vidSetPinVal+0xa>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	86 95       	lsr	r24
     fe4:	86 95       	lsr	r24
     fe6:	86 95       	lsr	r24
     fe8:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	87 70       	andi	r24, 0x07	; 7
     fee:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	3e 83       	std	Y+6, r19	; 0x06
     ff8:	2d 83       	std	Y+5, r18	; 0x05
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	91 05       	cpc	r25, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <Dio_vidSetPinVal+0x38>
    1004:	43 c0       	rjmp	.+134    	; 0x108c <Dio_vidSetPinVal+0xbe>
    1006:	2d 81       	ldd	r18, Y+5	; 0x05
    1008:	3e 81       	ldd	r19, Y+6	; 0x06
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	2c f4       	brge	.+10     	; 0x101a <Dio_vidSetPinVal+0x4c>
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	71 f0       	breq	.+28     	; 0x1034 <Dio_vidSetPinVal+0x66>
    1018:	bc c0       	rjmp	.+376    	; 0x1192 <Dio_vidSetPinVal+0x1c4>
    101a:	2d 81       	ldd	r18, Y+5	; 0x05
    101c:	3e 81       	ldd	r19, Y+6	; 0x06
    101e:	22 30       	cpi	r18, 0x02	; 2
    1020:	31 05       	cpc	r19, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <Dio_vidSetPinVal+0x58>
    1024:	5f c0       	rjmp	.+190    	; 0x10e4 <Dio_vidSetPinVal+0x116>
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	9e 81       	ldd	r25, Y+6	; 0x06
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	09 f4       	brne	.+2      	; 0x1032 <Dio_vidSetPinVal+0x64>
    1030:	85 c0       	rjmp	.+266    	; 0x113c <Dio_vidSetPinVal+0x16e>
    1032:	af c0       	rjmp	.+350    	; 0x1192 <Dio_vidSetPinVal+0x1c4>
	case 0:
		if(Val==1){
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	a1 f4       	brne	.+40     	; 0x1062 <Dio_vidSetPinVal+0x94>
			SET_BIT(PORTA,PinLoc);
    103a:	ab e3       	ldi	r26, 0x3B	; 59
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	eb e3       	ldi	r30, 0x3B	; 59
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <Dio_vidSetPinVal+0x8a>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <Dio_vidSetPinVal+0x86>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	98 c0       	rjmp	.+304    	; 0x1192 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTA,PinLoc);
    1062:	ab e3       	ldi	r26, 0x3B	; 59
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	eb e3       	ldi	r30, 0x3B	; 59
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <Dio_vidSetPinVal+0xb2>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <Dio_vidSetPinVal+0xae>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	83 c0       	rjmp	.+262    	; 0x1192 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 1:
		if(Val==1){
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	a1 f4       	brne	.+40     	; 0x10ba <Dio_vidSetPinVal+0xec>
			SET_BIT(PORTB,PinLoc);
    1092:	a8 e3       	ldi	r26, 0x38	; 56
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e8 e3       	ldi	r30, 0x38	; 56
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <Dio_vidSetPinVal+0xe2>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <Dio_vidSetPinVal+0xde>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	6c c0       	rjmp	.+216    	; 0x1192 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTB,PinLoc);
    10ba:	a8 e3       	ldi	r26, 0x38	; 56
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 e3       	ldi	r30, 0x38	; 56
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <Dio_vidSetPinVal+0x10a>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <Dio_vidSetPinVal+0x106>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	57 c0       	rjmp	.+174    	; 0x1192 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 2:
		if(Val==1){
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	a1 f4       	brne	.+40     	; 0x1112 <Dio_vidSetPinVal+0x144>
			SET_BIT(PORTC,PinLoc);
    10ea:	a5 e3       	ldi	r26, 0x35	; 53
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e5 e3       	ldi	r30, 0x35	; 53
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <Dio_vidSetPinVal+0x13a>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <Dio_vidSetPinVal+0x136>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	40 c0       	rjmp	.+128    	; 0x1192 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTC,PinLoc);
    1112:	a5 e3       	ldi	r26, 0x35	; 53
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e5 e3       	ldi	r30, 0x35	; 53
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <Dio_vidSetPinVal+0x162>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <Dio_vidSetPinVal+0x15e>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	2b c0       	rjmp	.+86     	; 0x1192 <Dio_vidSetPinVal+0x1c4>
		}
		break;
	case 3:
		if(Val==1){
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	a1 f4       	brne	.+40     	; 0x116a <Dio_vidSetPinVal+0x19c>
			SET_BIT(PORTD,PinLoc);
    1142:	a2 e3       	ldi	r26, 0x32	; 50
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e2 e3       	ldi	r30, 0x32	; 50
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <Dio_vidSetPinVal+0x192>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <Dio_vidSetPinVal+0x18e>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	14 c0       	rjmp	.+40     	; 0x1192 <Dio_vidSetPinVal+0x1c4>
		}
		else {
			CLR_BIT(PORTD,PinLoc);
    116a:	a2 e3       	ldi	r26, 0x32	; 50
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e2 e3       	ldi	r30, 0x32	; 50
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <Dio_vidSetPinVal+0x1ba>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <Dio_vidSetPinVal+0x1b6>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
		}
		break;
	}
}
    1192:	26 96       	adiw	r28, 0x06	; 6
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <Lcd_vidSendCommand>:
#include"Dio_int.h"
#include"Lcd_cfg.h"
#include"Lcd_int.h"


void Lcd_vidSendCommand(u8 Cmd){
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	2f 97       	sbiw	r28, 0x0f	; 15
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	8f 87       	std	Y+15, r24	; 0x0f

	Dio_vidSetPinVal(LCD_u8RS_PIN,DIO_u8LOW);  //RS Pin cleared
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN,DIO_u8LOW);  //RW Pin cleared because we always wanna write
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Cmd,0));
    11ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    11cc:	98 2f       	mov	r25, r24
    11ce:	91 70       	andi	r25, 0x01	; 1
    11d0:	80 e1       	ldi	r24, 0x10	; 16
    11d2:	69 2f       	mov	r22, r25
    11d4:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Cmd,1));
    11d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11da:	86 95       	lsr	r24
    11dc:	98 2f       	mov	r25, r24
    11de:	91 70       	andi	r25, 0x01	; 1
    11e0:	81 e1       	ldi	r24, 0x11	; 17
    11e2:	69 2f       	mov	r22, r25
    11e4:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Cmd,2));
    11e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ea:	86 95       	lsr	r24
    11ec:	86 95       	lsr	r24
    11ee:	98 2f       	mov	r25, r24
    11f0:	91 70       	andi	r25, 0x01	; 1
    11f2:	82 e1       	ldi	r24, 0x12	; 18
    11f4:	69 2f       	mov	r22, r25
    11f6:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Cmd,3));
    11fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    11fc:	86 95       	lsr	r24
    11fe:	86 95       	lsr	r24
    1200:	86 95       	lsr	r24
    1202:	98 2f       	mov	r25, r24
    1204:	91 70       	andi	r25, 0x01	; 1
    1206:	83 e1       	ldi	r24, 0x13	; 19
    1208:	69 2f       	mov	r22, r25
    120a:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Cmd,4));
    120e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1210:	82 95       	swap	r24
    1212:	8f 70       	andi	r24, 0x0F	; 15
    1214:	98 2f       	mov	r25, r24
    1216:	91 70       	andi	r25, 0x01	; 1
    1218:	84 e1       	ldi	r24, 0x14	; 20
    121a:	69 2f       	mov	r22, r25
    121c:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Cmd,5));
    1220:	8f 85       	ldd	r24, Y+15	; 0x0f
    1222:	82 95       	swap	r24
    1224:	86 95       	lsr	r24
    1226:	87 70       	andi	r24, 0x07	; 7
    1228:	98 2f       	mov	r25, r24
    122a:	91 70       	andi	r25, 0x01	; 1
    122c:	85 e1       	ldi	r24, 0x15	; 21
    122e:	69 2f       	mov	r22, r25
    1230:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Cmd,6));
    1234:	8f 85       	ldd	r24, Y+15	; 0x0f
    1236:	82 95       	swap	r24
    1238:	86 95       	lsr	r24
    123a:	86 95       	lsr	r24
    123c:	83 70       	andi	r24, 0x03	; 3
    123e:	98 2f       	mov	r25, r24
    1240:	91 70       	andi	r25, 0x01	; 1
    1242:	86 e1       	ldi	r24, 0x16	; 22
    1244:	69 2f       	mov	r22, r25
    1246:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Cmd,7));
    124a:	8f 85       	ldd	r24, Y+15	; 0x0f
    124c:	98 2f       	mov	r25, r24
    124e:	99 1f       	adc	r25, r25
    1250:	99 27       	eor	r25, r25
    1252:	99 1f       	adc	r25, r25
    1254:	87 e1       	ldi	r24, 0x17	; 23
    1256:	69 2f       	mov	r22, r25
    1258:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>

	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH); //EN
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e4       	ldi	r27, 0x40	; 64
    126c:	8b 87       	std	Y+11, r24	; 0x0b
    126e:	9c 87       	std	Y+12, r25	; 0x0c
    1270:	ad 87       	std	Y+13, r26	; 0x0d
    1272:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1274:	6b 85       	ldd	r22, Y+11	; 0x0b
    1276:	7c 85       	ldd	r23, Y+12	; 0x0c
    1278:	8d 85       	ldd	r24, Y+13	; 0x0d
    127a:	9e 85       	ldd	r25, Y+14	; 0x0e
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	4a ef       	ldi	r20, 0xFA	; 250
    1282:	54 e4       	ldi	r21, 0x44	; 68
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	8f 83       	std	Y+7, r24	; 0x07
    128e:	98 87       	std	Y+8, r25	; 0x08
    1290:	a9 87       	std	Y+9, r26	; 0x09
    1292:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1294:	6f 81       	ldd	r22, Y+7	; 0x07
    1296:	78 85       	ldd	r23, Y+8	; 0x08
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	9a 85       	ldd	r25, Y+10	; 0x0a
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e8       	ldi	r20, 0x80	; 128
    12a2:	5f e3       	ldi	r21, 0x3F	; 63
    12a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12a8:	88 23       	and	r24, r24
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <Lcd_vidSendCommand+0x112>
		__ticks = 1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9e 83       	std	Y+6, r25	; 0x06
    12b2:	8d 83       	std	Y+5, r24	; 0x05
    12b4:	3f c0       	rjmp	.+126    	; 0x1334 <Lcd_vidSendCommand+0x190>
	else if (__tmp > 65535)
    12b6:	6f 81       	ldd	r22, Y+7	; 0x07
    12b8:	78 85       	ldd	r23, Y+8	; 0x08
    12ba:	89 85       	ldd	r24, Y+9	; 0x09
    12bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	3f ef       	ldi	r19, 0xFF	; 255
    12c2:	4f e7       	ldi	r20, 0x7F	; 127
    12c4:	57 e4       	ldi	r21, 0x47	; 71
    12c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12ca:	18 16       	cp	r1, r24
    12cc:	4c f5       	brge	.+82     	; 0x1320 <Lcd_vidSendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e2       	ldi	r20, 0x20	; 32
    12dc:	51 e4       	ldi	r21, 0x41	; 65
    12de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	9e 83       	std	Y+6, r25	; 0x06
    12f4:	8d 83       	std	Y+5, r24	; 0x05
    12f6:	0f c0       	rjmp	.+30     	; 0x1316 <Lcd_vidSendCommand+0x172>
    12f8:	88 ec       	ldi	r24, 0xC8	; 200
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9c 83       	std	Y+4, r25	; 0x04
    12fe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9c 81       	ldd	r25, Y+4	; 0x04
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <Lcd_vidSendCommand+0x160>
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	9e 83       	std	Y+6, r25	; 0x06
    1314:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	69 f7       	brne	.-38     	; 0x12f8 <Lcd_vidSendCommand+0x154>
    131e:	14 c0       	rjmp	.+40     	; 0x1348 <Lcd_vidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1320:	6f 81       	ldd	r22, Y+7	; 0x07
    1322:	78 85       	ldd	r23, Y+8	; 0x08
    1324:	89 85       	ldd	r24, Y+9	; 0x09
    1326:	9a 85       	ldd	r25, Y+10	; 0x0a
    1328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	9a 83       	std	Y+2, r25	; 0x02
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	f1 f7       	brne	.-4      	; 0x1340 <Lcd_vidSendCommand+0x19c>
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW); //EN
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
}
    1350:	2f 96       	adiw	r28, 0x0f	; 15
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <Lcd_vidWriteChar>:

void Lcd_vidWriteChar(u8 Char){
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	2f 97       	sbiw	r28, 0x0f	; 15
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	8f 87       	std	Y+15, r24	; 0x0f
	Dio_vidSetPinVal(LCD_u8RS_PIN,DIO_u8HIGH);  //RS Pin set
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN,DIO_u8LOW);  //RW Pin cleared because we always wanna write
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Char,0));
    1388:	8f 85       	ldd	r24, Y+15	; 0x0f
    138a:	98 2f       	mov	r25, r24
    138c:	91 70       	andi	r25, 0x01	; 1
    138e:	80 e1       	ldi	r24, 0x10	; 16
    1390:	69 2f       	mov	r22, r25
    1392:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Char,1));
    1396:	8f 85       	ldd	r24, Y+15	; 0x0f
    1398:	86 95       	lsr	r24
    139a:	98 2f       	mov	r25, r24
    139c:	91 70       	andi	r25, 0x01	; 1
    139e:	81 e1       	ldi	r24, 0x11	; 17
    13a0:	69 2f       	mov	r22, r25
    13a2:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Char,2));
    13a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a8:	86 95       	lsr	r24
    13aa:	86 95       	lsr	r24
    13ac:	98 2f       	mov	r25, r24
    13ae:	91 70       	andi	r25, 0x01	; 1
    13b0:	82 e1       	ldi	r24, 0x12	; 18
    13b2:	69 2f       	mov	r22, r25
    13b4:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Char,3));
    13b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ba:	86 95       	lsr	r24
    13bc:	86 95       	lsr	r24
    13be:	86 95       	lsr	r24
    13c0:	98 2f       	mov	r25, r24
    13c2:	91 70       	andi	r25, 0x01	; 1
    13c4:	83 e1       	ldi	r24, 0x13	; 19
    13c6:	69 2f       	mov	r22, r25
    13c8:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Char,4));
    13cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ce:	82 95       	swap	r24
    13d0:	8f 70       	andi	r24, 0x0F	; 15
    13d2:	98 2f       	mov	r25, r24
    13d4:	91 70       	andi	r25, 0x01	; 1
    13d6:	84 e1       	ldi	r24, 0x14	; 20
    13d8:	69 2f       	mov	r22, r25
    13da:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Char,5));
    13de:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e0:	82 95       	swap	r24
    13e2:	86 95       	lsr	r24
    13e4:	87 70       	andi	r24, 0x07	; 7
    13e6:	98 2f       	mov	r25, r24
    13e8:	91 70       	andi	r25, 0x01	; 1
    13ea:	85 e1       	ldi	r24, 0x15	; 21
    13ec:	69 2f       	mov	r22, r25
    13ee:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Char,6));
    13f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f4:	82 95       	swap	r24
    13f6:	86 95       	lsr	r24
    13f8:	86 95       	lsr	r24
    13fa:	83 70       	andi	r24, 0x03	; 3
    13fc:	98 2f       	mov	r25, r24
    13fe:	91 70       	andi	r25, 0x01	; 1
    1400:	86 e1       	ldi	r24, 0x16	; 22
    1402:	69 2f       	mov	r22, r25
    1404:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Char,7));
    1408:	8f 85       	ldd	r24, Y+15	; 0x0f
    140a:	98 2f       	mov	r25, r24
    140c:	99 1f       	adc	r25, r25
    140e:	99 27       	eor	r25, r25
    1410:	99 1f       	adc	r25, r25
    1412:	87 e1       	ldi	r24, 0x17	; 23
    1414:	69 2f       	mov	r22, r25
    1416:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH);   //EN
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e4       	ldi	r27, 0x40	; 64
    142a:	8b 87       	std	Y+11, r24	; 0x0b
    142c:	9c 87       	std	Y+12, r25	; 0x0c
    142e:	ad 87       	std	Y+13, r26	; 0x0d
    1430:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	6b 85       	ldd	r22, Y+11	; 0x0b
    1434:	7c 85       	ldd	r23, Y+12	; 0x0c
    1436:	8d 85       	ldd	r24, Y+13	; 0x0d
    1438:	9e 85       	ldd	r25, Y+14	; 0x0e
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a ef       	ldi	r20, 0xFA	; 250
    1440:	54 e4       	ldi	r21, 0x44	; 68
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8f 83       	std	Y+7, r24	; 0x07
    144c:	98 87       	std	Y+8, r25	; 0x08
    144e:	a9 87       	std	Y+9, r26	; 0x09
    1450:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1452:	6f 81       	ldd	r22, Y+7	; 0x07
    1454:	78 85       	ldd	r23, Y+8	; 0x08
    1456:	89 85       	ldd	r24, Y+9	; 0x09
    1458:	9a 85       	ldd	r25, Y+10	; 0x0a
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <Lcd_vidWriteChar+0x112>
		__ticks = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
    1472:	3f c0       	rjmp	.+126    	; 0x14f2 <Lcd_vidWriteChar+0x190>
	else if (__tmp > 65535)
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1488:	18 16       	cp	r1, r24
    148a:	4c f5       	brge	.+82     	; 0x14de <Lcd_vidWriteChar+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	6b 85       	ldd	r22, Y+11	; 0x0b
    148e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1490:	8d 85       	ldd	r24, Y+13	; 0x0d
    1492:	9e 85       	ldd	r25, Y+14	; 0x0e
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <Lcd_vidWriteChar+0x172>
    14b6:	88 ec       	ldi	r24, 0xC8	; 200
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <Lcd_vidWriteChar+0x160>
    14c6:	9c 83       	std	Y+4, r25	; 0x04
    14c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f7       	brne	.-38     	; 0x14b6 <Lcd_vidWriteChar+0x154>
    14dc:	14 c0       	rjmp	.+40     	; 0x1506 <Lcd_vidWriteChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	6f 81       	ldd	r22, Y+7	; 0x07
    14e0:	78 85       	ldd	r23, Y+8	; 0x08
    14e2:	89 85       	ldd	r24, Y+9	; 0x09
    14e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <Lcd_vidWriteChar+0x19c>
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW);   //EN
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	0e 94 e7 07 	call	0xfce	; 0xfce <Dio_vidSetPinVal>
}
    150e:	2f 96       	adiw	r28, 0x0f	; 15
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <Lcd_vidInit>:

void Lcd_vidInit(void){
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	aa 97       	sbiw	r28, 0x2a	; 42
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61

	Dio_vidSetPinDir(LCD_u8RS_PIN,DIO_u8OUTPUT);
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8RW_PIN,DIO_u8OUTPUT);
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8EN_PIN,DIO_u8OUTPUT);
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>

	Dio_vidSetPinDir(LCD_u8D0_PIN,DIO_u8OUTPUT);
    154c:	80 e1       	ldi	r24, 0x10	; 16
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D1_PIN,DIO_u8OUTPUT);
    1554:	81 e1       	ldi	r24, 0x11	; 17
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D2_PIN,DIO_u8OUTPUT);
    155c:	82 e1       	ldi	r24, 0x12	; 18
    155e:	61 e0       	ldi	r22, 0x01	; 1
    1560:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D3_PIN,DIO_u8OUTPUT);
    1564:	83 e1       	ldi	r24, 0x13	; 19
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D4_PIN,DIO_u8OUTPUT);
    156c:	84 e1       	ldi	r24, 0x14	; 20
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D5_PIN,DIO_u8OUTPUT);
    1574:	85 e1       	ldi	r24, 0x15	; 21
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D6_PIN,DIO_u8OUTPUT);
    157c:	86 e1       	ldi	r24, 0x16	; 22
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D7_PIN,DIO_u8OUTPUT);
    1584:	87 e1       	ldi	r24, 0x17	; 23
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>




	Lcd_vidSendCommand(LCD_u8_CMD_8_BIT_2x16_5x7); 	 //Function Set 8bit 2 line 5x7
    158c:	88 e3       	ldi	r24, 0x38	; 56
    158e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <Lcd_vidSendCommand>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a0 e0       	ldi	r26, 0x00	; 0
    1598:	b0 e4       	ldi	r27, 0x40	; 64
    159a:	8f a3       	std	Y+39, r24	; 0x27
    159c:	98 a7       	std	Y+40, r25	; 0x28
    159e:	a9 a7       	std	Y+41, r26	; 0x29
    15a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a2:	6f a1       	ldd	r22, Y+39	; 0x27
    15a4:	78 a5       	ldd	r23, Y+40	; 0x28
    15a6:	89 a5       	ldd	r24, Y+41	; 0x29
    15a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a ef       	ldi	r20, 0xFA	; 250
    15b0:	54 e4       	ldi	r21, 0x44	; 68
    15b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8b a3       	std	Y+35, r24	; 0x23
    15bc:	9c a3       	std	Y+36, r25	; 0x24
    15be:	ad a3       	std	Y+37, r26	; 0x25
    15c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15c2:	6b a1       	ldd	r22, Y+35	; 0x23
    15c4:	7c a1       	ldd	r23, Y+36	; 0x24
    15c6:	8d a1       	ldd	r24, Y+37	; 0x25
    15c8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <Lcd_vidInit+0xc4>
		__ticks = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9a a3       	std	Y+34, r25	; 0x22
    15e0:	89 a3       	std	Y+33, r24	; 0x21
    15e2:	3f c0       	rjmp	.+126    	; 0x1662 <Lcd_vidInit+0x142>
	else if (__tmp > 65535)
    15e4:	6b a1       	ldd	r22, Y+35	; 0x23
    15e6:	7c a1       	ldd	r23, Y+36	; 0x24
    15e8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ea:	9e a1       	ldd	r25, Y+38	; 0x26
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15f8:	18 16       	cp	r1, r24
    15fa:	4c f5       	brge	.+82     	; 0x164e <Lcd_vidInit+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fc:	6f a1       	ldd	r22, Y+39	; 0x27
    15fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1600:	89 a5       	ldd	r24, Y+41	; 0x29
    1602:	9a a5       	ldd	r25, Y+42	; 0x2a
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9a a3       	std	Y+34, r25	; 0x22
    1622:	89 a3       	std	Y+33, r24	; 0x21
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <Lcd_vidInit+0x124>
    1626:	88 ec       	ldi	r24, 0xC8	; 200
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	98 a3       	std	Y+32, r25	; 0x20
    162c:	8f 8f       	std	Y+31, r24	; 0x1f
    162e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1630:	98 a1       	ldd	r25, Y+32	; 0x20
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <Lcd_vidInit+0x112>
    1636:	98 a3       	std	Y+32, r25	; 0x20
    1638:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163a:	89 a1       	ldd	r24, Y+33	; 0x21
    163c:	9a a1       	ldd	r25, Y+34	; 0x22
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	9a a3       	std	Y+34, r25	; 0x22
    1642:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1644:	89 a1       	ldd	r24, Y+33	; 0x21
    1646:	9a a1       	ldd	r25, Y+34	; 0x22
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	69 f7       	brne	.-38     	; 0x1626 <Lcd_vidInit+0x106>
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <Lcd_vidInit+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164e:	6b a1       	ldd	r22, Y+35	; 0x23
    1650:	7c a1       	ldd	r23, Y+36	; 0x24
    1652:	8d a1       	ldd	r24, Y+37	; 0x25
    1654:	9e a1       	ldd	r25, Y+38	; 0x26
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9a a3       	std	Y+34, r25	; 0x22
    1660:	89 a3       	std	Y+33, r24	; 0x21
    1662:	89 a1       	ldd	r24, Y+33	; 0x21
    1664:	9a a1       	ldd	r25, Y+34	; 0x22
    1666:	9e 8f       	std	Y+30, r25	; 0x1e
    1668:	8d 8f       	std	Y+29, r24	; 0x1d
    166a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    166c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <Lcd_vidInit+0x14e>
    1672:	9e 8f       	std	Y+30, r25	; 0x1e
    1674:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8_CMD_DISP_ON_CURS_OFF); 	//Display ON Cursor OFF
    1676:	8c e0       	ldi	r24, 0x0C	; 12
    1678:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <Lcd_vidSendCommand>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e4       	ldi	r27, 0x40	; 64
    1684:	89 8f       	std	Y+25, r24	; 0x19
    1686:	9a 8f       	std	Y+26, r25	; 0x1a
    1688:	ab 8f       	std	Y+27, r26	; 0x1b
    168a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168c:	69 8d       	ldd	r22, Y+25	; 0x19
    168e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1690:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1692:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a ef       	ldi	r20, 0xFA	; 250
    169a:	54 e4       	ldi	r21, 0x44	; 68
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	8d 8b       	std	Y+21, r24	; 0x15
    16a6:	9e 8b       	std	Y+22, r25	; 0x16
    16a8:	af 8b       	std	Y+23, r26	; 0x17
    16aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16ac:	6d 89       	ldd	r22, Y+21	; 0x15
    16ae:	7e 89       	ldd	r23, Y+22	; 0x16
    16b0:	8f 89       	ldd	r24, Y+23	; 0x17
    16b2:	98 8d       	ldd	r25, Y+24	; 0x18
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e8       	ldi	r20, 0x80	; 128
    16ba:	5f e3       	ldi	r21, 0x3F	; 63
    16bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c0:	88 23       	and	r24, r24
    16c2:	2c f4       	brge	.+10     	; 0x16ce <Lcd_vidInit+0x1ae>
		__ticks = 1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9c 8b       	std	Y+20, r25	; 0x14
    16ca:	8b 8b       	std	Y+19, r24	; 0x13
    16cc:	3f c0       	rjmp	.+126    	; 0x174c <Lcd_vidInit+0x22c>
	else if (__tmp > 65535)
    16ce:	6d 89       	ldd	r22, Y+21	; 0x15
    16d0:	7e 89       	ldd	r23, Y+22	; 0x16
    16d2:	8f 89       	ldd	r24, Y+23	; 0x17
    16d4:	98 8d       	ldd	r25, Y+24	; 0x18
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	4c f5       	brge	.+82     	; 0x1738 <Lcd_vidInit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e6:	69 8d       	ldd	r22, Y+25	; 0x19
    16e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9c 8b       	std	Y+20, r25	; 0x14
    170c:	8b 8b       	std	Y+19, r24	; 0x13
    170e:	0f c0       	rjmp	.+30     	; 0x172e <Lcd_vidInit+0x20e>
    1710:	88 ec       	ldi	r24, 0xC8	; 200
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9a 8b       	std	Y+18, r25	; 0x12
    1716:	89 8b       	std	Y+17, r24	; 0x11
    1718:	89 89       	ldd	r24, Y+17	; 0x11
    171a:	9a 89       	ldd	r25, Y+18	; 0x12
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <Lcd_vidInit+0x1fc>
    1720:	9a 8b       	std	Y+18, r25	; 0x12
    1722:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	8b 89       	ldd	r24, Y+19	; 0x13
    1726:	9c 89       	ldd	r25, Y+20	; 0x14
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	9c 8b       	std	Y+20, r25	; 0x14
    172c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172e:	8b 89       	ldd	r24, Y+19	; 0x13
    1730:	9c 89       	ldd	r25, Y+20	; 0x14
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	69 f7       	brne	.-38     	; 0x1710 <Lcd_vidInit+0x1f0>
    1736:	14 c0       	rjmp	.+40     	; 0x1760 <Lcd_vidInit+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	6d 89       	ldd	r22, Y+21	; 0x15
    173a:	7e 89       	ldd	r23, Y+22	; 0x16
    173c:	8f 89       	ldd	r24, Y+23	; 0x17
    173e:	98 8d       	ldd	r25, Y+24	; 0x18
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9c 8b       	std	Y+20, r25	; 0x14
    174a:	8b 8b       	std	Y+19, r24	; 0x13
    174c:	8b 89       	ldd	r24, Y+19	; 0x13
    174e:	9c 89       	ldd	r25, Y+20	; 0x14
    1750:	98 8b       	std	Y+16, r25	; 0x10
    1752:	8f 87       	std	Y+15, r24	; 0x0f
    1754:	8f 85       	ldd	r24, Y+15	; 0x0f
    1756:	98 89       	ldd	r25, Y+16	; 0x10
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <Lcd_vidInit+0x238>
    175c:	98 8b       	std	Y+16, r25	; 0x10
    175e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8_CMD_CLR_DISPLAY);	//Clear Display
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <Lcd_vidSendCommand>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 e0       	ldi	r26, 0x00	; 0
    176c:	b0 e4       	ldi	r27, 0x40	; 64
    176e:	8b 87       	std	Y+11, r24	; 0x0b
    1770:	9c 87       	std	Y+12, r25	; 0x0c
    1772:	ad 87       	std	Y+13, r26	; 0x0d
    1774:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1776:	6b 85       	ldd	r22, Y+11	; 0x0b
    1778:	7c 85       	ldd	r23, Y+12	; 0x0c
    177a:	8d 85       	ldd	r24, Y+13	; 0x0d
    177c:	9e 85       	ldd	r25, Y+14	; 0x0e
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	4a ef       	ldi	r20, 0xFA	; 250
    1784:	54 e4       	ldi	r21, 0x44	; 68
    1786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	8f 83       	std	Y+7, r24	; 0x07
    1790:	98 87       	std	Y+8, r25	; 0x08
    1792:	a9 87       	std	Y+9, r26	; 0x09
    1794:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1796:	6f 81       	ldd	r22, Y+7	; 0x07
    1798:	78 85       	ldd	r23, Y+8	; 0x08
    179a:	89 85       	ldd	r24, Y+9	; 0x09
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e8       	ldi	r20, 0x80	; 128
    17a4:	5f e3       	ldi	r21, 0x3F	; 63
    17a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <Lcd_vidInit+0x298>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	3f c0       	rjmp	.+126    	; 0x1836 <Lcd_vidInit+0x316>
	else if (__tmp > 65535)
    17b8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ba:	78 85       	ldd	r23, Y+8	; 0x08
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	3f ef       	ldi	r19, 0xFF	; 255
    17c4:	4f e7       	ldi	r20, 0x7F	; 127
    17c6:	57 e4       	ldi	r21, 0x47	; 71
    17c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17cc:	18 16       	cp	r1, r24
    17ce:	4c f5       	brge	.+82     	; 0x1822 <Lcd_vidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e2       	ldi	r20, 0x20	; 32
    17de:	51 e4       	ldi	r21, 0x41	; 65
    17e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <Lcd_vidInit+0x2f8>
    17fa:	88 ec       	ldi	r24, 0xC8	; 200
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9c 83       	std	Y+4, r25	; 0x04
    1800:	8b 83       	std	Y+3, r24	; 0x03
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <Lcd_vidInit+0x2e6>
    180a:	9c 83       	std	Y+4, r25	; 0x04
    180c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	69 f7       	brne	.-38     	; 0x17fa <Lcd_vidInit+0x2da>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <Lcd_vidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <Lcd_vidInit+0x322>
    1846:	9a 83       	std	Y+2, r25	; 0x02
    1848:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    184a:	aa 96       	adiw	r28, 0x2a	; 42
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <Lcd_MoveCursor>:

void Lcd_MoveCursor(u8 Pos){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <Lcd_MoveCursor+0x6>
    1862:	0f 92       	push	r0
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0; i<Pos; i++){
    186a:	1a 82       	std	Y+2, r1	; 0x02
    186c:	19 82       	std	Y+1, r1	; 0x01
    186e:	08 c0       	rjmp	.+16     	; 0x1880 <Lcd_MoveCursor+0x24>
		Lcd_vidSendCommand(16);
    1870:	80 e1       	ldi	r24, 0x10	; 16
    1872:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <Lcd_vidSendCommand>
	Lcd_vidSendCommand(LCD_u8_CMD_CLR_DISPLAY);	//Clear Display
	_delay_ms(2);
}

void Lcd_MoveCursor(u8 Pos){
	for(int i=0; i<Pos; i++){
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	9a 81       	ldd	r25, Y+2	; 0x02
    188a:	82 17       	cp	r24, r18
    188c:	93 07       	cpc	r25, r19
    188e:	84 f3       	brlt	.-32     	; 0x1870 <Lcd_MoveCursor+0x14>
		Lcd_vidSendCommand(16);
	}
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <main>:
f32 Ton,Toff,Ttot;
f32 freq,Duty;
void init(void);
ISR(TIMER1_OVF_vect);
ISR(TIMER1_CAPT_vect);
int main(void){
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	65 97       	sbiw	r28, 0x15	; 21
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
	u8 word[10]={'F','r','e','q','='};
    18b0:	8a e0       	ldi	r24, 0x0A	; 10
    18b2:	fe 01       	movw	r30, r28
    18b4:	32 96       	adiw	r30, 0x02	; 2
    18b6:	df 01       	movw	r26, r30
    18b8:	98 2f       	mov	r25, r24
    18ba:	1d 92       	st	X+, r1
    18bc:	9a 95       	dec	r25
    18be:	e9 f7       	brne	.-6      	; 0x18ba <main+0x1e>
    18c0:	86 e4       	ldi	r24, 0x46	; 70
    18c2:	8a 83       	std	Y+2, r24	; 0x02
    18c4:	82 e7       	ldi	r24, 0x72	; 114
    18c6:	8b 83       	std	Y+3, r24	; 0x03
    18c8:	85 e6       	ldi	r24, 0x65	; 101
    18ca:	8c 83       	std	Y+4, r24	; 0x04
    18cc:	81 e7       	ldi	r24, 0x71	; 113
    18ce:	8d 83       	std	Y+5, r24	; 0x05
    18d0:	8d e3       	ldi	r24, 0x3D	; 61
    18d2:	8e 83       	std	Y+6, r24	; 0x06
	u8 word1[10]={'D','u','t','y'};
    18d4:	8a e0       	ldi	r24, 0x0A	; 10
    18d6:	fe 01       	movw	r30, r28
    18d8:	3c 96       	adiw	r30, 0x0c	; 12
    18da:	df 01       	movw	r26, r30
    18dc:	98 2f       	mov	r25, r24
    18de:	1d 92       	st	X+, r1
    18e0:	9a 95       	dec	r25
    18e2:	e9 f7       	brne	.-6      	; 0x18de <main+0x42>
    18e4:	84 e4       	ldi	r24, 0x44	; 68
    18e6:	8c 87       	std	Y+12, r24	; 0x0c
    18e8:	85 e7       	ldi	r24, 0x75	; 117
    18ea:	8d 87       	std	Y+13, r24	; 0x0d
    18ec:	84 e7       	ldi	r24, 0x74	; 116
    18ee:	8e 87       	std	Y+14, r24	; 0x0e
    18f0:	89 e7       	ldi	r24, 0x79	; 121
    18f2:	8f 87       	std	Y+15, r24	; 0x0f
	u8 i;
	Lcd_vidInit();
    18f4:	0e 94 90 0a 	call	0x1520	; 0x1520 <Lcd_vidInit>
	init();
    18f8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <init>
	while(1){

		Ttot=Ton+Toff;
    18fc:	80 91 68 01 	lds	r24, 0x0168
    1900:	90 91 69 01 	lds	r25, 0x0169
    1904:	a0 91 6a 01 	lds	r26, 0x016A
    1908:	b0 91 6b 01 	lds	r27, 0x016B
    190c:	20 91 70 01 	lds	r18, 0x0170
    1910:	30 91 71 01 	lds	r19, 0x0171
    1914:	40 91 72 01 	lds	r20, 0x0172
    1918:	50 91 73 01 	lds	r21, 0x0173
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	80 93 6c 01 	sts	0x016C, r24
    192c:	90 93 6d 01 	sts	0x016D, r25
    1930:	a0 93 6e 01 	sts	0x016E, r26
    1934:	b0 93 6f 01 	sts	0x016F, r27
		freq=(f32)1/Ttot;
    1938:	20 91 6c 01 	lds	r18, 0x016C
    193c:	30 91 6d 01 	lds	r19, 0x016D
    1940:	40 91 6e 01 	lds	r20, 0x016E
    1944:	50 91 6f 01 	lds	r21, 0x016F
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	9f e3       	ldi	r25, 0x3F	; 63
    1950:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	80 93 74 01 	sts	0x0174, r24
    195c:	90 93 75 01 	sts	0x0175, r25
    1960:	a0 93 76 01 	sts	0x0176, r26
    1964:	b0 93 77 01 	sts	0x0177, r27
		Duty=(Ton*(f32)100)/Ttot;
    1968:	80 91 68 01 	lds	r24, 0x0168
    196c:	90 91 69 01 	lds	r25, 0x0169
    1970:	a0 91 6a 01 	lds	r26, 0x016A
    1974:	b0 91 6b 01 	lds	r27, 0x016B
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	48 ec       	ldi	r20, 0xC8	; 200
    1982:	52 e4       	ldi	r21, 0x42	; 66
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	20 91 6c 01 	lds	r18, 0x016C
    1990:	30 91 6d 01 	lds	r19, 0x016D
    1994:	40 91 6e 01 	lds	r20, 0x016E
    1998:	50 91 6f 01 	lds	r21, 0x016F
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	80 93 7c 01 	sts	0x017C, r24
    19ac:	90 93 7d 01 	sts	0x017D, r25
    19b0:	a0 93 7e 01 	sts	0x017E, r26
    19b4:	b0 93 7f 01 	sts	0x017F, r27
		Lcd_vidSendCommand(0x80);
    19b8:	80 e8       	ldi	r24, 0x80	; 128
    19ba:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <Lcd_vidSendCommand>
		for(i=0; i<5; i++){
    19be:	19 82       	std	Y+1, r1	; 0x01
    19c0:	0e c0       	rjmp	.+28     	; 0x19de <main+0x142>
			Lcd_vidWriteChar(word[i]);
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	ce 01       	movw	r24, r28
    19ca:	02 96       	adiw	r24, 0x02	; 2
    19cc:	fc 01       	movw	r30, r24
    19ce:	e2 0f       	add	r30, r18
    19d0:	f3 1f       	adc	r31, r19
    19d2:	80 81       	ld	r24, Z
    19d4:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>

		Ttot=Ton+Toff;
		freq=(f32)1/Ttot;
		Duty=(Ton*(f32)100)/Ttot;
		Lcd_vidSendCommand(0x80);
		for(i=0; i<5; i++){
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	85 30       	cpi	r24, 0x05	; 5
    19e2:	78 f3       	brcs	.-34     	; 0x19c2 <main+0x126>
			Lcd_vidWriteChar(word[i]);
		}
		//FREQUENCY
		Lcd_vidWriteChar(((u8)freq/100)+'0');
    19e4:	80 91 74 01 	lds	r24, 0x0174
    19e8:	90 91 75 01 	lds	r25, 0x0175
    19ec:	a0 91 76 01 	lds	r26, 0x0176
    19f0:	b0 91 77 01 	lds	r27, 0x0177
    19f4:	bc 01       	movw	r22, r24
    19f6:	cd 01       	movw	r24, r26
    19f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	94 e6       	ldi	r25, 0x64	; 100
    1a02:	69 2f       	mov	r22, r25
    1a04:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodqi4>
    1a08:	80 5d       	subi	r24, 0xD0	; 208
    1a0a:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>
		Lcd_vidWriteChar((((u8)freq%100)/10)+'0');
    1a0e:	80 91 74 01 	lds	r24, 0x0174
    1a12:	90 91 75 01 	lds	r25, 0x0175
    1a16:	a0 91 76 01 	lds	r26, 0x0176
    1a1a:	b0 91 77 01 	lds	r27, 0x0177
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	94 e6       	ldi	r25, 0x64	; 100
    1a2c:	69 2f       	mov	r22, r25
    1a2e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodqi4>
    1a32:	89 2f       	mov	r24, r25
    1a34:	9a e0       	ldi	r25, 0x0A	; 10
    1a36:	69 2f       	mov	r22, r25
    1a38:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodqi4>
    1a3c:	80 5d       	subi	r24, 0xD0	; 208
    1a3e:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>
		Lcd_vidWriteChar((((u8)freq%100)%10)+'0');
    1a42:	80 91 74 01 	lds	r24, 0x0174
    1a46:	90 91 75 01 	lds	r25, 0x0175
    1a4a:	a0 91 76 01 	lds	r26, 0x0176
    1a4e:	b0 91 77 01 	lds	r27, 0x0177
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	94 e6       	ldi	r25, 0x64	; 100
    1a60:	69 2f       	mov	r22, r25
    1a62:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodqi4>
    1a66:	89 2f       	mov	r24, r25
    1a68:	9a e0       	ldi	r25, 0x0A	; 10
    1a6a:	69 2f       	mov	r22, r25
    1a6c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodqi4>
    1a70:	89 2f       	mov	r24, r25
    1a72:	80 5d       	subi	r24, 0xD0	; 208
    1a74:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>
		Lcd_vidWriteChar('H');
    1a78:	88 e4       	ldi	r24, 0x48	; 72
    1a7a:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>
		Lcd_vidWriteChar('Z');
    1a7e:	8a e5       	ldi	r24, 0x5A	; 90
    1a80:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>

		//DUTY CYCLE
		Lcd_vidSendCommand(0xC0);
    1a84:	80 ec       	ldi	r24, 0xC0	; 192
    1a86:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <Lcd_vidSendCommand>
		for(i=0; i<4; i++){
    1a8a:	19 82       	std	Y+1, r1	; 0x01
    1a8c:	0e c0       	rjmp	.+28     	; 0x1aaa <main+0x20e>
			Lcd_vidWriteChar(word1[i]);
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	ce 01       	movw	r24, r28
    1a96:	0c 96       	adiw	r24, 0x0c	; 12
    1a98:	fc 01       	movw	r30, r24
    1a9a:	e2 0f       	add	r30, r18
    1a9c:	f3 1f       	adc	r31, r19
    1a9e:	80 81       	ld	r24, Z
    1aa0:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>
		Lcd_vidWriteChar('H');
		Lcd_vidWriteChar('Z');

		//DUTY CYCLE
		Lcd_vidSendCommand(0xC0);
		for(i=0; i<4; i++){
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	8f 5f       	subi	r24, 0xFF	; 255
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	84 30       	cpi	r24, 0x04	; 4
    1aae:	78 f3       	brcs	.-34     	; 0x1a8e <main+0x1f2>
			Lcd_vidWriteChar(word1[i]);
		}
		Lcd_vidWriteChar(((u8)Duty/100)+'0');
    1ab0:	80 91 7c 01 	lds	r24, 0x017C
    1ab4:	90 91 7d 01 	lds	r25, 0x017D
    1ab8:	a0 91 7e 01 	lds	r26, 0x017E
    1abc:	b0 91 7f 01 	lds	r27, 0x017F
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	94 e6       	ldi	r25, 0x64	; 100
    1ace:	69 2f       	mov	r22, r25
    1ad0:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodqi4>
    1ad4:	80 5d       	subi	r24, 0xD0	; 208
    1ad6:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>
		Lcd_vidWriteChar((((u8)Duty%100)/10)+'0');
    1ada:	80 91 7c 01 	lds	r24, 0x017C
    1ade:	90 91 7d 01 	lds	r25, 0x017D
    1ae2:	a0 91 7e 01 	lds	r26, 0x017E
    1ae6:	b0 91 7f 01 	lds	r27, 0x017F
    1aea:	bc 01       	movw	r22, r24
    1aec:	cd 01       	movw	r24, r26
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	94 e6       	ldi	r25, 0x64	; 100
    1af8:	69 2f       	mov	r22, r25
    1afa:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodqi4>
    1afe:	89 2f       	mov	r24, r25
    1b00:	9a e0       	ldi	r25, 0x0A	; 10
    1b02:	69 2f       	mov	r22, r25
    1b04:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodqi4>
    1b08:	80 5d       	subi	r24, 0xD0	; 208
    1b0a:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>
		Lcd_vidWriteChar((((u8)Duty%100)%10)+'0');
    1b0e:	80 91 7c 01 	lds	r24, 0x017C
    1b12:	90 91 7d 01 	lds	r25, 0x017D
    1b16:	a0 91 7e 01 	lds	r26, 0x017E
    1b1a:	b0 91 7f 01 	lds	r27, 0x017F
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	94 e6       	ldi	r25, 0x64	; 100
    1b2c:	69 2f       	mov	r22, r25
    1b2e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodqi4>
    1b32:	89 2f       	mov	r24, r25
    1b34:	9a e0       	ldi	r25, 0x0A	; 10
    1b36:	69 2f       	mov	r22, r25
    1b38:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodqi4>
    1b3c:	89 2f       	mov	r24, r25
    1b3e:	80 5d       	subi	r24, 0xD0	; 208
    1b40:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>
		Lcd_vidWriteChar('%');
    1b44:	85 e2       	ldi	r24, 0x25	; 37
    1b46:	0e 94 b1 09 	call	0x1362	; 0x1362 <Lcd_vidWriteChar>
    1b4a:	d8 ce       	rjmp	.-592    	; 0x18fc <main+0x60>

00001b4c <__vector_9>:
	}
	return 0;
}


ISR(TIMER1_OVF_vect){
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	8f 93       	push	r24
    1b58:	9f 93       	push	r25
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
	OVF_count++;
    1b62:	80 91 7a 01 	lds	r24, 0x017A
    1b66:	90 91 7b 01 	lds	r25, 0x017B
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	90 93 7b 01 	sts	0x017B, r25
    1b70:	80 93 7a 01 	sts	0x017A, r24
}
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	9f 91       	pop	r25
    1b7a:	8f 91       	pop	r24
    1b7c:	0f 90       	pop	r0
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	0f 90       	pop	r0
    1b82:	1f 90       	pop	r1
    1b84:	18 95       	reti

00001b86 <__vector_6>:
ISR(TIMER1_CAPT_vect){
    1b86:	1f 92       	push	r1
    1b88:	0f 92       	push	r0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	0f 92       	push	r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	2f 93       	push	r18
    1b92:	3f 93       	push	r19
    1b94:	4f 93       	push	r20
    1b96:	5f 93       	push	r21
    1b98:	6f 93       	push	r22
    1b9a:	7f 93       	push	r23
    1b9c:	8f 93       	push	r24
    1b9e:	9f 93       	push	r25
    1ba0:	af 93       	push	r26
    1ba2:	bf 93       	push	r27
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
	if(first_Reading==0){
    1bb0:	80 91 79 01 	lds	r24, 0x0179
    1bb4:	88 23       	and	r24, r24
    1bb6:	b1 f4       	brne	.+44     	; 0x1be4 <__vector_6+0x5e>
		TCNT1=0;
    1bb8:	ec e4       	ldi	r30, 0x4C	; 76
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	11 82       	std	Z+1, r1	; 0x01
    1bbe:	10 82       	st	Z, r1
		CLR_BIT(TCCR1B,6);
    1bc0:	ae e4       	ldi	r26, 0x4E	; 78
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	ee e4       	ldi	r30, 0x4E	; 78
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	8f 7b       	andi	r24, 0xBF	; 191
    1bcc:	8c 93       	st	X, r24
		state=1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	80 93 78 01 	sts	0x0178, r24
		OVF_count=0;
    1bd4:	10 92 7b 01 	sts	0x017B, r1
    1bd8:	10 92 7a 01 	sts	0x017A, r1
		first_Reading = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	80 93 79 01 	sts	0x0179, r24
    1be2:	83 c0       	rjmp	.+262    	; 0x1cea <__vector_6+0x164>
	}
	else {
		if(state==1){
    1be4:	80 91 78 01 	lds	r24, 0x0178
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	09 f0       	breq	.+2      	; 0x1bee <__vector_6+0x68>
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <__vector_6+0xe6>
			TCNT1=0;
    1bee:	ec e4       	ldi	r30, 0x4C	; 76
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	11 82       	std	Z+1, r1	; 0x01
    1bf4:	10 82       	st	Z, r1
			SET_BIT(TCCR1B,6);
    1bf6:	ae e4       	ldi	r26, 0x4E	; 78
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	ee e4       	ldi	r30, 0x4E	; 78
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 64       	ori	r24, 0x40	; 64
    1c02:	8c 93       	st	X, r24
			Ton=(f32)(ICR1+(65536*OVF_count))/(f32)8000000;
    1c04:	e6 e4       	ldi	r30, 0x46	; 70
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	9c 01       	movw	r18, r24
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	80 91 7a 01 	lds	r24, 0x017A
    1c16:	90 91 7b 01 	lds	r25, 0x017B
    1c1a:	cc 01       	movw	r24, r24
    1c1c:	a0 e0       	ldi	r26, 0x00	; 0
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	dc 01       	movw	r26, r24
    1c22:	99 27       	eor	r25, r25
    1c24:	88 27       	eor	r24, r24
    1c26:	82 0f       	add	r24, r18
    1c28:	93 1f       	adc	r25, r19
    1c2a:	a4 1f       	adc	r26, r20
    1c2c:	b5 1f       	adc	r27, r21
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	34 e2       	ldi	r19, 0x24	; 36
    1c42:	44 ef       	ldi	r20, 0xF4	; 244
    1c44:	5a e4       	ldi	r21, 0x4A	; 74
    1c46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	80 93 68 01 	sts	0x0168, r24
    1c52:	90 93 69 01 	sts	0x0169, r25
    1c56:	a0 93 6a 01 	sts	0x016A, r26
    1c5a:	b0 93 6b 01 	sts	0x016B, r27
			state=0;
    1c5e:	10 92 78 01 	sts	0x0178, r1
			OVF_count=0;
    1c62:	10 92 7b 01 	sts	0x017B, r1
    1c66:	10 92 7a 01 	sts	0x017A, r1
    1c6a:	3f c0       	rjmp	.+126    	; 0x1cea <__vector_6+0x164>
		}
		else {
			TCNT1=0;
    1c6c:	ec e4       	ldi	r30, 0x4C	; 76
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	11 82       	std	Z+1, r1	; 0x01
    1c72:	10 82       	st	Z, r1
			CLR_BIT(TCCR1B,6);
    1c74:	ae e4       	ldi	r26, 0x4E	; 78
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ee e4       	ldi	r30, 0x4E	; 78
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8f 7b       	andi	r24, 0xBF	; 191
    1c80:	8c 93       	st	X, r24
			Toff=(f32)(ICR1+(65536*OVF_count))/(f32)8000000;
    1c82:	e6 e4       	ldi	r30, 0x46	; 70
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	9c 01       	movw	r18, r24
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	80 91 7a 01 	lds	r24, 0x017A
    1c94:	90 91 7b 01 	lds	r25, 0x017B
    1c98:	cc 01       	movw	r24, r24
    1c9a:	a0 e0       	ldi	r26, 0x00	; 0
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	99 27       	eor	r25, r25
    1ca2:	88 27       	eor	r24, r24
    1ca4:	82 0f       	add	r24, r18
    1ca6:	93 1f       	adc	r25, r19
    1ca8:	a4 1f       	adc	r26, r20
    1caa:	b5 1f       	adc	r27, r21
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	bc 01       	movw	r22, r24
    1cba:	cd 01       	movw	r24, r26
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	34 e2       	ldi	r19, 0x24	; 36
    1cc0:	44 ef       	ldi	r20, 0xF4	; 244
    1cc2:	5a e4       	ldi	r21, 0x4A	; 74
    1cc4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	80 93 70 01 	sts	0x0170, r24
    1cd0:	90 93 71 01 	sts	0x0171, r25
    1cd4:	a0 93 72 01 	sts	0x0172, r26
    1cd8:	b0 93 73 01 	sts	0x0173, r27
			state=1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	80 93 78 01 	sts	0x0178, r24
			OVF_count=0;
    1ce2:	10 92 7b 01 	sts	0x017B, r1
    1ce6:	10 92 7a 01 	sts	0x017A, r1
		}
	}
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	ff 91       	pop	r31
    1cf0:	ef 91       	pop	r30
    1cf2:	bf 91       	pop	r27
    1cf4:	af 91       	pop	r26
    1cf6:	9f 91       	pop	r25
    1cf8:	8f 91       	pop	r24
    1cfa:	7f 91       	pop	r23
    1cfc:	6f 91       	pop	r22
    1cfe:	5f 91       	pop	r21
    1d00:	4f 91       	pop	r20
    1d02:	3f 91       	pop	r19
    1d04:	2f 91       	pop	r18
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	0f 90       	pop	r0
    1d0c:	1f 90       	pop	r1
    1d0e:	18 95       	reti

00001d10 <init>:

void init(void){
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,1);//	NORMAL
    1d18:	af e4       	ldi	r26, 0x4F	; 79
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	ef e4       	ldi	r30, 0x4F	; 79
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	8d 7f       	andi	r24, 0xFD	; 253
    1d24:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);//	MODE
    1d26:	af e4       	ldi	r26, 0x4F	; 79
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ef e4       	ldi	r30, 0x4F	; 79
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	8e 7f       	andi	r24, 0xFE	; 254
    1d32:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);//	NORMAL
    1d34:	ae e4       	ldi	r26, 0x4E	; 78
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	ee e4       	ldi	r30, 0x4E	; 78
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	87 7f       	andi	r24, 0xF7	; 247
    1d40:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);//	MODE
    1d42:	ae e4       	ldi	r26, 0x4E	; 78
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	ee e4       	ldi	r30, 0x4E	; 78
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8f 7e       	andi	r24, 0xEF	; 239
    1d4e:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,6);//INPUT CAPTURE EDGE SELECT(RISING EDGE IF SET, FALLING EDGE IF CLEARED)
    1d50:	ae e4       	ldi	r26, 0x4E	; 78
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	ee e4       	ldi	r30, 0x4E	; 78
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 64       	ori	r24, 0x40	; 64
    1d5c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);//	NO
    1d5e:	ae e4       	ldi	r26, 0x4E	; 78
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	ee e4       	ldi	r30, 0x4E	; 78
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	8b 7f       	andi	r24, 0xFB	; 251
    1d6a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,1);//	PRESCALER
    1d6c:	ae e4       	ldi	r26, 0x4E	; 78
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ee e4       	ldi	r30, 0x4E	; 78
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8d 7f       	andi	r24, 0xFD	; 253
    1d78:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,0);//	USED
    1d7a:	ae e4       	ldi	r26, 0x4E	; 78
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	ee e4       	ldi	r30, 0x4E	; 78
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	81 60       	ori	r24, 0x01	; 1
    1d86:	8c 93       	st	X, r24

	SET_BIT(TIMSK,5);//ENABLE INPUT CATPURE INTERRUPT
    1d88:	a9 e5       	ldi	r26, 0x59	; 89
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e9 e5       	ldi	r30, 0x59	; 89
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	80 62       	ori	r24, 0x20	; 32
    1d94:	8c 93       	st	X, r24
	SET_BIT(TIMSK,2);//ENABLE OVERFLOW INTERRUPT
    1d96:	a9 e5       	ldi	r26, 0x59	; 89
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e9 e5       	ldi	r30, 0x59	; 89
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	84 60       	ori	r24, 0x04	; 4
    1da2:	8c 93       	st	X, r24


	SET_BIT(SREG,7);//ENABLING GLOBAL INTERRUPTS
    1da4:	af e5       	ldi	r26, 0x5F	; 95
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	ef e5       	ldi	r30, 0x5F	; 95
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	80 68       	ori	r24, 0x80	; 128
    1db0:	8c 93       	st	X, r24

	Dio_vidSetPinDir(DIO_u8PIN_30,DIO_u8INPUT);
    1db2:	8e e1       	ldi	r24, 0x1E	; 30
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Dio_vidSetPinDir>
}
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <__udivmodqi4>:
    1dc0:	99 1b       	sub	r25, r25
    1dc2:	79 e0       	ldi	r23, 0x09	; 9
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <__udivmodqi4_ep>

00001dc6 <__udivmodqi4_loop>:
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	96 17       	cp	r25, r22
    1dca:	08 f0       	brcs	.+2      	; 0x1dce <__udivmodqi4_ep>
    1dcc:	96 1b       	sub	r25, r22

00001dce <__udivmodqi4_ep>:
    1dce:	88 1f       	adc	r24, r24
    1dd0:	7a 95       	dec	r23
    1dd2:	c9 f7       	brne	.-14     	; 0x1dc6 <__udivmodqi4_loop>
    1dd4:	80 95       	com	r24
    1dd6:	08 95       	ret

00001dd8 <__prologue_saves__>:
    1dd8:	2f 92       	push	r2
    1dda:	3f 92       	push	r3
    1ddc:	4f 92       	push	r4
    1dde:	5f 92       	push	r5
    1de0:	6f 92       	push	r6
    1de2:	7f 92       	push	r7
    1de4:	8f 92       	push	r8
    1de6:	9f 92       	push	r9
    1de8:	af 92       	push	r10
    1dea:	bf 92       	push	r11
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	ca 1b       	sub	r28, r26
    1e02:	db 0b       	sbc	r29, r27
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	09 94       	ijmp

00001e10 <__epilogue_restores__>:
    1e10:	2a 88       	ldd	r2, Y+18	; 0x12
    1e12:	39 88       	ldd	r3, Y+17	; 0x11
    1e14:	48 88       	ldd	r4, Y+16	; 0x10
    1e16:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e18:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e20:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e22:	b9 84       	ldd	r11, Y+9	; 0x09
    1e24:	c8 84       	ldd	r12, Y+8	; 0x08
    1e26:	df 80       	ldd	r13, Y+7	; 0x07
    1e28:	ee 80       	ldd	r14, Y+6	; 0x06
    1e2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e2c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e2e:	1b 81       	ldd	r17, Y+3	; 0x03
    1e30:	aa 81       	ldd	r26, Y+2	; 0x02
    1e32:	b9 81       	ldd	r27, Y+1	; 0x01
    1e34:	ce 0f       	add	r28, r30
    1e36:	d1 1d       	adc	r29, r1
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	ed 01       	movw	r28, r26
    1e44:	08 95       	ret

00001e46 <_exit>:
    1e46:	f8 94       	cli

00001e48 <__stop_program>:
    1e48:	ff cf       	rjmp	.-2      	; 0x1e48 <__stop_program>
