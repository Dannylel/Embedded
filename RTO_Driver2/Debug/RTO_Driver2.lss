
RTO_Driver2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000014  00800060  00800060  00000a82  2**0
                  ALLOC
  2 .stab         00000e04  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b56  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 c3 04 	jmp	0x986	; 0x986 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <main>
  74:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_vidSetPinDir>:
#include"../Lib/Std_types.h"
#include"../Lib/Bit_math.h"
#include"Dio_Priv.h"
#include"Dio_int.h"

void Dio_vidSetPinDir(u8 Pin, u8 Dir){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <Dio_vidSetPinDir+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <Dio_vidSetPinDir+0x8>
  84:	00 d0       	rcall	.+0      	; 0x86 <Dio_vidSetPinDir+0xa>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8b 83       	std	Y+3, r24	; 0x03
  8c:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
  8e:	8b 81       	ldd	r24, Y+3	; 0x03
  90:	86 95       	lsr	r24
  92:	86 95       	lsr	r24
  94:	86 95       	lsr	r24
  96:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	87 70       	andi	r24, 0x07	; 7
  9c:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
  9e:	8a 81       	ldd	r24, Y+2	; 0x02
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	3e 83       	std	Y+6, r19	; 0x06
  a6:	2d 83       	std	Y+5, r18	; 0x05
  a8:	8d 81       	ldd	r24, Y+5	; 0x05
  aa:	9e 81       	ldd	r25, Y+6	; 0x06
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	09 f4       	brne	.+2      	; 0xb4 <Dio_vidSetPinDir+0x38>
  b2:	43 c0       	rjmp	.+134    	; 0x13a <Dio_vidSetPinDir+0xbe>
  b4:	2d 81       	ldd	r18, Y+5	; 0x05
  b6:	3e 81       	ldd	r19, Y+6	; 0x06
  b8:	22 30       	cpi	r18, 0x02	; 2
  ba:	31 05       	cpc	r19, r1
  bc:	2c f4       	brge	.+10     	; 0xc8 <Dio_vidSetPinDir+0x4c>
  be:	8d 81       	ldd	r24, Y+5	; 0x05
  c0:	9e 81       	ldd	r25, Y+6	; 0x06
  c2:	00 97       	sbiw	r24, 0x00	; 0
  c4:	71 f0       	breq	.+28     	; 0xe2 <Dio_vidSetPinDir+0x66>
  c6:	bc c0       	rjmp	.+376    	; 0x240 <Dio_vidSetPinDir+0x1c4>
  c8:	2d 81       	ldd	r18, Y+5	; 0x05
  ca:	3e 81       	ldd	r19, Y+6	; 0x06
  cc:	22 30       	cpi	r18, 0x02	; 2
  ce:	31 05       	cpc	r19, r1
  d0:	09 f4       	brne	.+2      	; 0xd4 <Dio_vidSetPinDir+0x58>
  d2:	5f c0       	rjmp	.+190    	; 0x192 <Dio_vidSetPinDir+0x116>
  d4:	8d 81       	ldd	r24, Y+5	; 0x05
  d6:	9e 81       	ldd	r25, Y+6	; 0x06
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	91 05       	cpc	r25, r1
  dc:	09 f4       	brne	.+2      	; 0xe0 <Dio_vidSetPinDir+0x64>
  de:	85 c0       	rjmp	.+266    	; 0x1ea <Dio_vidSetPinDir+0x16e>
  e0:	af c0       	rjmp	.+350    	; 0x240 <Dio_vidSetPinDir+0x1c4>
	case 0:	//DDRA
		if(Dir==1){
  e2:	8c 81       	ldd	r24, Y+4	; 0x04
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	a1 f4       	brne	.+40     	; 0x110 <Dio_vidSetPinDir+0x94>
			SET_BIT(DDRA.Byte,PinLoc);
  e8:	aa e3       	ldi	r26, 0x3A	; 58
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	ea e3       	ldi	r30, 0x3A	; 58
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <Dio_vidSetPinDir+0x8a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <Dio_vidSetPinDir+0x86>
 10a:	84 2b       	or	r24, r20
 10c:	8c 93       	st	X, r24
 10e:	98 c0       	rjmp	.+304    	; 0x240 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRA.Byte,PinLoc);
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	ea e3       	ldi	r30, 0x3A	; 58
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	48 2f       	mov	r20, r24
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	28 2f       	mov	r18, r24
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 2e       	mov	r0, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <Dio_vidSetPinDir+0xb2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <Dio_vidSetPinDir+0xae>
 132:	80 95       	com	r24
 134:	84 23       	and	r24, r20
 136:	8c 93       	st	X, r24
 138:	83 c0       	rjmp	.+262    	; 0x240 <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 1:	//DDRB
		if(Dir==1){
 13a:	8c 81       	ldd	r24, Y+4	; 0x04
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	a1 f4       	brne	.+40     	; 0x168 <Dio_vidSetPinDir+0xec>
			SET_BIT(DDRB.Byte,PinLoc);
 140:	a7 e3       	ldi	r26, 0x37	; 55
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e7 e3       	ldi	r30, 0x37	; 55
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <Dio_vidSetPinDir+0xe2>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <Dio_vidSetPinDir+0xde>
 162:	84 2b       	or	r24, r20
 164:	8c 93       	st	X, r24
 166:	6c c0       	rjmp	.+216    	; 0x240 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRB.Byte,PinLoc);
 168:	a7 e3       	ldi	r26, 0x37	; 55
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	e7 e3       	ldi	r30, 0x37	; 55
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 2e       	mov	r0, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <Dio_vidSetPinDir+0x10a>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <Dio_vidSetPinDir+0x106>
 18a:	80 95       	com	r24
 18c:	84 23       	and	r24, r20
 18e:	8c 93       	st	X, r24
 190:	57 c0       	rjmp	.+174    	; 0x240 <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 2:	//DDRC
		if(Dir==1){
 192:	8c 81       	ldd	r24, Y+4	; 0x04
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	a1 f4       	brne	.+40     	; 0x1c0 <Dio_vidSetPinDir+0x144>
			SET_BIT(DDRC.Byte,PinLoc);
 198:	a4 e3       	ldi	r26, 0x34	; 52
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	e4 e3       	ldi	r30, 0x34	; 52
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	48 2f       	mov	r20, r24
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 2e       	mov	r0, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <Dio_vidSetPinDir+0x13a>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <Dio_vidSetPinDir+0x136>
 1ba:	84 2b       	or	r24, r20
 1bc:	8c 93       	st	X, r24
 1be:	40 c0       	rjmp	.+128    	; 0x240 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRC.Byte,PinLoc);
 1c0:	a4 e3       	ldi	r26, 0x34	; 52
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	e4 e3       	ldi	r30, 0x34	; 52
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	48 2f       	mov	r20, r24
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 2e       	mov	r0, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <Dio_vidSetPinDir+0x162>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <Dio_vidSetPinDir+0x15e>
 1e2:	80 95       	com	r24
 1e4:	84 23       	and	r24, r20
 1e6:	8c 93       	st	X, r24
 1e8:	2b c0       	rjmp	.+86     	; 0x240 <Dio_vidSetPinDir+0x1c4>
		}
		break;
	case 3:	//DDRD
		if(Dir==1){
 1ea:	8c 81       	ldd	r24, Y+4	; 0x04
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	a1 f4       	brne	.+40     	; 0x218 <Dio_vidSetPinDir+0x19c>
			SET_BIT(DDRD.Byte,PinLoc);
 1f0:	a1 e3       	ldi	r26, 0x31	; 49
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e1 e3       	ldi	r30, 0x31	; 49
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	48 2f       	mov	r20, r24
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 2e       	mov	r0, r18
 208:	02 c0       	rjmp	.+4      	; 0x20e <Dio_vidSetPinDir+0x192>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <Dio_vidSetPinDir+0x18e>
 212:	84 2b       	or	r24, r20
 214:	8c 93       	st	X, r24
 216:	14 c0       	rjmp	.+40     	; 0x240 <Dio_vidSetPinDir+0x1c4>
		}
		else {
			CLR_BIT(DDRD.Byte,PinLoc);
 218:	a1 e3       	ldi	r26, 0x31	; 49
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e1 e3       	ldi	r30, 0x31	; 49
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <Dio_vidSetPinDir+0x1ba>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <Dio_vidSetPinDir+0x1b6>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
		}
		break;
	}
}
 240:	26 96       	adiw	r28, 0x06	; 6
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	de bf       	out	0x3e, r29	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	cd bf       	out	0x3d, r28	; 61
 24c:	cf 91       	pop	r28
 24e:	df 91       	pop	r29
 250:	08 95       	ret

00000252 <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin, u8 Val){
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	00 d0       	rcall	.+0      	; 0x258 <Dio_vidSetPinVal+0x6>
 258:	00 d0       	rcall	.+0      	; 0x25a <Dio_vidSetPinVal+0x8>
 25a:	00 d0       	rcall	.+0      	; 0x25c <Dio_vidSetPinVal+0xa>
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	8b 83       	std	Y+3, r24	; 0x03
 262:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
 264:	8b 81       	ldd	r24, Y+3	; 0x03
 266:	86 95       	lsr	r24
 268:	86 95       	lsr	r24
 26a:	86 95       	lsr	r24
 26c:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc=Pin%8;
 26e:	8b 81       	ldd	r24, Y+3	; 0x03
 270:	87 70       	andi	r24, 0x07	; 7
 272:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId){
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	3e 83       	std	Y+6, r19	; 0x06
 27c:	2d 83       	std	Y+5, r18	; 0x05
 27e:	8d 81       	ldd	r24, Y+5	; 0x05
 280:	9e 81       	ldd	r25, Y+6	; 0x06
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	91 05       	cpc	r25, r1
 286:	09 f4       	brne	.+2      	; 0x28a <Dio_vidSetPinVal+0x38>
 288:	43 c0       	rjmp	.+134    	; 0x310 <Dio_vidSetPinVal+0xbe>
 28a:	2d 81       	ldd	r18, Y+5	; 0x05
 28c:	3e 81       	ldd	r19, Y+6	; 0x06
 28e:	22 30       	cpi	r18, 0x02	; 2
 290:	31 05       	cpc	r19, r1
 292:	2c f4       	brge	.+10     	; 0x29e <Dio_vidSetPinVal+0x4c>
 294:	8d 81       	ldd	r24, Y+5	; 0x05
 296:	9e 81       	ldd	r25, Y+6	; 0x06
 298:	00 97       	sbiw	r24, 0x00	; 0
 29a:	71 f0       	breq	.+28     	; 0x2b8 <Dio_vidSetPinVal+0x66>
 29c:	bc c0       	rjmp	.+376    	; 0x416 <Dio_vidSetPinVal+0x1c4>
 29e:	2d 81       	ldd	r18, Y+5	; 0x05
 2a0:	3e 81       	ldd	r19, Y+6	; 0x06
 2a2:	22 30       	cpi	r18, 0x02	; 2
 2a4:	31 05       	cpc	r19, r1
 2a6:	09 f4       	brne	.+2      	; 0x2aa <Dio_vidSetPinVal+0x58>
 2a8:	5f c0       	rjmp	.+190    	; 0x368 <Dio_vidSetPinVal+0x116>
 2aa:	8d 81       	ldd	r24, Y+5	; 0x05
 2ac:	9e 81       	ldd	r25, Y+6	; 0x06
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	91 05       	cpc	r25, r1
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <Dio_vidSetPinVal+0x64>
 2b4:	85 c0       	rjmp	.+266    	; 0x3c0 <Dio_vidSetPinVal+0x16e>
 2b6:	af c0       	rjmp	.+350    	; 0x416 <Dio_vidSetPinVal+0x1c4>
	case 0:
		if(Val ==1)
 2b8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	a1 f4       	brne	.+40     	; 0x2e6 <Dio_vidSetPinVal+0x94>
						{
						SET_BIT(PORTA.Byte , PinLoc);
 2be:	ab e3       	ldi	r26, 0x3B	; 59
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	eb e3       	ldi	r30, 0x3B	; 59
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <Dio_vidSetPinVal+0x8a>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <Dio_vidSetPinVal+0x86>
 2e0:	84 2b       	or	r24, r20
 2e2:	8c 93       	st	X, r24
 2e4:	98 c0       	rjmp	.+304    	; 0x416 <Dio_vidSetPinVal+0x1c4>
						}
					else
						{
						CLR_BIT(PORTA.Byte , PinLoc);
 2e6:	ab e3       	ldi	r26, 0x3B	; 59
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	eb e3       	ldi	r30, 0x3B	; 59
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <Dio_vidSetPinVal+0xb2>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <Dio_vidSetPinVal+0xae>
 308:	80 95       	com	r24
 30a:	84 23       	and	r24, r20
 30c:	8c 93       	st	X, r24
 30e:	83 c0       	rjmp	.+262    	; 0x416 <Dio_vidSetPinVal+0x1c4>
						}
					break;
				case 1: //PORTB
					if(Val ==1)
 310:	8c 81       	ldd	r24, Y+4	; 0x04
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	a1 f4       	brne	.+40     	; 0x33e <Dio_vidSetPinVal+0xec>
						{
						SET_BIT(PORTB.Byte , PinLoc);
 316:	a8 e3       	ldi	r26, 0x38	; 56
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e8 e3       	ldi	r30, 0x38	; 56
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	48 2f       	mov	r20, r24
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	28 2f       	mov	r18, r24
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <Dio_vidSetPinVal+0xe2>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <Dio_vidSetPinVal+0xde>
 338:	84 2b       	or	r24, r20
 33a:	8c 93       	st	X, r24
 33c:	6c c0       	rjmp	.+216    	; 0x416 <Dio_vidSetPinVal+0x1c4>
						}
					else
						{
						CLR_BIT(PORTB.Byte , PinLoc);
 33e:	a8 e3       	ldi	r26, 0x38	; 56
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e8 e3       	ldi	r30, 0x38	; 56
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	48 2f       	mov	r20, r24
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	28 2f       	mov	r18, r24
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 2e       	mov	r0, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <Dio_vidSetPinVal+0x10a>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <Dio_vidSetPinVal+0x106>
 360:	80 95       	com	r24
 362:	84 23       	and	r24, r20
 364:	8c 93       	st	X, r24
 366:	57 c0       	rjmp	.+174    	; 0x416 <Dio_vidSetPinVal+0x1c4>
						}
					break;
				case 2: //PORTC
					if(Val ==1)
 368:	8c 81       	ldd	r24, Y+4	; 0x04
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	a1 f4       	brne	.+40     	; 0x396 <Dio_vidSetPinVal+0x144>
						{
						SET_BIT(PORTC.Byte , PinLoc);
 36e:	a5 e3       	ldi	r26, 0x35	; 53
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	e5 e3       	ldi	r30, 0x35	; 53
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 2e       	mov	r0, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <Dio_vidSetPinVal+0x13a>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <Dio_vidSetPinVal+0x136>
 390:	84 2b       	or	r24, r20
 392:	8c 93       	st	X, r24
 394:	40 c0       	rjmp	.+128    	; 0x416 <Dio_vidSetPinVal+0x1c4>
						}
					else
						{
						CLR_BIT(PORTC.Byte , PinLoc);
 396:	a5 e3       	ldi	r26, 0x35	; 53
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	e5 e3       	ldi	r30, 0x35	; 53
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	48 2f       	mov	r20, r24
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	28 2f       	mov	r18, r24
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 2e       	mov	r0, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <Dio_vidSetPinVal+0x162>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <Dio_vidSetPinVal+0x15e>
 3b8:	80 95       	com	r24
 3ba:	84 23       	and	r24, r20
 3bc:	8c 93       	st	X, r24
 3be:	2b c0       	rjmp	.+86     	; 0x416 <Dio_vidSetPinVal+0x1c4>
						}
					break;
				case 3: //PORTD
					if(Val ==1)
 3c0:	8c 81       	ldd	r24, Y+4	; 0x04
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	a1 f4       	brne	.+40     	; 0x3ee <Dio_vidSetPinVal+0x19c>
						{
						SET_BIT(PORTD.Byte , PinLoc);
 3c6:	a2 e3       	ldi	r26, 0x32	; 50
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	e2 e3       	ldi	r30, 0x32	; 50
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	48 2f       	mov	r20, r24
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	28 2f       	mov	r18, r24
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 2e       	mov	r0, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <Dio_vidSetPinVal+0x192>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <Dio_vidSetPinVal+0x18e>
 3e8:	84 2b       	or	r24, r20
 3ea:	8c 93       	st	X, r24
 3ec:	14 c0       	rjmp	.+40     	; 0x416 <Dio_vidSetPinVal+0x1c4>
						}
					else
						{
						CLR_BIT(PORTD.Byte , PinLoc);
 3ee:	a2 e3       	ldi	r26, 0x32	; 50
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e2 e3       	ldi	r30, 0x32	; 50
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <Dio_vidSetPinVal+0x1ba>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <Dio_vidSetPinVal+0x1b6>
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	8c 93       	st	X, r24
						}
					break;
			}
		}
 416:	26 96       	adiw	r28, 0x06	; 6
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	cf 91       	pop	r28
 424:	df 91       	pop	r29
 426:	08 95       	ret

00000428 <Dio_u8GetPinVal>:

		u8 Dio_u8GetPinVal(u8 pin)
		{
 428:	df 93       	push	r29
 42a:	cf 93       	push	r28
 42c:	00 d0       	rcall	.+0      	; 0x42e <Dio_u8GetPinVal+0x6>
 42e:	00 d0       	rcall	.+0      	; 0x430 <Dio_u8GetPinVal+0x8>
 430:	00 d0       	rcall	.+0      	; 0x432 <Dio_u8GetPinVal+0xa>
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	8c 83       	std	Y+4, r24	; 0x04
			u8 PortId;
			u8 PinLoc;
			u8 PinVal = 0;
 438:	19 82       	std	Y+1, r1	; 0x01

			if (pin > 31)
 43a:	8c 81       	ldd	r24, Y+4	; 0x04
 43c:	80 32       	cpi	r24, 0x20	; 32
 43e:	18 f0       	brcs	.+6      	; 0x446 <Dio_u8GetPinVal+0x1e>
			{
				PinVal = DIO_u8INVALED_PIN_NUM;
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	89 83       	std	Y+1, r24	; 0x01
 444:	6f c0       	rjmp	.+222    	; 0x524 <Dio_u8GetPinVal+0xfc>
			}
			else
			{
				PortId = pin/8;
 446:	8c 81       	ldd	r24, Y+4	; 0x04
 448:	86 95       	lsr	r24
 44a:	86 95       	lsr	r24
 44c:	86 95       	lsr	r24
 44e:	8b 83       	std	Y+3, r24	; 0x03
				PinLoc = pin%8;
 450:	8c 81       	ldd	r24, Y+4	; 0x04
 452:	87 70       	andi	r24, 0x07	; 7
 454:	8a 83       	std	Y+2, r24	; 0x02
				switch(PortId)
 456:	8b 81       	ldd	r24, Y+3	; 0x03
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	2d 83       	std	Y+5, r18	; 0x05
 460:	4d 81       	ldd	r20, Y+5	; 0x05
 462:	5e 81       	ldd	r21, Y+6	; 0x06
 464:	41 30       	cpi	r20, 0x01	; 1
 466:	51 05       	cpc	r21, r1
 468:	41 f1       	breq	.+80     	; 0x4ba <Dio_u8GetPinVal+0x92>
 46a:	8d 81       	ldd	r24, Y+5	; 0x05
 46c:	9e 81       	ldd	r25, Y+6	; 0x06
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	91 05       	cpc	r25, r1
 472:	34 f4       	brge	.+12     	; 0x480 <Dio_u8GetPinVal+0x58>
 474:	2d 81       	ldd	r18, Y+5	; 0x05
 476:	3e 81       	ldd	r19, Y+6	; 0x06
 478:	21 15       	cp	r18, r1
 47a:	31 05       	cpc	r19, r1
 47c:	61 f0       	breq	.+24     	; 0x496 <Dio_u8GetPinVal+0x6e>
 47e:	52 c0       	rjmp	.+164    	; 0x524 <Dio_u8GetPinVal+0xfc>
 480:	4d 81       	ldd	r20, Y+5	; 0x05
 482:	5e 81       	ldd	r21, Y+6	; 0x06
 484:	42 30       	cpi	r20, 0x02	; 2
 486:	51 05       	cpc	r21, r1
 488:	51 f1       	breq	.+84     	; 0x4de <Dio_u8GetPinVal+0xb6>
 48a:	8d 81       	ldd	r24, Y+5	; 0x05
 48c:	9e 81       	ldd	r25, Y+6	; 0x06
 48e:	83 30       	cpi	r24, 0x03	; 3
 490:	91 05       	cpc	r25, r1
 492:	b9 f1       	breq	.+110    	; 0x502 <Dio_u8GetPinVal+0xda>
 494:	47 c0       	rjmp	.+142    	; 0x524 <Dio_u8GetPinVal+0xfc>
				{
					case 0: //PINA
						PinVal = GET_BIT(PINA.Byte , PinLoc);
 496:	e9 e3       	ldi	r30, 0x39	; 57
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	88 2f       	mov	r24, r24
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	a9 01       	movw	r20, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <Dio_u8GetPinVal+0x86>
 4aa:	55 95       	asr	r21
 4ac:	47 95       	ror	r20
 4ae:	8a 95       	dec	r24
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <Dio_u8GetPinVal+0x82>
 4b2:	ca 01       	movw	r24, r20
 4b4:	81 70       	andi	r24, 0x01	; 1
 4b6:	89 83       	std	Y+1, r24	; 0x01
 4b8:	35 c0       	rjmp	.+106    	; 0x524 <Dio_u8GetPinVal+0xfc>
					break;

					case 1: //PINB
						PinVal = GET_BIT(PINB.Byte , PinLoc);
 4ba:	e6 e3       	ldi	r30, 0x36	; 54
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	8a 81       	ldd	r24, Y+2	; 0x02
 4c6:	88 2f       	mov	r24, r24
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	a9 01       	movw	r20, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <Dio_u8GetPinVal+0xaa>
 4ce:	55 95       	asr	r21
 4d0:	47 95       	ror	r20
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <Dio_u8GetPinVal+0xa6>
 4d6:	ca 01       	movw	r24, r20
 4d8:	81 70       	andi	r24, 0x01	; 1
 4da:	89 83       	std	Y+1, r24	; 0x01
 4dc:	23 c0       	rjmp	.+70     	; 0x524 <Dio_u8GetPinVal+0xfc>
					break;

					case 2: //PINC
						PinVal = GET_BIT(PINC.Byte , PinLoc);
 4de:	e3 e3       	ldi	r30, 0x33	; 51
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	28 2f       	mov	r18, r24
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ea:	88 2f       	mov	r24, r24
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	a9 01       	movw	r20, r18
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <Dio_u8GetPinVal+0xce>
 4f2:	55 95       	asr	r21
 4f4:	47 95       	ror	r20
 4f6:	8a 95       	dec	r24
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <Dio_u8GetPinVal+0xca>
 4fa:	ca 01       	movw	r24, r20
 4fc:	81 70       	andi	r24, 0x01	; 1
 4fe:	89 83       	std	Y+1, r24	; 0x01
 500:	11 c0       	rjmp	.+34     	; 0x524 <Dio_u8GetPinVal+0xfc>
					break;

					case 3: //PIND
						PinVal = GET_BIT(PIND.Byte , PinLoc);
 502:	e0 e3       	ldi	r30, 0x30	; 48
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	88 2f       	mov	r24, r24
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	a9 01       	movw	r20, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <Dio_u8GetPinVal+0xf2>
 516:	55 95       	asr	r21
 518:	47 95       	ror	r20
 51a:	8a 95       	dec	r24
 51c:	e2 f7       	brpl	.-8      	; 0x516 <Dio_u8GetPinVal+0xee>
 51e:	ca 01       	movw	r24, r20
 520:	81 70       	andi	r24, 0x01	; 1
 522:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
			}
			return PinVal;
 524:	89 81       	ldd	r24, Y+1	; 0x01

		}
 526:	26 96       	adiw	r28, 0x06	; 6
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	de bf       	out	0x3e, r29	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	cd bf       	out	0x3d, r28	; 61
 532:	cf 91       	pop	r28
 534:	df 91       	pop	r29
 536:	08 95       	ret

00000538 <Led_vidInit>:
#include"Dio_int.h"
#include"LED_cfg.h"
#include<avr/io.h>
#include "LED_int.h"

void Led_vidInit(u8 LedID){
 538:	df 93       	push	r29
 53a:	cf 93       	push	r28
 53c:	00 d0       	rcall	.+0      	; 0x53e <Led_vidInit+0x6>
 53e:	0f 92       	push	r0
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
 544:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID){
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	3b 83       	std	Y+3, r19	; 0x03
 54e:	2a 83       	std	Y+2, r18	; 0x02
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	9b 81       	ldd	r25, Y+3	; 0x03
 554:	84 30       	cpi	r24, 0x04	; 4
 556:	91 05       	cpc	r25, r1
 558:	c9 f1       	breq	.+114    	; 0x5cc <Led_vidInit+0x94>
 55a:	2a 81       	ldd	r18, Y+2	; 0x02
 55c:	3b 81       	ldd	r19, Y+3	; 0x03
 55e:	25 30       	cpi	r18, 0x05	; 5
 560:	31 05       	cpc	r19, r1
 562:	84 f4       	brge	.+32     	; 0x584 <Led_vidInit+0x4c>
 564:	8a 81       	ldd	r24, Y+2	; 0x02
 566:	9b 81       	ldd	r25, Y+3	; 0x03
 568:	82 30       	cpi	r24, 0x02	; 2
 56a:	91 05       	cpc	r25, r1
 56c:	29 f1       	breq	.+74     	; 0x5b8 <Led_vidInit+0x80>
 56e:	2a 81       	ldd	r18, Y+2	; 0x02
 570:	3b 81       	ldd	r19, Y+3	; 0x03
 572:	23 30       	cpi	r18, 0x03	; 3
 574:	31 05       	cpc	r19, r1
 576:	2c f5       	brge	.+74     	; 0x5c2 <Led_vidInit+0x8a>
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	9b 81       	ldd	r25, Y+3	; 0x03
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	91 05       	cpc	r25, r1
 580:	b1 f0       	breq	.+44     	; 0x5ae <Led_vidInit+0x76>
 582:	3c c0       	rjmp	.+120    	; 0x5fc <Led_vidInit+0xc4>
 584:	2a 81       	ldd	r18, Y+2	; 0x02
 586:	3b 81       	ldd	r19, Y+3	; 0x03
 588:	26 30       	cpi	r18, 0x06	; 6
 58a:	31 05       	cpc	r19, r1
 58c:	49 f1       	breq	.+82     	; 0x5e0 <Led_vidInit+0xa8>
 58e:	8a 81       	ldd	r24, Y+2	; 0x02
 590:	9b 81       	ldd	r25, Y+3	; 0x03
 592:	86 30       	cpi	r24, 0x06	; 6
 594:	91 05       	cpc	r25, r1
 596:	fc f0       	brlt	.+62     	; 0x5d6 <Led_vidInit+0x9e>
 598:	2a 81       	ldd	r18, Y+2	; 0x02
 59a:	3b 81       	ldd	r19, Y+3	; 0x03
 59c:	27 30       	cpi	r18, 0x07	; 7
 59e:	31 05       	cpc	r19, r1
 5a0:	21 f1       	breq	.+72     	; 0x5ea <Led_vidInit+0xb2>
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	9b 81       	ldd	r25, Y+3	; 0x03
 5a6:	88 30       	cpi	r24, 0x08	; 8
 5a8:	91 05       	cpc	r25, r1
 5aa:	21 f1       	breq	.+72     	; 0x5f4 <Led_vidInit+0xbc>
 5ac:	27 c0       	rjmp	.+78     	; 0x5fc <Led_vidInit+0xc4>
	case 1:
		Dio_vidSetPinDir(LED_u8ID_1,DIO_u8HIGH);	//Setting 1st 2 pins
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
 5b6:	22 c0       	rjmp	.+68     	; 0x5fc <Led_vidInit+0xc4>
		break;
	case 2:
		Dio_vidSetPinDir(LED_u8ID_2,DIO_u8HIGH);	//of PORTA to output
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	61 e0       	ldi	r22, 0x01	; 1
 5bc:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
 5c0:	1d c0       	rjmp	.+58     	; 0x5fc <Led_vidInit+0xc4>
		break;
	case 3:
		Dio_vidSetPinDir(LED_u8ID_3,DIO_u8HIGH);	//Setting 2nd 2 pins
 5c2:	8a e0       	ldi	r24, 0x0A	; 10
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
 5ca:	18 c0       	rjmp	.+48     	; 0x5fc <Led_vidInit+0xc4>
		break;
	case 4:
		Dio_vidSetPinDir(LED_u8ID_4,DIO_u8HIGH);	//of PORTB to output
 5cc:	8b e0       	ldi	r24, 0x0B	; 11
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
 5d4:	13 c0       	rjmp	.+38     	; 0x5fc <Led_vidInit+0xc4>
		break;
	case 5:
		Dio_vidSetPinDir(LED_u8ID_5,DIO_u8HIGH);	//Setting 3rd 2 pins
 5d6:	84 e1       	ldi	r24, 0x14	; 20
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
 5de:	0e c0       	rjmp	.+28     	; 0x5fc <Led_vidInit+0xc4>
		break;
	case 6:
		Dio_vidSetPinDir(LED_u8ID_6,DIO_u8HIGH);	//of PORTC to output
 5e0:	85 e1       	ldi	r24, 0x15	; 21
 5e2:	61 e0       	ldi	r22, 0x01	; 1
 5e4:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
 5e8:	09 c0       	rjmp	.+18     	; 0x5fc <Led_vidInit+0xc4>
		break;
	case 7:
		Dio_vidSetPinDir(LED_u8ID_7,DIO_u8HIGH);	//Setting 4th 2 pins
 5ea:	8e e1       	ldi	r24, 0x1E	; 30
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <Led_vidInit+0xc4>
		break;
	case 8:
		Dio_vidSetPinDir(LED_u8ID_8,DIO_u8HIGH);	//of PORTD to output
 5f4:	8f e1       	ldi	r24, 0x1F	; 31
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
		break;
	}
}
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	cf 91       	pop	r28
 604:	df 91       	pop	r29
 606:	08 95       	ret

00000608 <Led_vidTurnON>:
void Led_vidTurnON(u8 LedID){
 608:	df 93       	push	r29
 60a:	cf 93       	push	r28
 60c:	00 d0       	rcall	.+0      	; 0x60e <Led_vidTurnON+0x6>
 60e:	0f 92       	push	r0
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
 614:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID){
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	3b 83       	std	Y+3, r19	; 0x03
 61e:	2a 83       	std	Y+2, r18	; 0x02
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	9b 81       	ldd	r25, Y+3	; 0x03
 624:	84 30       	cpi	r24, 0x04	; 4
 626:	91 05       	cpc	r25, r1
 628:	c9 f1       	breq	.+114    	; 0x69c <Led_vidTurnON+0x94>
 62a:	2a 81       	ldd	r18, Y+2	; 0x02
 62c:	3b 81       	ldd	r19, Y+3	; 0x03
 62e:	25 30       	cpi	r18, 0x05	; 5
 630:	31 05       	cpc	r19, r1
 632:	84 f4       	brge	.+32     	; 0x654 <Led_vidTurnON+0x4c>
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	9b 81       	ldd	r25, Y+3	; 0x03
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	91 05       	cpc	r25, r1
 63c:	29 f1       	breq	.+74     	; 0x688 <Led_vidTurnON+0x80>
 63e:	2a 81       	ldd	r18, Y+2	; 0x02
 640:	3b 81       	ldd	r19, Y+3	; 0x03
 642:	23 30       	cpi	r18, 0x03	; 3
 644:	31 05       	cpc	r19, r1
 646:	2c f5       	brge	.+74     	; 0x692 <Led_vidTurnON+0x8a>
 648:	8a 81       	ldd	r24, Y+2	; 0x02
 64a:	9b 81       	ldd	r25, Y+3	; 0x03
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	91 05       	cpc	r25, r1
 650:	b1 f0       	breq	.+44     	; 0x67e <Led_vidTurnON+0x76>
 652:	3c c0       	rjmp	.+120    	; 0x6cc <Led_vidTurnON+0xc4>
 654:	2a 81       	ldd	r18, Y+2	; 0x02
 656:	3b 81       	ldd	r19, Y+3	; 0x03
 658:	26 30       	cpi	r18, 0x06	; 6
 65a:	31 05       	cpc	r19, r1
 65c:	49 f1       	breq	.+82     	; 0x6b0 <Led_vidTurnON+0xa8>
 65e:	8a 81       	ldd	r24, Y+2	; 0x02
 660:	9b 81       	ldd	r25, Y+3	; 0x03
 662:	86 30       	cpi	r24, 0x06	; 6
 664:	91 05       	cpc	r25, r1
 666:	fc f0       	brlt	.+62     	; 0x6a6 <Led_vidTurnON+0x9e>
 668:	2a 81       	ldd	r18, Y+2	; 0x02
 66a:	3b 81       	ldd	r19, Y+3	; 0x03
 66c:	27 30       	cpi	r18, 0x07	; 7
 66e:	31 05       	cpc	r19, r1
 670:	21 f1       	breq	.+72     	; 0x6ba <Led_vidTurnON+0xb2>
 672:	8a 81       	ldd	r24, Y+2	; 0x02
 674:	9b 81       	ldd	r25, Y+3	; 0x03
 676:	88 30       	cpi	r24, 0x08	; 8
 678:	91 05       	cpc	r25, r1
 67a:	21 f1       	breq	.+72     	; 0x6c4 <Led_vidTurnON+0xbc>
 67c:	27 c0       	rjmp	.+78     	; 0x6cc <Led_vidTurnON+0xc4>
	case 1:
		Dio_vidSetPinVal(LED_u8ID_1,DIO_u8HIGH);
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 686:	22 c0       	rjmp	.+68     	; 0x6cc <Led_vidTurnON+0xc4>
		break;
	case 2:
		Dio_vidSetPinVal(LED_u8ID_2,DIO_u8HIGH);
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 690:	1d c0       	rjmp	.+58     	; 0x6cc <Led_vidTurnON+0xc4>
		break;
	case 3:
		Dio_vidSetPinVal(LED_u8ID_3,DIO_u8HIGH);
 692:	8a e0       	ldi	r24, 0x0A	; 10
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 69a:	18 c0       	rjmp	.+48     	; 0x6cc <Led_vidTurnON+0xc4>
		break;
	case 4:
		Dio_vidSetPinVal(LED_u8ID_4,DIO_u8HIGH);
 69c:	8b e0       	ldi	r24, 0x0B	; 11
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 6a4:	13 c0       	rjmp	.+38     	; 0x6cc <Led_vidTurnON+0xc4>
		break;
	case 5:
		Dio_vidSetPinVal(LED_u8ID_5,DIO_u8HIGH);
 6a6:	84 e1       	ldi	r24, 0x14	; 20
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 6ae:	0e c0       	rjmp	.+28     	; 0x6cc <Led_vidTurnON+0xc4>
		break;
	case 6:
		Dio_vidSetPinVal(LED_u8ID_6,DIO_u8HIGH);
 6b0:	85 e1       	ldi	r24, 0x15	; 21
 6b2:	61 e0       	ldi	r22, 0x01	; 1
 6b4:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 6b8:	09 c0       	rjmp	.+18     	; 0x6cc <Led_vidTurnON+0xc4>
		break;
	case 7:
		Dio_vidSetPinVal(LED_u8ID_7,DIO_u8HIGH);
 6ba:	8e e1       	ldi	r24, 0x1E	; 30
 6bc:	61 e0       	ldi	r22, 0x01	; 1
 6be:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <Led_vidTurnON+0xc4>
		break;
	case 8:
		Dio_vidSetPinVal(LED_u8ID_8,DIO_u8HIGH);
 6c4:	8f e1       	ldi	r24, 0x1F	; 31
 6c6:	61 e0       	ldi	r22, 0x01	; 1
 6c8:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
		break;
	}
}
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	cf 91       	pop	r28
 6d4:	df 91       	pop	r29
 6d6:	08 95       	ret

000006d8 <Led_vidTurnOFF>:

void Led_vidTurnOFF(u8 LedID){
 6d8:	df 93       	push	r29
 6da:	cf 93       	push	r28
 6dc:	00 d0       	rcall	.+0      	; 0x6de <Led_vidTurnOFF+0x6>
 6de:	0f 92       	push	r0
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
 6e4:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID){
 6e6:	89 81       	ldd	r24, Y+1	; 0x01
 6e8:	28 2f       	mov	r18, r24
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	3b 83       	std	Y+3, r19	; 0x03
 6ee:	2a 83       	std	Y+2, r18	; 0x02
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	9b 81       	ldd	r25, Y+3	; 0x03
 6f4:	84 30       	cpi	r24, 0x04	; 4
 6f6:	91 05       	cpc	r25, r1
 6f8:	c9 f1       	breq	.+114    	; 0x76c <Led_vidTurnOFF+0x94>
 6fa:	2a 81       	ldd	r18, Y+2	; 0x02
 6fc:	3b 81       	ldd	r19, Y+3	; 0x03
 6fe:	25 30       	cpi	r18, 0x05	; 5
 700:	31 05       	cpc	r19, r1
 702:	84 f4       	brge	.+32     	; 0x724 <Led_vidTurnOFF+0x4c>
 704:	8a 81       	ldd	r24, Y+2	; 0x02
 706:	9b 81       	ldd	r25, Y+3	; 0x03
 708:	82 30       	cpi	r24, 0x02	; 2
 70a:	91 05       	cpc	r25, r1
 70c:	29 f1       	breq	.+74     	; 0x758 <Led_vidTurnOFF+0x80>
 70e:	2a 81       	ldd	r18, Y+2	; 0x02
 710:	3b 81       	ldd	r19, Y+3	; 0x03
 712:	23 30       	cpi	r18, 0x03	; 3
 714:	31 05       	cpc	r19, r1
 716:	2c f5       	brge	.+74     	; 0x762 <Led_vidTurnOFF+0x8a>
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	9b 81       	ldd	r25, Y+3	; 0x03
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	91 05       	cpc	r25, r1
 720:	b1 f0       	breq	.+44     	; 0x74e <Led_vidTurnOFF+0x76>
 722:	3c c0       	rjmp	.+120    	; 0x79c <Led_vidTurnOFF+0xc4>
 724:	2a 81       	ldd	r18, Y+2	; 0x02
 726:	3b 81       	ldd	r19, Y+3	; 0x03
 728:	26 30       	cpi	r18, 0x06	; 6
 72a:	31 05       	cpc	r19, r1
 72c:	49 f1       	breq	.+82     	; 0x780 <Led_vidTurnOFF+0xa8>
 72e:	8a 81       	ldd	r24, Y+2	; 0x02
 730:	9b 81       	ldd	r25, Y+3	; 0x03
 732:	86 30       	cpi	r24, 0x06	; 6
 734:	91 05       	cpc	r25, r1
 736:	fc f0       	brlt	.+62     	; 0x776 <Led_vidTurnOFF+0x9e>
 738:	2a 81       	ldd	r18, Y+2	; 0x02
 73a:	3b 81       	ldd	r19, Y+3	; 0x03
 73c:	27 30       	cpi	r18, 0x07	; 7
 73e:	31 05       	cpc	r19, r1
 740:	21 f1       	breq	.+72     	; 0x78a <Led_vidTurnOFF+0xb2>
 742:	8a 81       	ldd	r24, Y+2	; 0x02
 744:	9b 81       	ldd	r25, Y+3	; 0x03
 746:	88 30       	cpi	r24, 0x08	; 8
 748:	91 05       	cpc	r25, r1
 74a:	21 f1       	breq	.+72     	; 0x794 <Led_vidTurnOFF+0xbc>
 74c:	27 c0       	rjmp	.+78     	; 0x79c <Led_vidTurnOFF+0xc4>
	case 1:
		Dio_vidSetPinVal(LED_u8ID_1,DIO_u8LOW);
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 756:	22 c0       	rjmp	.+68     	; 0x79c <Led_vidTurnOFF+0xc4>
		break;
	case 2:
		Dio_vidSetPinVal(LED_u8ID_2,DIO_u8LOW);
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 760:	1d c0       	rjmp	.+58     	; 0x79c <Led_vidTurnOFF+0xc4>
		break;
	case 3:
		Dio_vidSetPinVal(LED_u8ID_3,DIO_u8LOW);
 762:	8a e0       	ldi	r24, 0x0A	; 10
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 76a:	18 c0       	rjmp	.+48     	; 0x79c <Led_vidTurnOFF+0xc4>
		break;
	case 4:
		Dio_vidSetPinVal(LED_u8ID_4,DIO_u8LOW);
 76c:	8b e0       	ldi	r24, 0x0B	; 11
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 774:	13 c0       	rjmp	.+38     	; 0x79c <Led_vidTurnOFF+0xc4>
		break;
	case 5:
		Dio_vidSetPinVal(LED_u8ID_5,DIO_u8LOW);
 776:	84 e1       	ldi	r24, 0x14	; 20
 778:	60 e0       	ldi	r22, 0x00	; 0
 77a:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 77e:	0e c0       	rjmp	.+28     	; 0x79c <Led_vidTurnOFF+0xc4>
		break;
	case 6:
		Dio_vidSetPinVal(LED_u8ID_6,DIO_u8LOW);
 780:	85 e1       	ldi	r24, 0x15	; 21
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 788:	09 c0       	rjmp	.+18     	; 0x79c <Led_vidTurnOFF+0xc4>
		break;
	case 7:
		Dio_vidSetPinVal(LED_u8ID_7,DIO_u8LOW);
 78a:	8e e1       	ldi	r24, 0x1E	; 30
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
 792:	04 c0       	rjmp	.+8      	; 0x79c <Led_vidTurnOFF+0xc4>
		break;
	case 8:
		Dio_vidSetPinVal(LED_u8ID_8,DIO_u8LOW);
 794:	8f e1       	ldi	r24, 0x1F	; 31
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	0e 94 29 01 	call	0x252	; 0x252 <Dio_vidSetPinVal>
		break;
	}
}
 79c:	0f 90       	pop	r0
 79e:	0f 90       	pop	r0
 7a0:	0f 90       	pop	r0
 7a2:	cf 91       	pop	r28
 7a4:	df 91       	pop	r29
 7a6:	08 95       	ret

000007a8 <main>:
TaskType* TaskArray[2];
void App1_Code(void);
void App2_Code(void);
void Scheduler(void);
void Timer_vidInit(void);
int main(void){
 7a8:	df 93       	push	r29
 7aa:	cf 93       	push	r28
 7ac:	cd b7       	in	r28, 0x3d	; 61
 7ae:	de b7       	in	r29, 0x3e	; 62
	App1.u32Periodicity =15;
 7b0:	8f e0       	ldi	r24, 0x0F	; 15
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	90 93 6f 00 	sts	0x006F, r25
 7b8:	80 93 6e 00 	sts	0x006E, r24
	App1.u32FirstDelay  =100;
 7bc:	84 e6       	ldi	r24, 0x64	; 100
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	90 93 71 00 	sts	0x0071, r25
 7c4:	80 93 70 00 	sts	0x0070, r24
	App1.pfTaskCode 	=App1_Code;	//referencing function NOT calling it
 7c8:	81 e1       	ldi	r24, 0x11	; 17
 7ca:	94 e0       	ldi	r25, 0x04	; 4
 7cc:	90 93 73 00 	sts	0x0073, r25
 7d0:	80 93 72 00 	sts	0x0072, r24


	App2.u32Periodicity =50;
 7d4:	82 e3       	ldi	r24, 0x32	; 50
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	90 93 65 00 	sts	0x0065, r25
 7dc:	80 93 64 00 	sts	0x0064, r24
	App2.u32FirstDelay  =200;
 7e0:	88 ec       	ldi	r24, 0xC8	; 200
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	90 93 67 00 	sts	0x0067, r25
 7e8:	80 93 66 00 	sts	0x0066, r24
	App2.pfTaskCode  	=App2_Code;	//referencing function NOT calling it
 7ec:	88 e2       	ldi	r24, 0x28	; 40
 7ee:	94 e0       	ldi	r25, 0x04	; 4
 7f0:	90 93 69 00 	sts	0x0069, r25
 7f4:	80 93 68 00 	sts	0x0068, r24


	//assigning pointers in array to structs
	TaskArray[0] = &App1;
 7f8:	8e e6       	ldi	r24, 0x6E	; 110
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	90 93 6b 00 	sts	0x006B, r25
 800:	80 93 6a 00 	sts	0x006A, r24
	TaskArray[1] = &App2;
 804:	84 e6       	ldi	r24, 0x64	; 100
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	90 93 6d 00 	sts	0x006D, r25
 80c:	80 93 6c 00 	sts	0x006C, r24
	Led_vidInit(Led_1);
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	0e 94 9c 02 	call	0x538	; 0x538 <Led_vidInit>
	Led_vidInit(Led_2);
 816:	82 e0       	ldi	r24, 0x02	; 2
 818:	0e 94 9c 02 	call	0x538	; 0x538 <Led_vidInit>

	Timer_vidInit();
 81c:	0e 94 9c 04 	call	0x938	; 0x938 <Timer_vidInit>
 820:	ff cf       	rjmp	.-2      	; 0x820 <main+0x78>

00000822 <App1_Code>:

	while(1);
	return 0;
}
void App1_Code(void){
 822:	df 93       	push	r29
 824:	cf 93       	push	r28
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62

	static u8 flag = 0;

	if(flag==0){
 82a:	80 91 62 00 	lds	r24, 0x0062
 82e:	88 23       	and	r24, r24
 830:	39 f4       	brne	.+14     	; 0x840 <App1_Code+0x1e>
		Led_vidTurnON(Led_1);
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	0e 94 04 03 	call	0x608	; 0x608 <Led_vidTurnON>
		flag=1;
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	80 93 62 00 	sts	0x0062, r24
 83e:	05 c0       	rjmp	.+10     	; 0x84a <App1_Code+0x28>
	}
	else {
		Led_vidTurnOFF(Led_1);
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <Led_vidTurnOFF>
		flag=0;
 846:	10 92 62 00 	sts	0x0062, r1
	}

}
 84a:	cf 91       	pop	r28
 84c:	df 91       	pop	r29
 84e:	08 95       	ret

00000850 <App2_Code>:

void App2_Code(void){
 850:	df 93       	push	r29
 852:	cf 93       	push	r28
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62

	static u8 flag = 0;

	if(flag==0){
 858:	80 91 63 00 	lds	r24, 0x0063
 85c:	88 23       	and	r24, r24
 85e:	39 f4       	brne	.+14     	; 0x86e <__stack+0xf>
		Led_vidTurnON(Led_2);
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	0e 94 04 03 	call	0x608	; 0x608 <Led_vidTurnON>
		flag=1;
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	80 93 63 00 	sts	0x0063, r24
 86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x19>
	}
	else {
		Led_vidTurnOFF(Led_2);
 86e:	82 e0       	ldi	r24, 0x02	; 2
 870:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <Led_vidTurnOFF>
		flag=0;
 874:	10 92 63 00 	sts	0x0063, r1
	}
}
 878:	cf 91       	pop	r28
 87a:	df 91       	pop	r29
 87c:	08 95       	ret

0000087e <Scheduler>:
void Scheduler(void){
 87e:	df 93       	push	r29
 880:	cf 93       	push	r28
 882:	0f 92       	push	r0
 884:	cd b7       	in	r28, 0x3d	; 61
 886:	de b7       	in	r29, 0x3e	; 62
	u8 ArrayCounter;

	for(ArrayCounter=0; ArrayCounter<2; ArrayCounter++){
 888:	19 82       	std	Y+1, r1	; 0x01
 88a:	4e c0       	rjmp	.+156    	; 0x928 <Scheduler+0xaa>
		if(TaskArray[ArrayCounter]->u32FirstDelay ==0){
 88c:	89 81       	ldd	r24, Y+1	; 0x01
 88e:	88 2f       	mov	r24, r24
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	88 0f       	add	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	fc 01       	movw	r30, r24
 898:	e6 59       	subi	r30, 0x96	; 150
 89a:	ff 4f       	sbci	r31, 0xFF	; 255
 89c:	01 90       	ld	r0, Z+
 89e:	f0 81       	ld	r31, Z
 8a0:	e0 2d       	mov	r30, r0
 8a2:	82 81       	ldd	r24, Z+2	; 0x02
 8a4:	93 81       	ldd	r25, Z+3	; 0x03
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	61 f5       	brne	.+88     	; 0x902 <Scheduler+0x84>

			//Array of pointer to structures containing pointer to function
			TaskArray[ArrayCounter]->pfTaskCode();	//this time we are CALLING the function in the struct
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	88 2f       	mov	r24, r24
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	fc 01       	movw	r30, r24
 8b6:	e6 59       	subi	r30, 0x96	; 150
 8b8:	ff 4f       	sbci	r31, 0xFF	; 255
 8ba:	01 90       	ld	r0, Z+
 8bc:	f0 81       	ld	r31, Z
 8be:	e0 2d       	mov	r30, r0
 8c0:	04 80       	ldd	r0, Z+4	; 0x04
 8c2:	f5 81       	ldd	r31, Z+5	; 0x05
 8c4:	e0 2d       	mov	r30, r0
 8c6:	09 95       	icall
			TaskArray[ArrayCounter]->u32FirstDelay=TaskArray[ArrayCounter]->u32Periodicity-1;
 8c8:	89 81       	ldd	r24, Y+1	; 0x01
 8ca:	88 2f       	mov	r24, r24
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	fc 01       	movw	r30, r24
 8d4:	e6 59       	subi	r30, 0x96	; 150
 8d6:	ff 4f       	sbci	r31, 0xFF	; 255
 8d8:	a0 81       	ld	r26, Z
 8da:	b1 81       	ldd	r27, Z+1	; 0x01
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	88 2f       	mov	r24, r24
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	fc 01       	movw	r30, r24
 8e8:	e6 59       	subi	r30, 0x96	; 150
 8ea:	ff 4f       	sbci	r31, 0xFF	; 255
 8ec:	01 90       	ld	r0, Z+
 8ee:	f0 81       	ld	r31, Z
 8f0:	e0 2d       	mov	r30, r0
 8f2:	80 81       	ld	r24, Z
 8f4:	91 81       	ldd	r25, Z+1	; 0x01
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	13 96       	adiw	r26, 0x03	; 3
 8fa:	9c 93       	st	X, r25
 8fc:	8e 93       	st	-X, r24
 8fe:	12 97       	sbiw	r26, 0x02	; 2
 900:	10 c0       	rjmp	.+32     	; 0x922 <Scheduler+0xa4>
		}
		else {
			TaskArray[ArrayCounter]->u32FirstDelay--;
 902:	89 81       	ldd	r24, Y+1	; 0x01
 904:	88 2f       	mov	r24, r24
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	fc 01       	movw	r30, r24
 90e:	e6 59       	subi	r30, 0x96	; 150
 910:	ff 4f       	sbci	r31, 0xFF	; 255
 912:	01 90       	ld	r0, Z+
 914:	f0 81       	ld	r31, Z
 916:	e0 2d       	mov	r30, r0
 918:	82 81       	ldd	r24, Z+2	; 0x02
 91a:	93 81       	ldd	r25, Z+3	; 0x03
 91c:	01 97       	sbiw	r24, 0x01	; 1
 91e:	93 83       	std	Z+3, r25	; 0x03
 920:	82 83       	std	Z+2, r24	; 0x02
	}
}
void Scheduler(void){
	u8 ArrayCounter;

	for(ArrayCounter=0; ArrayCounter<2; ArrayCounter++){
 922:	89 81       	ldd	r24, Y+1	; 0x01
 924:	8f 5f       	subi	r24, 0xFF	; 255
 926:	89 83       	std	Y+1, r24	; 0x01
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	82 30       	cpi	r24, 0x02	; 2
 92c:	08 f4       	brcc	.+2      	; 0x930 <Scheduler+0xb2>
 92e:	ae cf       	rjmp	.-164    	; 0x88c <Scheduler+0xe>
		}
		else {
			TaskArray[ArrayCounter]->u32FirstDelay--;
		}
	}
}
 930:	0f 90       	pop	r0
 932:	cf 91       	pop	r28
 934:	df 91       	pop	r29
 936:	08 95       	ret

00000938 <Timer_vidInit>:
void Timer_vidInit(void){
 938:	df 93       	push	r29
 93a:	cf 93       	push	r28
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62
	Ovf_counts=0;
 940:	10 92 61 00 	sts	0x0061, r1
 944:	10 92 60 00 	sts	0x0060, r1
	TCCR0=0;
 948:	e3 e5       	ldi	r30, 0x53	; 83
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	10 82       	st	Z, r1
	SET_BIT(TCCR0,0);//No prescaler
 94e:	a3 e5       	ldi	r26, 0x53	; 83
 950:	b0 e0       	ldi	r27, 0x00	; 0
 952:	e3 e5       	ldi	r30, 0x53	; 83
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	80 81       	ld	r24, Z
 958:	81 60       	ori	r24, 0x01	; 1
 95a:	8c 93       	st	X, r24

	TCNT0=192;
 95c:	e2 e5       	ldi	r30, 0x52	; 82
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 ec       	ldi	r24, 0xC0	; 192
 962:	80 83       	st	Z, r24
	SET_BIT(TIMSK,0);
 964:	a9 e5       	ldi	r26, 0x59	; 89
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	e9 e5       	ldi	r30, 0x59	; 89
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	81 60       	ori	r24, 0x01	; 1
 970:	8c 93       	st	X, r24

	SET_BIT(SREG,7);//Global Interrupt
 972:	af e5       	ldi	r26, 0x5F	; 95
 974:	b0 e0       	ldi	r27, 0x00	; 0
 976:	ef e5       	ldi	r30, 0x5F	; 95
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	80 68       	ori	r24, 0x80	; 128
 97e:	8c 93       	st	X, r24
}
 980:	cf 91       	pop	r28
 982:	df 91       	pop	r29
 984:	08 95       	ret

00000986 <__vector_11>:

ISR(TIMER0_OVF_vect){
 986:	1f 92       	push	r1
 988:	0f 92       	push	r0
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	0f 92       	push	r0
 98e:	11 24       	eor	r1, r1
 990:	2f 93       	push	r18
 992:	3f 93       	push	r19
 994:	4f 93       	push	r20
 996:	5f 93       	push	r21
 998:	6f 93       	push	r22
 99a:	7f 93       	push	r23
 99c:	8f 93       	push	r24
 99e:	9f 93       	push	r25
 9a0:	af 93       	push	r26
 9a2:	bf 93       	push	r27
 9a4:	ef 93       	push	r30
 9a6:	ff 93       	push	r31
 9a8:	df 93       	push	r29
 9aa:	cf 93       	push	r28
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
	Ovf_counts++;
 9b0:	80 91 60 00 	lds	r24, 0x0060
 9b4:	90 91 61 00 	lds	r25, 0x0061
 9b8:	01 96       	adiw	r24, 0x01	; 1
 9ba:	90 93 61 00 	sts	0x0061, r25
 9be:	80 93 60 00 	sts	0x0060, r24
	if(Ovf_counts==32){//meaning that 1millisecond has passed
 9c2:	80 91 60 00 	lds	r24, 0x0060
 9c6:	90 91 61 00 	lds	r25, 0x0061
 9ca:	80 32       	cpi	r24, 0x20	; 32
 9cc:	91 05       	cpc	r25, r1
 9ce:	51 f4       	brne	.+20     	; 0x9e4 <__vector_11+0x5e>
		Ovf_counts=0;
 9d0:	10 92 61 00 	sts	0x0061, r1
 9d4:	10 92 60 00 	sts	0x0060, r1
		TCNT0=192;	//filling 3/4th of the register to count 1/4th of a register as a dummy pack so that we can count a register and a quarter 1.25 to
 9d8:	e2 e5       	ldi	r30, 0x52	; 82
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	80 ec       	ldi	r24, 0xC0	; 192
 9de:	80 83       	st	Z, r24
		//this will run 32 times
		Scheduler();
 9e0:	0e 94 3f 04 	call	0x87e	; 0x87e <Scheduler>
	}
}
 9e4:	cf 91       	pop	r28
 9e6:	df 91       	pop	r29
 9e8:	ff 91       	pop	r31
 9ea:	ef 91       	pop	r30
 9ec:	bf 91       	pop	r27
 9ee:	af 91       	pop	r26
 9f0:	9f 91       	pop	r25
 9f2:	8f 91       	pop	r24
 9f4:	7f 91       	pop	r23
 9f6:	6f 91       	pop	r22
 9f8:	5f 91       	pop	r21
 9fa:	4f 91       	pop	r20
 9fc:	3f 91       	pop	r19
 9fe:	2f 91       	pop	r18
 a00:	0f 90       	pop	r0
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	0f 90       	pop	r0
 a06:	1f 90       	pop	r1
 a08:	18 95       	reti

00000a0a <_exit>:
 a0a:	f8 94       	cli

00000a0c <__stop_program>:
 a0c:	ff cf       	rjmp	.-2      	; 0xa0c <__stop_program>
